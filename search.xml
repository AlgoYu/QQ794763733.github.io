<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据结构&amp;算法-数据结构</title>
    <url>/2020/09/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&amp;%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><img src="https://store.machine-geek.cn/0005.jpg"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今年3月至5月的时间里，我用Go语言和Java语言进行了一次算法的基础训练。对常用的数据结构和经典的著名算法进行实现，以此博客记录。</p>
<h2 id="数据的存储结构"><a href="#数据的存储结构" class="headerlink" title="数据的存储结构"></a>数据的存储结构</h2><p>要想计算数据，得先把数据存储起来，存储数据的结构类型分为两种：</p>
<ol>
<li><strong>顺序存储</strong>：顺序存储是指用一段地址连续的存储单元存储相邻数据元素。</li>
<li><strong>链式存储</strong>：链式存储是指用计算机中任意一组存储单元来存储数据元素，然后再数据元素中通过指针指向其他数据元素的存储方式。</li>
</ol>
<a id="more"></a>

<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>数据结构是计算机存储、组织数据的方式；是指相互之间存在一种或多种特定关系的数据元素的集合。数据结构有很多种。</p>
<p>数据结构大致分为<code>线性结构</code>和<code>非线性结构</code>。</p>
<h4 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h4><p>线性结构就是表中各个结点具有线性关系。</p>
<ol>
<li><strong>数组（Array）</strong>：数组是可以在内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。</li>
<li><strong>栈（Stack）</strong>：栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</li>
<li><strong>队列（Queue）</strong>：队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队。</li>
<li><strong>链表（Linked List）</strong>：链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个结点包含着存储元素的数据域 (内存空间)，还包含着指向其他结点地址的指针域。</li>
</ol>
<h4 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h4><p>非线性结构就是表中各个结点之间具有多个对应关系。</p>
<ol>
<li><strong>树（Tree）</strong>：树是一种数据之间有着一对多的关系的数据结构，每个结点都有零个或者多个子结点，没有父结点的结点被成为根结点，没有子结点的结点被称为叶子结点。</li>
<li><strong>堆（Heap）</strong>：堆是一种特殊的数据结构，它通常可以被看作一个<code>完全二叉树</code>（一种树结构），堆结构的结点的值总是不大于或者不小于父节点的值。</li>
<li><strong>散列表（Hash）</strong>：散列表，也叫哈希表，是根据关键码和值 (Key和Value) 直接进行访问的数据结构，通过Key和Value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</li>
<li><strong>图（Graph）</strong>：图结构是一种数据之间有着多对多关系的数据结构，每个结点（也称为<code>顶点</code>）都可以连接（也称为<code>边</code>）零个或者多个其他结点。</li>
</ol>
<h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>每一种数据结构都可以使用<code>顺序存储结构</code>者<code>链式存储结构</code>进行实现，上面只是列举了数据结构的大概分类，有许许多多的更详细的变种，这个无法列举，因为数量太多。</p>
<h2 id="数据结构的基本操作"><a href="#数据结构的基本操作" class="headerlink" title="数据结构的基本操作"></a>数据结构的基本操作</h2><p>数据结构在满足特定的存储方式和相关的特性后，应当实现下列几种相应的操作：</p>
<ol>
<li><strong>搜索（Search）</strong>：在数据结构中查找到满足条件的元素或者结点。</li>
<li><strong>插入（Insert）</strong>：在数据结构中添加新的元素或者结点。</li>
<li><strong>删除（Delete）</strong>：在数据结构中删除元素或者结点。</li>
<li><strong>更新（Update）</strong>：在数据结构中更新元素或者结点。</li>
<li><strong>遍历（Traversal）</strong>：按照某种路线，对数据结构中的所有元素或者结点进行访问。</li>
<li><strong>排序（Sequence）</strong>：将数据结构中的元素或者结点按照某种条件进行排序，使之有序。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><a href="https://github.com/QQ794763733/data-structure-and-algorithm-of-Java">Java的数据结构与算法</a></p>
<p><a href="https://github.com/QQ794763733/data-structure-and-algorithm-of-go">Go语言的数据结构与算法</a></p>
]]></content>
      <categories>
        <category>Data Structure &amp; Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>OAuth2.0</title>
    <url>/2020/09/11/Oauth2/</url>
    <content><![CDATA[<p><img src="https://store.machine-geek.cn/0040.png"></p>
<h2 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h2><p>OAuth2.0是一种授权机制，用于提供第三方平台接口授权认证。</p>
<h2 id="四种角色"><a href="#四种角色" class="headerlink" title="四种角色"></a>四种角色</h2><ol>
<li>资源拥有者（<strong>resource owner</strong>）：资源拥有者是能够授予对受保护资源访问权限的实体，在实际开发中通常就是用户。</li>
<li>资源服务器（<strong>resource server</strong>）：资源服务器是托管着受保护资源的服务器，它允许携带访问令牌的请求，并相应受保护的资源。</li>
<li>客户端（<strong>client</strong>）：代表用户向受保护资源请求的应用程序。</li>
<li>授权服务器（<strong>authorization server</strong>）：授权服务器是认证客户端身份的服务器，如果客户身份认证成功后，会向客户端发放访问令牌。</li>
</ol>
<blockquote>
<p>授权服务器和资源服务器的交互不在协议范围之内，它们可以是相同的服务器，也可以是各自独立的实体。</p>
<p>单个授权服务器可以发放多个资源服务器的访问令牌。</p>
</blockquote>
<a id="more"></a>

<h2 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h2><p><img src="https://store.machine-geek.cn/0039.png"></p>
<ol>
<li>客户端向资源拥有者发起授权请求。</li>
<li>资源拥有者授权准许。</li>
<li>客户端向授权服务器发起授权准许。</li>
<li>授权服务器返回访问令牌。</li>
<li>客户端使用访问令牌向资源服务器发起资源访问请求。</li>
<li>资源服务器返回受保护的资源。</li>
</ol>
<h2 id="四种方式"><a href="#四种方式" class="headerlink" title="四种方式"></a>四种方式</h2><ol>
<li>授权码模式（<strong>authorization code</strong>）：客户端将资源拥有者定向到授权服务器，授权服务器认证资源拥有者的身份后，发放一个授权码。客户端使用授权码向授权服务器获取访问令牌，再使用访问令牌获取资源服务器中受保护的资源。</li>
<li>隐藏式（<strong>implicit</strong>）：客户端将资源拥有者定向到授权服务器，授权服务器认证资源拥有者的身份后，直接发放访问令牌，客户端再使用访问令牌获取资源服务器中受保护的资源。</li>
<li>密码模式（<strong>password</strong>）：客户端直接使用资源拥有者的账号密码向授权服务器获取访问令牌，再使用访问令牌获取资源服务器中受保护的资源。</li>
<li>客户凭证（<strong>client credentials</strong>）：客户端直接向授权服务器获取令牌，再使用访问令牌获取资源服务器中受保护的资源。</li>
</ol>
<h2 id="令牌分类"><a href="#令牌分类" class="headerlink" title="令牌分类"></a>令牌分类</h2><ol>
<li>访问令牌（<strong>Access Token</strong>）：访问令牌是用户访问资源服务器受保护资源的令牌。</li>
<li>刷新令牌（<strong>Refresh Token</strong>）：刷新令牌是访问令牌过期后，用于获取新的访问令牌的令牌。</li>
</ol>
<h2 id="令牌使用"><a href="#令牌使用" class="headerlink" title="令牌使用"></a>令牌使用</h2><p><img src="https://store.machine-geek.cn/0041.png"></p>
<ol>
<li>客户端向授权服务器进行授权。</li>
<li>授权服务器返回访问令牌与刷新令牌。</li>
<li>客户端使用访问令牌向资源服务器获取受保护的资源。</li>
<li>当访问令牌失效后，资源服务器拒绝客户端的请求。</li>
<li>客户端使用刷新令牌向授权服务器获取新的访问令牌。</li>
<li>授权服务器返回新的访问令牌以及刷新令牌。</li>
</ol>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Cloud</tag>
        <tag>Spring Security</tag>
        <tag>Oauth</tag>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity教程</title>
    <url>/2020/07/22/SpringSecurity%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="导入框架"><a href="#导入框架" class="headerlink" title="导入框架"></a>导入框架</h2><p>Spring Boot Security的依赖一旦加入后，会被自动配置，所以在加入配置的时候，Spring Security就已经开始生效了。</p>
<h2 id="框架的配置类"><a href="#框架的配置类" class="headerlink" title="框架的配置类"></a>框架的配置类</h2><p>新建一个类继承<code>WebSecurityConfigurerAdapter</code>并重写里面的三个方法，这三个方法涵盖了大部分<code>Spring Security</code>的配置。重点的是<code>Session</code>策略，静态资源路径，登录页，安全防护，拦截路径这些配置，以及后续的自定义过程中许多都需要在这个类里面配置。  </p>
<p><strong>重要注解：</strong>  </p>
<p><code>@EnableWebSecurity</code>：开启Web安全拦截。  </p>
<p><code>@EnableGlobalMethodSecurity(securedEnabled = true,jsr250Enabled = true,prePostEnabled = true)</code>：开启全局的方法安全拦截。</p>
<a id="more"></a>

<h2 id="自定义加密方式"><a href="#自定义加密方式" class="headerlink" title="自定义加密方式"></a>自定义加密方式</h2><p>注册一个实现了<code>PasswordEncoder</code>接口的对象到<code>Spring容器</code>中，一般来说使用框架已经实现的<code>BCryptPasswordEncoder</code>就可以了。</p>
<h2 id="自定义用户信息"><a href="#自定义用户信息" class="headerlink" title="自定义用户信息"></a>自定义用户信息</h2><p>写死在内存中或者配置文件中的方式就不讲了，写一个类实现<code>UserDetailsService</code>接口，实现<code>loadUserByUsername</code>方法，在这个方法中查询数据库，用于返回框架需要用到的用户信息，用户信息可以使用框架自带的<code>User</code>类，也可以自己写一个类实现<code>UserDetails</code>接口当做框架使用的用户信息类。<code>UserDetails</code>接口中有一个返回权限的<code>getAuthorities</code>方法，需要返回这个用户的权限信息，这个权限信息可以使用框架自带的<code>SimpleGrantedAuthority</code>类，也可以自己实现<code>GrantedAuthority</code>这个接口，作为框架的权限信息类。  </p>
<p>权限验证本质上是一个字符串，但是在框架中没有分开角色类和权限类。统一为<code>GrantedAuthority</code>接口的实现类，所以使用字符串前缀”ROLE_”表示这是一个用户，没有这个前缀表示是一个权限，统一在<code>getAuthorities</code>方法中放在一起返回。</p>
<h2 id="自定义登录逻辑"><a href="#自定义登录逻辑" class="headerlink" title="自定义登录逻辑"></a>自定义登录逻辑</h2><p>写一个类继承<code>UsernamePasswordAuthenticationFilter</code>过滤器，这个配置需要到配置类里面去配置的。  </p>
<p>重写<code>attemptAuthentication</code>方法来获取<code>request</code>中的用户信息，并构建一个实现<code>Authentication</code>接口的类返回给框架用作验证，一般用框架自带的<code>usernamePasswordAuthenticationToken</code>类即可。  </p>
<p>重写<code>successfulAuthentication</code>方法，这个方法会在验证成功后调用，可以在这里实现生成Token，存储Redis之类的操作。  </p>
<p>重写<code>unsuccessfulAuthentication</code>方法，这个方法会在验证失败之后调用，可以自定义返回一些友好提示信息。</p>
<h2 id="自定义登录界面"><a href="#自定义登录界面" class="headerlink" title="自定义登录界面"></a>自定义登录界面</h2><p>写好一个页面的<code>Controller</code>，然后到配置类里面去配置无需拦截。</p>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Security</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>GPU与图形基本原理</title>
    <url>/2020/01/20/GPU%E4%B8%8E%E5%9B%BE%E5%BD%A2%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>计算机图形学号称计算机三大浪漫之一，是非常深奥的一门学科。计算机把数据通过图片、图形化界面、视频、游戏……这种直观肉眼可见的呈现方式，使用者不需要复杂的专业知识即可理解。由图形开始产生的各种新的交互方式，使计算机从小众走向大众，是计算机何以如此伟大的重要原因之一。</p>
<h2 id="CPU和GPU"><a href="#CPU和GPU" class="headerlink" title="CPU和GPU"></a>CPU和GPU</h2><p><img src="https://store.machine-geek.cn/0032.jpg" alt="Hardware Structure"></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li><strong>CPU（Central Processing Unit）：</strong>中央处理单元，是计算机的核心所在。通过遵循放置在计算机内存中的指令来实现指挥、算术运算、选择和决定。它相当于人类的大脑一样。</li>
<li><strong>GPU（Graphic Processing Unit）：</strong>图形处理单元，专门用于处理图形的处理，能够胜任重复和高度并行的计算任务。协作CPU完成某些特定的场景的计算从而达到加速的效果。<a id="more"></a>

</li>
</ul>
<h3 id="结构对比"><a href="#结构对比" class="headerlink" title="结构对比"></a>结构对比</h3><p><img src="https://store.machine-geek.cn/0030.png" alt="CPU Structure"><br>CPU主要有控制单元（Control Unit）、算术逻辑单元（Arithmetic And Logic Unit）、缓存（Cache）、动态随机存储器（DRAM  ）组成。CPU的缓存结构比较多，对单任务的速度要求高，CPU所擅长的像操作系统这一类应用，需要快速响应实时信息，需要针对延迟优化，所以晶体管数量和能耗都需要用在分支预测、乱序执行、低延迟缓存等控制部分。<br><img src="https://store.machine-geek.cn/0031.png" alt="GPU Structure"><br>GPU类似与CPU，也有控制单元（Control Unit）、算术逻辑单元（Arithmetic And Logic Unit）、缓存（Cache）、动态随机存储器（DRAM  ）组成。它的ALU更多，但单个ALU的性能比不上CPU的ALU，现代的GPU依然还是采用并行计算，所以每次处理的数据都是批量的，GPU适合对于具有极高的可预测性和大量相似的运算以及高延迟、高吞吐的架构运算。</p>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><table>
<thead>
<tr>
<th align="center">CPU</th>
<th align="center">GPU</th>
</tr>
</thead>
<tbody><tr>
<td align="center">中央处理单元</td>
<td align="center">图形处理单元</td>
</tr>
<tr>
<td align="center">几个核心</td>
<td align="center">许多核心</td>
</tr>
<tr>
<td align="center">低延迟</td>
<td align="center">高吞吐量</td>
</tr>
<tr>
<td align="center">适合串行处理</td>
<td align="center">适合并行处理</td>
</tr>
<tr>
<td align="center">一次执行少量操作</td>
<td align="center">一次执行大量操作</td>
</tr>
</tbody></table>
<h2 id="计算机图形"><a href="#计算机图形" class="headerlink" title="计算机图形"></a>计算机图形</h2><h3 id="图形的存储"><a href="#图形的存储" class="headerlink" title="图形的存储"></a>图形的存储</h3><p>我们都知道，计算机只能识别二进制数据，所以无论今天的计算机看起来多么强大，多么不可思议，最底层都是只有<code>0</code>和<code>1</code>完成的。图像的存储也同样是如此。</p>
<h3 id="存储区别"><a href="#存储区别" class="headerlink" title="存储区别"></a>存储区别</h3><p>位图和矢量图是主要存储区别，我们的显示器屏幕是由无数个像素点组成的。位图的存储方式主要思想是记录每一个像素的颜色值。所以在放大一张位图的时候，你可以清晰得看到网格，和每个网格中一块一块的像素颜色。而矢量图中保存的是线条和图块的信息，所以矢量图形文件与分辨率和图像大小无关，只与图像的复杂程度有关，图像文件所占的存储空间较小。</p>
<h3 id="3D图形"><a href="#3D图形" class="headerlink" title="3D图形"></a>3D图形</h3><p>我们的显示器是2D平面，在处理3D图形的时候，会通过算法把一个3D图形”拍平“，这叫3D投影，再通过扫描线填充、线框渲染、抗锯齿、明暗处理、纹理映射……等等诸多处理过程，最终显示到2D屏幕上。使得图形更具有空间感，所有3D设计或是游戏画面都必须经历这样的过程。</p>
<h3 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h3><p>GPU图形渲染流水线的主要工作主要划分为两个部分：</p>
<ul>
<li>把 3D 坐标转换为 2D 坐标</li>
<li>把 2D 坐标转变为实际的有颜色的像素</li>
</ul>
<h3 id="渲染的流程"><a href="#渲染的流程" class="headerlink" title="渲染的流程"></a>渲染的流程</h3><p><img src="https://store.machine-geek.cn/0022.png" alt="order"></p>
<ol>
<li><strong>顶点着色器（Vertex Shader）：</strong>该阶段的输入是 顶点数据（Vertex Data） 数据，比如以数组的形式传递 3 个 3D 坐标用来表示一个三角形。顶点数据是一系列顶点的集合。顶点着色器主要的目的是把 3D 坐标转为另一种 3D 坐标，同时顶点着色器可以对顶点属性进行一些基本处理。</li>
<li><strong>形状装配（Shape Assembly）：</strong>该阶段将顶点着色器输出的所有顶点作为输入，并将所有的点装配成指定图元的形状。图中则是一个三角形。图元（Primitive） 用于表示如何渲染顶点数据，如：点、线、三角形。</li>
<li><strong>几何着色器（Geometry Shader）：</strong>该阶段把图元形式的一系列顶点的集合作为输入，它可以通过产生新顶点构造出新的（或是其它的）图元来生成其他形状。例子中，它生成了另一个三角形。</li>
<li><strong>光栅化（Rasterization）：</strong>该阶段会把图元映射为最终屏幕上相应的像素，生成片段。片段（Fragment） 是渲染一个像素所需要的所有数据。</li>
<li><strong>片段着色器（Fragment Shader）：</strong>该阶段首先会对输入的片段进行 裁切（Clipping）。裁切会丢弃超出视图以外的所有像素，用来提升执行效率。</li>
<li><strong>测试与混合（Tests and Blending）：</strong>该阶段会检测片段的对应的深度值（z 坐标），判断这个像素位于其它物体的前面还是后面，决定是否应该丢弃。此外，该阶段还会检查 Alpha 值（ Alpha 值定义了一个物体的透明度），从而对物体进行混合。因此，即使在片段着色器中计算出来了一个像素输出的颜色，在渲染多个三角形的时候最后的像素颜色也可能完全不同。</li>
</ol>
<h2 id="OpenGL和DirectX"><a href="#OpenGL和DirectX" class="headerlink" title="OpenGL和DirectX"></a>OpenGL和DirectX</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>在以前，软件开发缺乏标准，所以一般都只针对某个特定型号的硬件进行编程。一段代码只能运行在特定型号的硬件上，所以开发的软件适配诸多不同的硬件工作量十分庞大。所以产生了API（Application Programming Interface），中文称作应用程序接口。它是一种软件中介，允许两个应用程序相互通信。所以，代码只需要调用某个功能统一的接口，其余的事情交给相应实现了这个接口的程序完成了，等待处理结束后返回结果给我即可。</p>
<h3 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h3><p>OpenGL（全写Open Graphics Library）是个定义了一个跨编程语言、跨平台的操作图形的接口。严格来说OpenGL本身并非API，它只是一个规范。GPU的硬件开发商则需要提供满足OpenGL规范的实现，就是驱动，它们负责将OpenGL定义的API命令翻译为GPU指令。</p>
<h3 id="DirectX"><a href="#DirectX" class="headerlink" title="DirectX"></a>DirectX</h3><p>DirectX是Microsoft针对Windows开发的一套API，不光包含了图形API，还包含了音频API。为Windows开发人员提供一个共同的硬件驱动标准。GPU硬件厂商也需要实现相应的DirectX接口。</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><blockquote>
<p>1938年，一个美国的专利局文书员卡尔森发明了复印机，由于当时更流行使用复写纸，所以卡尔森的复印机一直无人问津。1946 年，伯乐出现了，一家叫做哈罗伊德的公司看上了卡尔森的技术，公司老板乔瑟夫·威尔逊看好复印机的发展，于是就将卡尔森连人带技术一起买了过来。1960 年，经过多年的研究和筹备，哈罗伊德公司发布了第一代自动静电复印机施乐914，大获成功，当时绝大部分的美国公司办公室里都使用施乐914复印机，把东西拿去复印一下在当时叫做“施乐”一下，就好像现在要在网络上搜索什么东西叫做“百度”一下那样。有鉴于“施乐”这个词的流行，所以老板威尔逊直接就把哈罗伊德公司改成了施乐公司，这便是施乐公司的由来。<br>  1968年为公司垫定了基础的卡尔森去世，同时施乐公司老板乔瑟夫·威尔逊把CEO 的位置交给了彼得·麦克卡隆，施乐公司迎来了转折点。有鉴于当时市场上不断有新的复印机产品出现，而施乐公司却在复印机技术方面没有新的进展，所以新老板彼得·麦克卡隆决定开辟第二战场，把目光投向了计算机行业。为此，施乐公司在1970年投入巨资，建立了一个名叫PARC的研究中心，这个研究中心不惜血本，在全美网罗计算机人才，轰动一时。在当时，据说全美100个计算机天才里面，有58个在PARC研究中心。为了照顾这些天才们怪癖的工作习惯，施乐公司允许工程师们穿着睡衣、短裤来上班，在办公司里安放了许多懒人沙发和摇摇椅，没有固定的工作位置，一切看心情。这样的自由程度，比当今在硅谷的那些科技公司有过之而无不及，PARC也成为了全美计算机天才们向往的天堂。<br>可惜好景不长，70年代末，日本科技公司产品大举进攻美国，施乐的复印机面临着巨大的竞争，生意每况愈下，而PARC研究中心耗费了施乐公司大量的资金，研发出的产品却迟迟无法商用变现，所以施乐公司不得不砍掉了PARC的大笔研究资金，PARC本来想要研发的个人电脑阿尔托二代，也因此流产。整个PARC人心惶惶，大趋势已经很明显，施乐公司可能会放弃电子计算机行业，而专心于守住自己的老本行复印机。所以当1979年无比崇拜PARC的乔布斯，提出要带领自己的苹果公司团队深度拜访PARC，作为交换，将低价出售给施乐公司100万美元的苹果股票时，由于对PARC已经快要放弃，再加上深陷缺钱危机中，施乐公司居然一口答应了。<br>朝圣的日子到来了，1979年的某一天，乔布斯带着他的团队浩浩荡荡的来到PARC，PARC也已经准备好了对他们进行最深程度的开放，允许他们参观那些本属于绝密的新技术。乔布斯为了此行，挑选了苹果当时最厉害的那些工程师们，此行绝不仅仅是参观那么简单。但是，哪怕乔布斯已经知道此行会大有收获，当看到鼠标和图形化界面时，还是被吓到了，当场就惊为天人。<br>当时的苹果已经开发出了Apple II，使用的是类似dos系统那样的，全黑的屏幕，以输入指令方式来操作电脑，乔布斯洋洋得意的自以为Apple II已经是当时最先进的电脑，哪里知道在PARC还藏着这么厉害的技术。被震住了的乔布斯和苹果的工程师们，敬畏地看着这些产品，聆听着PARC天才们的解说，默默的在心里记住每一个细节。<br>回到苹果公司后，乔布斯意识到阿尔托电脑、鼠标和图形化界面，才是个人电脑的未来，所以制定了图形化电脑研究计划。之后乔布斯也是撬走了施乐公司PARC的15位天才，一起参与此计划研发。终于在1983年，苹果公司推出了世界上第一台商用的图形化电脑：Lisa。<br>当时还在拼命改进Dos系统的比尔盖茨看到Lisa的发布，震惊程度完全不亚于乔布斯拜访PARC时，后面的故事大家可以去网上再了解，</p>
</blockquote>
<blockquote>
<p>“It was like a veil being lifted from my eyes”<br>“就像拨开了眼前的一层迷纱”<br>史蒂夫·乔布斯</p>
</blockquote>
<p>还有一句但我没有找到英文的原句：</p>
<blockquote>
<p>“如果施乐当时真的知道自己有的是什么，找机会发挥自己的优势，那么它可以变成‘IBM+微软+施乐’，可以说是世界上最大的科技公司。”<br>史蒂夫·乔布斯</p>
</blockquote>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>我见过的大部分开发者会调用函数库或框架写出各种各样漂亮美观的程序，但是许多人对于图形的底层的基础原理并不了解，我认为这是不合理的。    </p>
]]></content>
      <categories>
        <category>Computer Graphics</category>
      </categories>
      <tags>
        <tag>Computer</tag>
        <tag>Computer Graph</tag>
        <tag>OpenGL</tag>
        <tag>DirectX</tag>
        <tag>CPU</tag>
        <tag>GPU</tag>
      </tags>
  </entry>
  <entry>
    <title>有限状态自动机</title>
    <url>/2020/01/15/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<p><img src="https://store.machine-geek.cn/0016.jpg" alt="有限状态自动机图"></p>
<h2 id="什么是有限状态自动机？"><a href="#什么是有限状态自动机？" class="headerlink" title="什么是有限状态自动机？"></a>什么是有限状态自动机？</h2><h3 id="WIKI"><a href="#WIKI" class="headerlink" title="WIKI"></a>WIKI</h3><blockquote>
<p>A finite-state machine (FSM) or finite-state automaton (FSA, plural: automata), finite automaton, or simply a state machine, is a mathematical model of computation. It is an abstract machine that can be in exactly one of a finite number of states at any given time. The FSM can change from one state to another in response to some external inputs and/or a condition is satisfied; the change from one state to another is called a transition.[1] An FSM is defined by a list of its states, its initial state, and the conditions for each transition. Finite state machines are of two types – deterministic finite state machines and non-deterministic finite state machines.[2] A deterministic finite-state machine can be constructed equivalent to any non-deterministic one.</p>
</blockquote>
<h3 id="中文翻译"><a href="#中文翻译" class="headerlink" title="中文翻译"></a>中文翻译</h3><p>有限状态机A finite-state machine（FSM）或有限状态自动机finite-state automaton（FSA，复数：finite automaton），有限自动机，或简称为状态机，是一个数学计算的模型。它是一种抽象机器，在任何给定时间都可以恰好处于有限数量的状态之一。FSM可以响应一些外部输入和/或满足条件而从一种状态变为另一种状态；从一种状态到另一种状态的改变被称为过渡。FSM由其状态，其初始状态和每个过渡的条件的列表定义。有限状态机有两种类型：确定性有限状态机和非确定性有限状态机。确定性有限状态机的构造可以等同于任何非确定性有限状态机。</p>
<a id="more"></a>
<h3 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h3><ul>
<li>抽象的机器</li>
<li>数学计算模型</li>
<li>状态转换机制</li>
<li>条件分支</li>
</ul>
<p>它是一种数学理论。从编程的角度来说它是一种状态转换机制，根据不同的参数转换不同的状态。按分支来说，它是不同的分支，根据参数来匹配条件进入下一个分支。</p>
<h2 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h2><h3 id="旋转门"><a href="#旋转门" class="headerlink" title="旋转门"></a>旋转门</h3><p>用一个旋转门来解释它。它的规则很简单，一开始处于锁定状态，然后每次投币就解锁，等到人通过旋转门后再次锁定，如此循环。<br><img src="https://store.machine-geek.cn/0013.jpg" alt="旋转门"><br>它的有限状态自动机看起来像上面这张图一样，它看起来好像是数据结构中的有向图。</p>
<p>它有两种状态：</p>
<ol>
<li> <strong>锁定（Locked）</strong></li>
<li><strong>解锁（Unlocked）</strong></li>
</ol>
<p>它有两种操作：</p>
<ol>
<li> <strong>推动（Push）</strong></li>
<li><strong>投币（Coin）</strong></li>
</ol>
<p>我们从Locked状态作为起始点，首先指向当前的状态Locked，当前状态的允许的输入只有两个:<code>Push</code>、<code>Coin</code>。它会判断你的操作是否为满足哪一条，如果你进行Push操作，Push条件满足，它还是停留在Locked状态，你仍然无法通过旋转门。</p>
<p>现在你Coin，还是重复步骤，指向当前的状态，查看允许输入，满足Coin条件，状态指向Unloked。</p>
<p>注意，这个时候已经进入另一个状态了，你进行下一步操作。Push允许你通过旋转门，但Coin没有效果，旋转门已经处于Unlocked状态。</p>
<p>如此循环，就是有限状态机了。</p>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><p><code>C语言</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> PUSH <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> COIN <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LOCKED <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> UNLOCKED <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FSM</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> status = LOCKED;</span><br><span class="line">    <span class="keyword">char</span> operate[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,operate);</span><br><span class="line">        <span class="keyword">int</span> opNum = transToOperate(operate);</span><br><span class="line">        <span class="keyword">switch</span>(status)&#123;</span><br><span class="line">            <span class="keyword">case</span> LOCKED:</span><br><span class="line">                <span class="keyword">switch</span>(opNum)&#123;</span><br><span class="line">                    <span class="keyword">case</span> PUSH:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Please put in a coin&quot;</span>);</span><br><span class="line">                        status = LOCKED;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> COIN:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Unlocked&quot;</span>);</span><br><span class="line">                        status = UNLOCKED;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                    	status = LOCKED;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Operation error&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> UNLOCKED:</span><br><span class="line">                <span class="keyword">switch</span>(opNum)&#123;</span><br><span class="line">                    <span class="keyword">case</span> PUSH:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Allow enter&quot;</span>);</span><br><span class="line">                        allowEnter();</span><br><span class="line">                        status = LOCKED;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> COIN:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Repeat coin&quot;</span>);</span><br><span class="line">                        status = UNLOCKED;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                    	status = LOCKED;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Operation error&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                status = LOCKED;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Status error&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><p>这个看起来很简单对吧，即便是<code>if</code>、<code>else</code>也能完成，实际上运用中的有限自动机会复杂很多。我们真实开发中遇到的情况看起来是这样：<br><img src="https://store.machine-geek.cn/0014.jpg" alt="实际遇到的情况"><br>如果不使用有限自动机管理状态将会变得非常困难。有限状态自动机的思想非常重要，它在生活中的运用非常广泛，在编程领域许多非常著名的框架都运用了这个思想，即使是编译原理中也有。</p>
<h2 id="正式定义"><a href="#正式定义" class="headerlink" title="正式定义"></a>正式定义</h2><h3 id="确定性有限状态自动机（Deterministic-Finite-Automation）"><a href="#确定性有限状态自动机（Deterministic-Finite-Automation）" class="headerlink" title="确定性有限状态自动机（Deterministic Finite Automation）"></a>确定性有限状态自动机（Deterministic Finite Automation）</h3><p>每个可能的输入都会唯一确定结果状态。每个输入都会导致状态更改，新状态完全由输入确定。此外，自动机仅在读取输入后才能更改状态。</p>
<h4 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h4><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Q</td>
<td align="center">有限状态集</td>
</tr>
<tr>
<td align="center">Σ</td>
<td align="center">有限的非空输入符号</td>
</tr>
<tr>
<td align="center">δ</td>
<td align="center">一系列转移函数</td>
</tr>
<tr>
<td align="center">q 0</td>
<td align="center">起始状态</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">一组接受状态</td>
</tr>
</tbody></table>
<h4 id="DFA示例"><a href="#DFA示例" class="headerlink" title="DFA示例"></a>DFA示例</h4><p><img src="https://store.machine-geek.cn/0017.jpg" alt="DFA"></p>
<table>
<thead>
<tr>
<th align="center">当前状态</th>
<th align="center">输入符号</th>
<th align="center">新状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center">S1</td>
<td align="center">1</td>
<td align="center">S1</td>
</tr>
<tr>
<td align="center">S1</td>
<td align="center">0</td>
<td align="center">S2</td>
</tr>
<tr>
<td align="center">S2</td>
<td align="center">1</td>
<td align="center">S2</td>
</tr>
<tr>
<td align="center">S2</td>
<td align="center">0</td>
<td align="center">S1</td>
</tr>
</tbody></table>
<p><code>Q=&#123;s1,s2&#125;``Σ =&#123;0,1&#125;``q0=s1``F=s1</code><br>此DFA可以识别所有偶数个0（和任意个1）的字符串。这意味着，如果您运行任何具有偶数0的输入字符串，则该字符串将以接受状态结束。如果运行的字符串的奇数为0，则该字符串将以s_2s2，这不是接受状态。</p>
<h3 id="非确定性有限状态自动机（Nondeterministic-Finite-Automaton）"><a href="#非确定性有限状态自动机（Nondeterministic-Finite-Automaton）" class="headerlink" title="非确定性有限状态自动机（Nondeterministic Finite Automaton）"></a>非确定性有限状态自动机（Nondeterministic Finite Automaton）</h3><p>某些输入可能允许选择结果状态，而某些输入可能导致自动机阻塞，因为没有与该输入相对应的新状态。此外，可以构造自动机，使得它可以完全不读取任何输入就可以将状态改变为某个新状态。</p>
<h4 id="数学符号-1"><a href="#数学符号-1" class="headerlink" title="数学符号"></a>数学符号</h4><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Q</td>
<td align="center">有限状态集</td>
</tr>
<tr>
<td align="center">Σ</td>
<td align="center">有限的非空输入字母</td>
</tr>
<tr>
<td align="center">δ</td>
<td align="center">一系列转移函数</td>
</tr>
<tr>
<td align="center">q0</td>
<td align="center">起始状态</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">一组接受状态</td>
</tr>
</tbody></table>
<h4 id="NDFA示例"><a href="#NDFA示例" class="headerlink" title="NDFA示例"></a>NDFA示例</h4><p><img src="https://store.machine-geek.cn/0018.jpg" alt="NFA"></p>
<p>上面的NDFA识别以“10”结尾的字符串和以“01.”结尾的字符串。</p>
<p>状态a是开始状态，从那里，我们可以创建一个字符串，其中有任意顺序的1和0，然后转移到状态b或状态e，否则我们可以立即转到状态b或状态e。无论如何，NDFA只会接受到达状态的字符串d或状态g。为了达到状态d或状态g，字符串必须以“01”结尾（用于状态d）或“10”（用于状态g）。</p>
<p>例如，此NDFA都可以识别以下字符串。</p>
<ul>
<li>00000000010</li>
<li>10</li>
<li>01</li>
<li>1111101</li>
</ul>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>其实关于有限状态自动机有许多探讨的地方，这篇文章就写到这里。</p>
]]></content>
      <categories>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>FSM</tag>
        <tag>FSA</tag>
        <tag>Finite State Machine</tag>
        <tag>Finite State Automaton</tag>
        <tag>Nondeterministic Finite Automaton</tag>
        <tag>Deterministic Finite Automaton</tag>
        <tag>NDFA</tag>
        <tag>DFA</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务架构MicroServices</title>
    <url>/2020/01/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84MicroServices/</url>
    <content><![CDATA[<h2 id="什么是微服务？"><a href="#什么是微服务？" class="headerlink" title="什么是微服务？"></a>什么是微服务？</h2><p><img src="https://store.machine-geek.cn/0019.jpg" alt="MicroServices"></p>
<h3 id="WIKI"><a href="#WIKI" class="headerlink" title="WIKI"></a>WIKI</h3><blockquote>
<p>Microservices are a software development technique —a variant of the service-oriented architecture (SOA) structural style— that arranges an application as a collection of loosely coupled services. In a microservices architecture, services are fine-grained and the protocols are lightweight.</p>
</blockquote>
<p>这是Wiki上对微服务的介绍，微服务是一种软件开发技术-面向服务的体系结构(SOA)结构样式的变体-将应用程序安排为松散耦合的服务集合。在微服务体系结构中，服务是细粒度的，协议是轻量级的。</p>
<p><strong>简单来说，微服务是一种软件开发的架构模式。</strong></p>
<a id="more"></a>
<h2 id="分布式系统中的CAP定理"><a href="#分布式系统中的CAP定理" class="headerlink" title="分布式系统中的CAP定理"></a>分布式系统中的CAP定理</h2><p>在理论计算机科学中，CAP定理（也以计算机科学家Eric Brewer的名字命名为布鲁尔定理（Brewer’s theorem））指出，一个分布式系统具有 Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性）三条特性，分布式数据存储不可能同时保证三个中的两个以上。</p>
<table>
<thead>
<tr>
<th>定理</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>一致性（Consistency）</td>
<td>每次读取都会收到最新的写入或错误。</td>
</tr>
<tr>
<td>可用性（Availability）</td>
<td>每个请求都会收到一个（非错误）响应，但不能保证它包含最新的写入。</td>
</tr>
<tr>
<td>分区容错性（Partition tolerance）</td>
<td>尽管节点之间网络丢弃（或延迟）了任意数量的消息，但系统仍继续运行。</td>
</tr>
</tbody></table>
<p><strong>服务器之间的通信无论是出于什么原因都是有可能失败的，所以CAP中的P总是成立，我们只能在A和C中进行取舍。</strong></p>
<h2 id="微服务特点"><a href="#微服务特点" class="headerlink" title="微服务特点"></a>微服务特点</h2><p>微服务架构并没有准确的定义，但是随着时间的流逝，业界内大家公认的微服务达成了以下共识：</p>
<ul>
<li>在微服务架构（MSA）服务通常流程是通过通信网络实现，利用技术无关目标协议。</li>
<li>微服务架构中的服务可以独立部署。</li>
<li>服务是围绕业务功能组织的。</li>
<li>可以根据最适合的语言，使用不同的编程语言，数据库，硬件和软件环境来实现服务。</li>
<li>服务规模小，支持消息传递，受上下文限制，可自主开发，可独立部署，去中心化以及通过自动化流程构建和发布。</li>
</ul>
<h2 id="微服务架构的应用场景"><a href="#微服务架构的应用场景" class="headerlink" title="微服务架构的应用场景"></a>微服务架构的应用场景</h2><h3 id="大型项目"><a href="#大型项目" class="headerlink" title="大型项目"></a>大型项目</h3><p>微服务架构适合大型复杂的项目，对于规模较小的系统并不适合。</p>
<h3 id="团队人员"><a href="#团队人员" class="headerlink" title="团队人员"></a>团队人员</h3><p>小型团队使用微服务架构会增加许多的工作量。</p>
<h3 id="业务拆分"><a href="#业务拆分" class="headerlink" title="业务拆分"></a>业务拆分</h3><p>不要太苛刻于业务拆分，有一些功能模块已经恰到好处，不适合再继续拆分。</p>
<h3 id="重构系统"><a href="#重构系统" class="headerlink" title="重构系统"></a>重构系统</h3><p>如果你正在考虑用微服务重构某些正在使用的系统，一定要考虑得非常清楚，没有策略指引的迁移很可能会造成灾难性的后果。</p>
<h3 id="紧密集成"><a href="#紧密集成" class="headerlink" title="紧密集成"></a>紧密集成</h3><p>需要快速处理实时数据，响应时间和可用资源方面具有很严格限制的系统，不适合使用微服务架构。</p>
<h2 id="微服务核心"><a href="#微服务核心" class="headerlink" title="微服务核心"></a>微服务核心</h2><p>以下是实现微服务架构的核心关注点</p>
<ul>
<li>配置管理（Configuration management）：微服务应用程序的配置需要从代码中进行外部化，并可以通过简单的服务调用进行检索。</li>
<li>服务发现（Service discovery）：维护可在微服务域中工作的服务实例列表。</li>
<li>负载平衡（Load balancing）：扩展分布式系统的关键是能够运行一个组件的多个实例。然后必须通过负载均衡器将负载分配到这些实例上。</li>
<li>API网关（API gateway）：微服务提供的API的粒度通常与服务客户端所需的粒度不同。API网关实现外观，并提供其他服务，例如代理，协议转换和其他管理功能。</li>
<li>安全问题（Security concerns）：许多安全问题被推送到API网关实现中。对于分布式微服务应用程序，有意义的是不要重新发明安全轮，而是允许在所有服务共享的组件中定义策略并实施。</li>
<li>集中式日志记录（Centralized logging）：拥有集中式日志收集和分析基础架构来管理大量服务非常重要-其中许多服务以分布式方式运行。</li>
<li>集中度量（Centralized metric）：集中区域可以监视单个服务和整个系统的运行状况和性能，对于正常操作至关重要。</li>
<li>分布式跟踪（Distributed tracing）：每个进程的日志记录和度量标准监视都有其位置，但是它们都无法重建事务在分布式系统中传播时所采用的复杂路径。分布式跟踪是微服务平台的基本工具。</li>
<li>弹性和容错能力（Resilience and fault tolerance）：分布式系统必须能够自动绕过故障进行路由，并且能够将请求路由到将提供最佳响应的服务实例。</li>
<li>自动缩放和自我修复（Autoscaling and self-healing）：分布式系统通过水平缩放来响应更高的负载：平台必须检测并自动响应这种情况。此外，系统需要检测故障并尝试在没有操作员输入的情况下自动重启。</li>
<li>打包，部署和调度（Packaging, deployment and scheduling）：大型系统需要强大的软件包管理，部署系统需要管理滚动或蓝绿色部署，并在必要时进行回滚。调度程序可根据当前条件帮助确定可以将一组新服务部署到哪个特定执行节点。</li>
<li>作业管理（Job management）：计划的计算与任何单个用户请求断开连接。</li>
<li>单例应用程序（Singleton application）：限制特定服务作为整个系统中该服务的唯一实例运行。</li>
</ul>
<h2 id="服务之间的通信"><a href="#服务之间的通信" class="headerlink" title="服务之间的通信"></a>服务之间的通信</h2><p>由上面我们已经知道，微服务架构中服务之间的通信都是通过网络协议来完成的。我们现在常见的方式有以下几种：</p>
<h3 id="HTTP方式"><a href="#HTTP方式" class="headerlink" title="HTTP方式"></a>HTTP方式</h3><p>HTTP的调用方式是最常见的，开发的服务接口都是RESTFUL风格，所以这里形成了异构，无论你采用什么编程语言都可以互相调用，所以服务之间HTTP方式的调用直接通过直接请求其API返回结果即可。</p>
<h3 id="RPC方式"><a href="#RPC方式" class="headerlink" title="RPC方式"></a>RPC方式</h3><p>RPC（Remote Procedure Call）是远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易，调用远程远程主机的方法像本机的方法一样。</p>
<h3 id="消息通信"><a href="#消息通信" class="headerlink" title="消息通信"></a>消息通信</h3><p>与HTTP通信不同，所涉及的服务不会直接相互通信。而是，这些服务将消息推送到其他服务订阅的消息代理。这消除了与HTTP通信相关的许多复杂性。市面上有许多的非常优秀的消息队列软件可以使用。</p>
<h3 id="事件驱动通信"><a href="#事件驱动通信" class="headerlink" title="事件驱动通信"></a>事件驱动通信</h3><p>此处仍然需要消息代理，因为各个服务会将其事件写入其中。但是与消息方法不同，消费服务不需要知道事件的细节，它们对事件的发生做出反应，而不是产生能会或可能不会传递的信息。服务可以监听他们关心的事件，并且提供为响应它们而需要运行的逻辑。</p>
<h3 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h3><p>通长情况下，我们对外提供的API接口采用HTTP，而对于服务内部之间的调用，优先考虑RPC。至于某一些日志、推送、邮件等业务，放到消息通信或时间驱动通信比较好。</p>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>微服务架构是当下最为火爆的技术，但得考虑是否适合自己。互联网架构随着人类的发展依然在演变中，是否有一天真的会出现最完美的终极架构？</p>
]]></content>
      <categories>
        <category>MicroServices</category>
      </categories>
      <tags>
        <tag>MicroServices</tag>
        <tag>Architecture</tag>
        <tag>Software Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>用户模式和内核模式</title>
    <url>/2020/01/14/%E7%94%A8%E6%88%B7%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%86%85%E6%A0%B8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="区分意义"><a href="#区分意义" class="headerlink" title="区分意义"></a>区分意义</h2><p>内核模式和用户模式有时候也称为内核态和用户态，它们的区分意义在于限制不同的程序之间的访问能力, 防止他们获取别的程序的内存数据, 或者获取外围设备的数据。CPU将指令分为特权指令和非特权指令，对于那些危险的指令，只允许操作系统及其相关模块使用，普通的应用程序只能使用那些不会造成灾难的指令。</p>
<h2 id="权限级别"><a href="#权限级别" class="headerlink" title="权限级别"></a>权限级别</h2><p>以Intel的x86系列CPU举例，它提供了4种指令权限级别：<br><code>RING0</code>、<code>RING1</code>、<code>RING2</code>、<code>RING3</code>。<br><img src="https://store.machine-geek.cn/0004.png" alt="modes"></p>
<a id="more"></a>
<h2 id="内核模式"><a href="#内核模式" class="headerlink" title="内核模式"></a>内核模式</h2><p>在内核模式下，正在执行的代码具有对底层硬件的完整且不受限制的访问。它可以执行任何CPU指令并引用任何内存地址。内核模式通常保留给操作系统的最低级别，最受信任的功能。内核模式下的崩溃是灾难性的，它们将停止整个PC。</p>
<h2 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h2><p>在用户模式下，执行代码无法直接访问硬件或参考存储器。在用户态下运行的代码必须委托给系统API才能访问硬件或内存。由于这种隔离提供了保护，因此用户模式下的崩溃总是可以恢复的。计算机上运行的大多数代码都将在用户模式下执行。</p>
<h2 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h2><p>我们的代码大部分是运行在用户模式下，从用户模式切换到内核模式一般存在三种情况。</p>
<h3 id="切换情况"><a href="#切换情况" class="headerlink" title="切换情况"></a>切换情况</h3><table>
<thead>
<tr>
<th align="center">情况</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">系统调用</td>
<td align="center">当在系统中执行一个程序时，大部分时间是运行在用户态下的，在其需要操作系统帮助完成一些用户态自己没有特权和能力完成的操作时就会切换到内核态。</td>
</tr>
<tr>
<td align="center">异常事件</td>
<td align="center">当CPU正在执行运行在用户态的程序时，突然发生某些预先不可知的异常事件，这个时候就会触发从当前用户态执行的进程转向内核态执行相关的异常事件，典型的如缺页异常。</td>
</tr>
<tr>
<td align="center">外围设备中断</td>
<td align="center">当外围设备完成用户的请求操作后，会像CPU发出中断信号，此时，CPU就会暂停执行下一条即将要执行的指令，转而去执行中断信号对应的处理程序，如果先前执行的指令是在用户态下，则自然就发生从用户态到内核态的转换。（系统调用的本质其实也是中断，这种中断称为软中断，这是操作系统为用户特别开放的一种中断，从触发方式和效果上来看，这三种切换方式是完全一样的，都相当于是执行了一个中断响应的过程。但是从触发的对象来看，系统调用是进程主动请求切换的，而异常和硬中断则是被动的。）</td>
</tr>
</tbody></table>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>模式切换的消耗是昂贵的，我们的代码应该运行在哪种模式下依然没有确切的界限。例如显卡驱动程序是在内核模式下运行以实现最佳性能，还是在用户模式下运行以实现最大稳定性？我们今天已经拥有了足够强大的性能，不必过度关心这种切换过渡带来的消耗，如果我们追求极致的性能，则肯定会考虑这些情况。</p>
]]></content>
      <categories>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>Kernel Mode</tag>
        <tag>User Mode</tag>
      </tags>
  </entry>
  <entry>
    <title>Goroutine天生并发的原理</title>
    <url>/2020/01/13/Goroutine%E5%A4%A9%E7%94%9F%E5%B9%B6%E5%8F%91%E7%9A%84%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="Goroutine简介"><a href="#Goroutine简介" class="headerlink" title="Goroutine简介"></a>Goroutine简介</h2><p>Go语言的强大，主要在于Goroutine。Goroutine能够使函数或方法与其他函数或方法同时运行。Goroutine可以被认为是轻量级的线程。与线程相比，创建Goroutine的成本很小。因此，Go语言写的应用程序能够同时运行成千上万个Goroutine。<br>Goroutine是建立在线程之上的轻量级的抽象。它允许我们以非常低的代价在同一个地址空间中并行地执行多个函数或者方法。相比于线程，它的创建和销毁的代价要小很多，并且它的调度是独立于线程的。</p>
<a id="more"></a>
<h2 id="Goroutine的优势"><a href="#Goroutine的优势" class="headerlink" title="Goroutine的优势"></a>Goroutine的优势</h2><ul>
<li>更少的系统线程：在具有数千个Goroutine的程序中，可能只有一个线程。如果该线程块中的任何Goroutine说正在等待用户输入，则将创建另一个OS线程，并将其余的Goroutines移至新的OS线程。</li>
<li>更小的空间占用：Goroutines开销非常小。它们的堆栈大小只有几KB，并且堆栈可以根据应用程序的需要而增长和缩小，而对于线程，则必须指定堆栈大小并固定堆栈大小。</li>
<li>通道通信：Goroutine使用通道进行通信。通过设计通道，可以防止在使用Goroutines访问共享内存时发生争用情况。可以将通道视为与Goroutine进行通信的管道。</li>
</ul>
<h2 id="Goroutine原理"><a href="#Goroutine原理" class="headerlink" title="Goroutine原理"></a>Goroutine原理</h2><p>Groutine的强大并发能力是通过GPM调度模型和CSP并发模型实现的。</p>
<h3 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h3><p>任何并发模型，到了操作系统层面，一定是以线程的形态存在的。关于用户模式和内核模式请看我的另一篇文章。<br><img src="https://store.machine-geek.cn/0001.png" alt="User Mode Thread"><br>多个用户态的线程对应着一个内核线程，程序线程的创建、终止、切换或者同步等线程工作必须自身来完成。它可以做快速的上下文切换。缺点是不能有效利用多核CPU。<br><img src="https://store.machine-geek.cn/0023.png" alt="Kernel Mode Thread"><br>这种模型直接调用操作系统的内核线程，所有线程的创建、终止、切换、同步等操作，都由内核来完成。一个用户态的线程对应一个系统线程，它可以利用多核机制，但上下文切换需要消耗额外的资源。<br>这种模型是介于用户级线程模型和内核级线程模型之间的一种线程模型。这种模型的实现非常复杂，和内核级线程模型类似，一个进程中可以对应多个内核级线程，但是进程中的线程不和内核线程一一对应；这种线程模型会先创建多个内核级线程，然后用自身的用户级线程去对应创建的多个内核级线程，自身的用户级线程需要本身程序去调度，内核级的线程交给操作系统内核去调度。<br>M个用户线程对应N个系统线程，缺点增加了调度器的实现难度。</p>
<h3 id="GPM模型"><a href="#GPM模型" class="headerlink" title="GPM模型"></a>GPM模型</h3><ul>
<li>M：M代表内核级线程，一个M就是一个线程，goroutine就是跑在M之上的；M是一个很大的结构，里面维护小对象内存cache（mcache）、当前执行的goroutine、随机数发生器等等非常多的信息</li>
<li>G：代表一个Goroutine，它有自己的栈，instruction pointer和其他信息（正在等待的channel等等），用于调度。</li>
<li>P：P全称是Processor，处理器，它的主要用途就是用来执行goroutine的，所以它也维护了一个goroutine队列，里面存储了所有需要它来执行的goroutine</li>
<li>Sched：代表调度器，它维护有存储M和G的队列以及调度器的一些状态信息等。</li>
</ul>
<h3 id="调度实现"><a href="#调度实现" class="headerlink" title="调度实现"></a>调度实现</h3><p>每个内核级线程都拥有一个处理器P和一个正在运行的G，P的数量可以设置，它其实也代表了真正的并发度，既有多少个G可以同时运行。灰色的G并没有运行，处于ready状态，正在等待着调度，P维护着这个队列（Runqueue）。每次运行一个Goroutine就会在这个队列末尾增加一个G。<br>当一个M进入阻塞状态时，以上是M0，P转而运行M1，M1可能是正在被创建，或者从线程缓存中取出。<br>当M0停止阻塞，它需要一个P来运行G，通常，它会去其他的M里获取一个P，如果它没有获取到，它就会把G放进一个Global Runueue。然后进入睡眠状态（进入线程缓存），所有的P会周期性的检查Global Runueue并运行里面的G。<br>如果一个P的G很快就运行完了，且Global Runqueue里没有G，那么它就会从其他P里面获取G，一般是获取一半的Runqueue，以确保每个M都能充分的使用。</p>
<h3 id="并发模型"><a href="#并发模型" class="headerlink" title="并发模型"></a>并发模型</h3><p>Go语言采用CSP模型（Communicating Sequential Processes），这个模型的核心理念是：</p>
<blockquote>
<p>DO NOT COMMUNICATE BY SHARING MEMORY; INSTEAD, SHARE MEMORY BY COMMUNICATING.<br>不要以共享内存的方式来通信，相反，要通过通信来共享内存。</p>
</blockquote>
<p>传统的线程并发模型，就是像Java、C++、或者Python，他们线程间通信都是通过共享内存的方式来进行的。非常典型的方式就是，在访问共享数据（例如数组、Map、或者某个结构体或对象）的时候，通过锁来访问，因此，在很多时候，衍生出一种方便操作的数据结构，叫做“线程安全的数据结构”。  </p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>Go语言通过<code>Goroutine</code>和<code>channel</code>来实现CSP。<br>通信机制非常方便，<code>channel</code>类似于队列。<br><code>channel &lt;- data</code>进行传数据，<code>&lt;- channel</code>进行取数据。<br>不管是传还是取，都会进行阻塞，直到另外的<code>goroutine</code>传或者取为止。</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>Go语言也许就是未来。</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>Goroutine</tag>
        <tag>Concurrency</tag>
        <tag>Parallelism</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机革命</title>
    <url>/2020/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9D%A9%E5%91%BD/</url>
    <content><![CDATA[<p><img src="https://store.machine-geek.cn/0020.jpg" alt="软件架构"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章我会详细的讲解现在软件的架构演变历程，还有这些年由计算机的发展衍生出来的学科和行业。这对于理解为什么今天人们要构建如此庞大的”怪兽“非常有帮助，看一看这些东西的发生历史，前辈们在遇到这些挑战的时候是如何解决的。</p>
<h2 id="软件开发的架构"><a href="#软件开发的架构" class="headerlink" title="软件开发的架构"></a>软件开发的架构</h2><h3 id="Single-Machine-Architecture"><a href="#Single-Machine-Architecture" class="headerlink" title="Single Machine Architecture"></a>Single Machine Architecture</h3><p><strong>单机（Single machine）时代</strong>：这个年代是最早的年代，计算机并没有普及。这个时代还没有网络，计算机非常庞大、昂贵，很少有人能够用得起计算机。想要获得程序是非常困难的。</p>
<h3 id="Client-Server-Architecture"><a href="#Client-Server-Architecture" class="headerlink" title="Client/Server Architecture"></a>Client/Server Architecture</h3><p><strong>客户端/服务器（Client/Server）时代（也简称C/S）</strong>：互联网诞生，发展非常迅猛。人们能够通过网络传输数据。人们为了分享数据开发了服务器程序和客户端程序。服务器其实也只是一台计算机，只不过它运行了等待着你访问的程序，并且它不关机，只要计算机还在运行，程序也没有出错。你只需要下载客户端程序，就可以传输、获取远方服务器上的数据。服务器上专门存储数据的程序叫做数据库。</p>
<h3 id="Browser-Server-Architecture"><a href="#Browser-Server-Architecture" class="headerlink" title="Browser/Server Architecture"></a>Browser/Server Architecture</h3><p><strong>浏览器/服务器（Browser/Server）时代（简称B/S）</strong>：Web时代来临，越来越多的人倾向从C/S开发转向B/S的开发，因为无需安装客户端程序，也不必时刻更新客户端，浏览器打开访问即可。但并不意味着C/S的时代结束，很多功能还是需要C/S架构才能够完成。</p>
<a id="more"></a>
<h2 id="架构的革命"><a href="#架构的革命" class="headerlink" title="架构的革命"></a>架构的革命</h2><h3 id="Monolith-Architecture"><a href="#Monolith-Architecture" class="headerlink" title="Monolith Architecture"></a>Monolith Architecture</h3><p><strong>单体（Monolith）架构：</strong>这里指的是服务器程序，所有的业务逻辑，功能模块都打包到一起，编译成一个程序，运行在一台计算机上。</p>
<h4 id="初期"><a href="#初期" class="headerlink" title="初期"></a>初期</h4><p>All in one是对这个时代的总结，代码没有分层，全部打包在一起，一台服务器安装数据库，然后运行服务器程序，提供服务。</p>
<h4 id="中期"><a href="#中期" class="headerlink" title="中期"></a>中期</h4><p>软件稳定性太差，报错直接显示在页面上。随着访问人数的增加服务器开始不堪重负。人们开始分层开发，服务器程序开始MVC设计模式，提高了软件的稳定性和维护性。开始数据分离，把数据库单独的部署到了另外的服务器上。</p>
<h4 id="后期"><a href="#后期" class="headerlink" title="后期"></a>后期</h4><p>在前面的基础上，把服务器类别又进行了详细的划分。分了文件服务器、数据库服务器、应用服务器、缓存服务器等不同的服务器，并在程序与数据库中间加入了Cache，对于一些常用数据不用每次都去数据库里面查询了。服务性能有显著的提升。</p>
<h3 id="Cluster-Architecture"><a href="#Cluster-Architecture" class="headerlink" title="Cluster Architecture"></a>Cluster Architecture</h3><p><strong>集群（Cluster）架构：</strong>增加多台计算机，每台计算机上运行着相同的程序，通过负载均衡来分配任务。</p>
<h4 id="初期-1"><a href="#初期-1" class="headerlink" title="初期"></a>初期</h4><p>前面无论怎么改良，一旦想要升级程序、增加功能，都必须把程序终止，替换新的程序。服务器始终会因为各种可能性而中断服务。人们开始部署多台程序，通过负载均衡调度器来分配请求服务。单台服务器宕机过后其他的服务器依然能够提供服务。</p>
<h4 id="中期-1"><a href="#中期-1" class="headerlink" title="中期"></a>中期</h4><p>动静分离，把静态资源和动态资源进行了详细的划分，提升了静态资源文件的传输性能。数据库服务器进行了读写分离，分为了读服务器，写服务器。他们的数据都保持着一致，前面有着重重缓存减少数据库服务器的压力。一旦有新的数据写入写服务器，马上会同步到读服务器中。</p>
<h4 id="后期-1"><a href="#后期-1" class="headerlink" title="后期"></a>后期</h4><p>内容分发网络（Content Delivery Network），简称 CDN），其原理是将源内容同步到全国各边缘节点，配合精准的调度系统，将用户的请求分配至最适合他的服务器节点，使用户可以以最快的速度取得他所需的内容。配合反向代理，大大提高了水平。</p>
<h3 id="Distributed-Architecture"><a href="#Distributed-Architecture" class="headerlink" title="Distributed Architecture"></a>Distributed Architecture</h3><p><strong>分布式（Distributed）架构：</strong>把一个大型的系统拆分成了许多小的功能模块，分别部署在不同的计算机上。它们之间通过网络通信，传递数据，然后共同完成一个任务，组成了一个庞大的系统。</p>
<h4 id="初期-2"><a href="#初期-2" class="headerlink" title="初期"></a>初期</h4><p>集群加入解决了许多问题，但是互联网越来越火热，用户数量越来越多。只是增加服务器已经达到瓶颈了。单台存储已经非常庞大，一次读写的时间实在是太漫长了。人们开始使用分布式文件系统和分布式数据库系统来提高读写性能。它们每台都只保存了一部分的数据，这一部分数据在其他服务器上也有冗余备份，避免丢失。</p>
<h4 id="中期-2"><a href="#中期-2" class="headerlink" title="中期"></a>中期</h4><p>单个应用终究是太庞大了，部署麻烦并且有一些功能并不是那么多人使用，人们把服务器程序进行拆分，应用服务器上的程序不再是包含全部功能模块的程序，把一个整体的应用拆分成无数的小的功能模块，分别部署在不同的服务器上。用到的功能多一点的就增加部署了这个功能相应的服务器。</p>
<h4 id="后期-2"><a href="#后期-2" class="headerlink" title="后期"></a>后期</h4><p>加入了各种各样的消息中间件、虚拟化容器、流处理……技术，使得部署更加快速，伸缩更加灵活。</p>
<h3 id="ServerLess-Architecture"><a href="#ServerLess-Architecture" class="headerlink" title="ServerLess Architecture"></a>ServerLess Architecture</h3><p>无服务器计算（或简称无服务器）是一种执行模型，其实还是需要服务器，不用我们再来操心并发量，性能等等其他问题了，许多大公司，例如云提供商（AWS，Azure或Google Cloud）负责通过动态分配资源来执行一段代码。并且仅收取用于运行代码的资源量。</p>
<h2 id="行业的革命"><a href="#行业的革命" class="headerlink" title="行业的革命"></a>行业的革命</h2><h3 id="物联网"><a href="#物联网" class="headerlink" title="物联网"></a>物联网</h3><p>物联网是互联网的一个延伸，互联网的每一个连接点主要是电脑、平板、手机。物联网想延伸到更多的智能设备上，例如现在的智能家居、智能手环、智能音响……物联网其实本质还是互联网，物联网要做的事情是让所有物体都嵌入计算机，连接互联网，构建万物互联的世界。</p>
<h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><p>大数据的产生背景是由于服务器存储的数据实在是太庞大了，人们在升级架构和处理数据时，缺发现这些庞大的数据中隐藏着非常具有价值的信息，采集，分析这些数据就是大数据行业的主要工作了。我们每天在互联网上的浏览，聊天，发照片……全球那么多人，每时每刻都在产生着可怕的数据量。什么样类型的数据都有，科技公司通过分析和计算这些数据，可以总结出非常多具有价值的信息，广泛应用于科学研究、商业、医学……等。科技公司通过大数据可以预测的人类社会、各行各业的未来趋势。</p>
<h3 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h3><p>云计算这个概念刚刚出来的时候，几乎所有的人都以为是大规模的复杂问题计算。不少大公司耗尽心血制造出了满足大规模计算的“怪兽”，但是发现运用真的比较少，原因是计算一次成本实在太昂贵，况且有这样需求的都是科研机构或者大公司。他们大多数都已经具备这种能力了，直到AWS的出现才告诉了大家什么是云计算。云计算就是计算服务的提供（包括服务器、存储、数据库、网络、软件、分析……）。通过 Internet（云）提供快速创新、弹性资源和规模经济。现在许多科技公司提供云服务，以前我们还需要自己买服务器，维护，保证它一直正常使用。现在直接在商城购买即可，例如服务器，买了过后直接远程操控，上传、运行自己的程序。再也不需要你自己跑去机房检查。供电，宕机这些都不再需要你考虑了，又服务商统一管理维护。对于云服务，通常你只需使用多少支付多少，从而帮助降低运营成本，使基础设施更有效地运行，并能根据业务需求的变化调整对服务的使用。</p>
<h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><p>区块链从本质上来说它是一个共享数据库，现在我们所有的数据都是存储在由程序提供商的数据库服务器上的，如果数据库数据丢失，或者遭到恶意攻击、管理员胡乱修改怎么办。区块链想做的事情就是去中心化，把数据交给所有人共同维护。存储于区块链的数据或信息，具有“不可伪造”、“全程留痕”、“可以追溯”、“公开透明”、“集体维护”等特征。比特币也是基于区块链开发的。简单来说，区块链就是一个分布式的账本，每个节点都可以显示总账，然后维护总账，而且不能篡改账本。</p>
<h3 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h3><p>人工智能是一个模仿人类与人类思维相关的“认知”功能的机器，但它并不真的具有智慧，它依然还只是一个程序，只会01010101。以前的人工智能都是以针对某个特殊问题的算法，还有大量工程师提前写好的的逻辑判断来完成的。现在已经发展出很多新的概念。有了许多实现的分支。当下是以人工神经网络为主流，理念是基于生物学为基础，模仿人脑大脑的神经元来计算。把数据输入多层的神经网络，每一个连接都有权重，把输入数据结合权重计算出预测结果。基本理念例如我想通过神经网络来预测我今天会不会写代码，那么影响我是否决定去写代码的事情有：明天是否上课、我困不困、我心情好不好……，把所有影响我的事情都作为输入，它们都有一个权重，然后结合每一个节点的权重进行计算，得出一个数值。再通过一个预先设定的阈值，判断我写代码的可能性。假如我其中某一个输入权重很高，我学到一门非常厉害的技术，我迫不及待想要试一下，非常亢奋！其他的权重低的影响就会小很多了。那么最后的预测结果我写代码的可能性就会大大提高。人工神经网络的实现需要大量的数据来训练，不断的试错，调整权重得到最佳的预测模型。所以人工智能的前提就是大数据。</p>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>时代在进步，架构和新技术随着人类的进步依然还在发展，保持学习。</p>
]]></content>
      <categories>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>Distributed</tag>
        <tag>Architecture</tag>
        <tag>Internet</tag>
        <tag>Software</tag>
        <tag>Client/Server</tag>
        <tag>Browser/Server</tag>
        <tag>Monolith</tag>
        <tag>Cluster</tag>
      </tags>
  </entry>
  <entry>
    <title>前端的人脸识别</title>
    <url>/2020/01/02/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>前端的人脸识别框架是真的非常少的，国外有一个团队就做好了这样的一个基于JavaScript的神经网络，只需要正常引入JS，加载模型。就可以直接在浏览器中实现人脸识别功能，非常方便。我们知道训练这样的模型是需要耗大量的时间和精力的。但是他们把它开源了，感受开源社区的力量。</p>
<p>Github：<a href="https://github.com/justadudewhohacks/face-api.js">Face-Api.js</a></p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>下载Github中的models里的神经网络模型和face-api.min.js框架。</p>
<a id="more"></a>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul>
<li>face-detect.html</li>
<li>js<ul>
<li>face-api.min.js</li>
<li>face-detect.js</li>
</ul>
</li>
<li>models<ul>
<li>face_landmark_68_model-weights_manifest.json</li>
<li>face_landmark_68_tiny_model-shard1</li>
<li>…（多个文件）</li>
</ul>
</li>
</ul>
<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p><code>face-detect.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>MachineGeek<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;js/face-api.min.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;js/face-detect.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">			body&#123;</span><br><span class="line">				margin: 0;</span><br><span class="line">				padding: 0;</span><br><span class="line">				width: 100vw;</span><br><span class="line">				height: 100vh;</span><br><span class="line">				display: flex;</span><br><span class="line">				justify-content: center;</span><br><span class="line">				align-items: center;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			canvas&#123;</span><br><span class="line">				position: absolute;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">width</span>=<span class="string">&quot;720&quot;</span> <span class="attr">height</span>=<span class="string">&quot;560&quot;</span> <span class="attr">autoplay</span> <span class="attr">muted</span>=&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>face-detect.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> video = <span class="built_in">document</span>.getElementById(<span class="string">&quot;video&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">	faceapi.nets.tinyFaceDetector.loadFromUri(<span class="string">&quot;/models&quot;</span>),</span><br><span class="line">	faceapi.nets.faceLandmark68Net.loadFromUri(<span class="string">&quot;/models&quot;</span>),</span><br><span class="line">	faceapi.nets.faceRecognitionNet.loadFromUri(<span class="string">&quot;/models&quot;</span>),</span><br><span class="line">	faceapi.nets.faceExpressionNet.loadFromUri(<span class="string">&quot;/models&quot;</span>),</span><br><span class="line">]).then(startViedo)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startViedo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	navigator.getUserMedia(&#123;</span><br><span class="line">			video: <span class="literal">true</span></span><br><span class="line">		&#125;,</span><br><span class="line">		stream =&gt; video.srcObject = stream,</span><br><span class="line">		err =&gt; <span class="built_in">console</span>.error(err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">video.addEventListener(<span class="string">&#x27;play&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> canvas = faceapi.createCanvasFromMedia(video)</span><br><span class="line">	<span class="built_in">document</span>.body.append(canvas)</span><br><span class="line">	<span class="keyword">const</span> displaySize = &#123;<span class="attr">width</span>:video.width,<span class="attr">height</span>: video.height&#125;</span><br><span class="line">	faceapi.matchDimensions(canvas,displaySize)</span><br><span class="line">	<span class="built_in">setInterval</span>(<span class="keyword">async</span>()=&gt;&#123;</span><br><span class="line">		<span class="keyword">const</span> detections = <span class="keyword">await</span> faceapi.detectAllFaces(video,</span><br><span class="line">		<span class="keyword">new</span> faceapi.TinyFaceDetectorOptions()).withFaceLandmarks()</span><br><span class="line">		.withFaceExpressions()</span><br><span class="line">		<span class="keyword">const</span> resizedDetections = faceapi.resizeResults(detections,displaySize)</span><br><span class="line">		canvas.getContext(<span class="string">&#x27;2d&#x27;</span>).clearRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height)</span><br><span class="line">		faceapi.draw.drawDetections(canvas,resizedDetections)</span><br><span class="line">		faceapi.draw.drawFaceLandmarks(canvas,resizedDetections)</span><br><span class="line">		faceapi.draw.drawFaceExpressions(canvas,resizedDetections)</span><br><span class="line">	&#125;,<span class="number">100</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>凌晨1点在寝室用的电脑摄像头。<br><img src="https://store.machine-geek.cn/0015.gif" alt="动态图"></p>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p><strong>我有头发</strong></p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Face Recognition</tag>
        <tag>Javascript</tag>
        <tag>FrontEnd</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>面向切面AOP</title>
    <url>/2020/01/01/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2AOP/</url>
    <content><![CDATA[<h2 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h2><p>面向切面编程（AOP）是一种编程范式，并不是特定某一种技术，也没有指定的实现方法。核心思想在于通过在不修改代码本身的情况下向现有代码添加其他行为来完成想要的功能，通过“ 切入点 ”规范分别指定要修改的代码。  不修改现有代码，对原有代码毫无入侵性。</p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p><img src="https://store.machine-geek.cn/0029.png" alt="proxy"><br>在学习AOP之前，我认为对设计模式中的代理模式有一定的了解有助于理解AOP。</p>
<a id="more"></a>
<p><code>ITask.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITask</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">coding</span><span class="params">()</span></span>; <span class="comment">//编写代码接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Programmer.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> <span class="keyword">implements</span> <span class="title">ITask</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Programmer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">coding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;正在写代码...&quot;</span>);  <span class="comment">//实现接口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Manager.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">implements</span> <span class="title">ITask</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Programmer programmer;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">coding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(programmer==<span class="keyword">null</span>)&#123;</span><br><span class="line">            programmer = <span class="keyword">new</span> Programmer(<span class="string">&quot;MachineGeek&quot;</span>); <span class="comment">//代理Programmer类</span></span><br><span class="line">        &#125;</span><br><span class="line">        programmer.coding();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Main.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ITask programmer = <span class="keyword">new</span> Manager();</span><br><span class="line">        programmer.coding();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AOP与代理模式"><a href="#AOP与代理模式" class="headerlink" title="AOP与代理模式"></a>AOP与代理模式</h2><p>上面的代理模式术语静态代理模式，还有一种代理模式叫做动态代理，既在实现阶段不关心代理目标，而是在运行阶段通过反射动态的代理目标对象。在特定的业务逻辑方法执行的前、后、异常、返回内容……等加入其他功能，这既是AOP面向切面编程的核心。</p>
<h2 id="AOP应用场景"><a href="#AOP应用场景" class="headerlink" title="AOP应用场景"></a>AOP应用场景</h2><ul>
<li>性能统计</li>
<li>事务处理</li>
<li>缓存处理</li>
<li>协议转换</li>
<li>日志打印</li>
<li>权限验证</li>
<li>异常处理</li>
<li>……</li>
</ul>
<h2 id="AOP专业术语"><a href="#AOP专业术语" class="headerlink" title="AOP专业术语"></a>AOP专业术语</h2><table>
<thead>
<tr>
<th align="center">专业术语</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">切面（Aspect）</td>
<td align="center">就是交叉在各个业务逻辑中的系统服务，类似于安全验证、事务处理、日志记录都可以看作切面。</td>
</tr>
<tr>
<td align="center">织入(weaving)</td>
<td align="center">将切面代码插入到目标对象某个方法的过程。</td>
</tr>
<tr>
<td align="center">连接点（JointPoint）</td>
<td align="center">理论上可能被切面织入的所有方法，通常所有方法都可以被称为连接点。</td>
</tr>
<tr>
<td align="center">切入点（PointCut）</td>
<td align="center">就是实际上被切面织入的方法。</td>
</tr>
<tr>
<td align="center">目标对象（target）</td>
<td align="center">就是切入点和连接点所属的类。</td>
</tr>
<tr>
<td align="center">通知/增强（Advice）</td>
<td align="center">就是切面的实现，切面织入的目标对象，时间点(方法执行前、后、前后、异常)以及返回内容。</td>
</tr>
<tr>
<td align="center">引介（Introduction）</td>
<td align="center">引介是一种特殊的增强，它为类添加一些属性和方法。这样，即使一个业务类原本没有实现某个接口，通过AOP的引介功能，我们可以动态地为该业务类添加接口的实现逻辑，让业务类成为这个接口的实现类。</td>
</tr>
<tr>
<td align="center">顾问（Advisor）</td>
<td align="center">其实就是通知的一个封装和延伸,可以将通知以更为复杂的方式织入到某些方法中。</td>
</tr>
<tr>
<td align="center">代理（Proxy）</td>
<td align="center">一个类被AOP织入增强后，就产出了一个结果类，它是融合了原类和增强逻辑的代理类。根据不同的代理方式，代理类既可能是和原类具有相同接口的类，也可能就是原类的子类，所以我们可以采用调用原类相同的方式调用代理类。</td>
</tr>
</tbody></table>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>AOP是一种范式，在许多场景中可以考虑使用AOP，使得代码有更好的可读性和易于维护，利用更少的代码完成更多的功能。很多语言都具有强大的AOP框架，这里不举例说明。</p>
]]></content>
      <categories>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>AOP</tag>
        <tag>Aspect-Oriented Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM运行原理之运行时数据区</title>
    <url>/2018/12/15/JVM%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</url>
    <content><![CDATA[<blockquote>
<p>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。<br>Java语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。这就是Java的能够“一次编译，到处运行”的原因。</p>
</blockquote>
<a id="more"></a>
<p>今天来为大家一步一步解析JVM的运行原理，在我们编译源代码.java文件时，Java编译器会生成具有相同文件名的.class文件（包含字节码）。当我们运行.class文件时，这些.class文件会进入各个步骤，这些步骤描述了整个JVM的工作内容,网上已经有详细的图解：<br><img src="https://store.machine-geek.cn/0002.png"></p>
<h2 id="运行时数据区-Runtime-Data-Area"><a href="#运行时数据区-Runtime-Data-Area" class="headerlink" title="运行时数据区(Runtime Data Area)"></a><strong>运行时数据区(Runtime Data Area)</strong></h2><p>运行时数据区主要分为五个内容：</p>
<blockquote>
<ol>
<li>方法区域</li>
<li>堆区域</li>
<li>堆栈区域</li>
<li>PC寄存器</li>
<li>本地方法堆栈区域</li>
</ol>
</blockquote>
<h2 id="方法区域"><a href="#方法区域" class="headerlink" title="方法区域"></a>方法区域</h2><blockquote>
<p><strong>所有类级别数据都将存储在此处，包括静态变量。每个JVM只有一个方法区域，它是一个共享资源。</strong><br>通常，方法区域是堆区域的逻辑部分。但这需要由JVM实施者来决定。  方法区域具有每个类的结构和字段。只有静态的场和结构。它还包括方法数据，方法和构造函数代码，运行时常量池。方法区域在JVM启动时创建，并在所有线程之间共享。如果在运行时分配的内存区域不足，JVM将抛出OutOfMemoryError。<br>对于JVM的方法区，可能听得最多的是另外一个说法——<strong>永久代（Permanent Generation）</strong>，呼应堆的新生代和老年代。方法区和堆的划分是JVM规范的定义，而不同虚拟机有不同实现，对于Hotspot虚拟机来说，将方法区纳入GC管理范围，这样就不必单独管理方法区的内存，所以就有了”永久代“这么一说。方法区和操作系统进程的正文段（Text Segment）的作用非常类似，它存储的是已被虚拟机加载的类信息、常量（从JDK1.7开始已经移至堆内存中）、静态变量等数据。现设置JVM参数为”-XX:MaxPermSize=20M”（方法区最大内存为20M）。<br><strong>永久代从JDK1.8中已经被废弃，移除永久代是为融合HotSpot JVM与 JRockit VM而做出的努力，因为JRockit没有永久代，不需要配置永久代。由于永久代内存经常不够用或发生内存泄露，抛出异常java.lang.OutOfMemoryError: PermGen</strong><br>元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制，但可以通过以下参数来指定元空间的大小：<br>　　-XX:MetaspaceSize，初始空间大小，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize时，适当提高该值。<br>　　-XX:MaxMetaspaceSize，最大空间，默认是没有限制的。<br>　　除了上面两个指定大小的选项以外，还有两个与 GC 相关的属性：<br>　　-XX:MinMetaspaceFreeRatio，在GC之后，最小的Metaspace剩余空间容量的百分比，减少为分配空间所导致的垃圾收集<br>　　-XX:MaxMetaspaceFreeRatio，在GC之后，最大的Metaspace剩余空间容量的百分比，减少为释放空间所导致的垃圾收集 </p>
</blockquote>
<h2 id="堆区域"><a href="#堆区域" class="headerlink" title="堆区域"></a>堆区域</h2><blockquote>
<p><strong>所有对象及其对应的实例变量和数组将存储在此处。每个JVM只有一个堆区域。由于Method和Heap区域共享多个线程的内存，因此存储的数据不是线程安全的。</strong><br>堆数据区用于存储类和数组的对象。堆内存很常见，可以跨多个线程共享。这是垃圾收集器出现的地方。如年轻的Gen，PermGen。在VM启动时创建堆数据区域。通过垃圾收集器（GC）自动完成对内存的声明。这是Java的最佳功能之一。如果在运行时分配的内存不足，JVM可能会抛出OutOfMemoryError。</p>
</blockquote>
<h2 id="堆栈区域"><a href="#堆栈区域" class="headerlink" title="堆栈区域"></a>堆栈区域</h2><blockquote>
<p><strong>对于每个线程，将创建单独的运行时堆栈。对于每个方法调用，将在堆栈存储器中创建一个条目，称为堆栈帧。将在堆栈内存中创建所有局部变量。堆栈区域是线程安全的，因为它不是共享资源。堆栈框架分为三个子实体：</strong><br>在堆栈帧中包括<strong>局部变量表(Local Variables)**、</strong>操作数栈(Operand Stack)<strong>、指向当前方法所属的类的运行时常量池的</strong>引用(Reference to runtime constant pool)<strong>、</strong>方法返回地址(Return Address)<strong>和一些额外的附加信息。当线程执行一个方法时，就会随之创建一个对应的栈帧，并将建立的栈帧压栈。当方法执行完毕之后，便会将栈帧出栈。因此可知，线程当前执行的方法所对应的栈帧必定位于Java栈的顶部。讲到这里，大家就应该会明白为什么 在 使用 递归方法的时候容易导致栈内存溢出的现象了以及为什么栈区的空间不用程序员去管理了（当然在Java中，程序员基本不用关系到内存分配和释放的事情，因为Java有自己的垃圾回收机制），这部分空间的分配和释放都是由系统自动实施的。对于所有的程序设计语言来说，栈这部分空间对程序员来说是不透明的。<br>**1. 局部变量数组</strong>-与方法有关，涉及多少局部变量，相应的值将存储在此处。<br><strong>2. 操作数堆栈</strong>-如果需要执行任何中间操作，则操作数堆栈充当运行时工作空间以执行操作。<br><strong>3. 帧数据</strong>-对应于该方法的所有符号都存储在此处。在任何异常的情况下，捕获块信息将保留在帧数据中。</p>
</blockquote>
<h2 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h2><blockquote>
<p><strong>每个线程都有独立的PC寄存器，用来保存当前正在执行的指令的地址，一旦指令被执行，PC寄存器将被下一条指令更新。</strong><br>在一般的计算机架构术语中，程序计数器(PC)寄存器随时记录执行的当前指令。这就像一个指向程序中指令序列的当前指令的指针。Java JVM术语也是如此。我们有多线程架构，因为Java支持多线程，所以每次创建一个新线程时都会创建一个程序计数器(PC)寄存器。PC保持一个指向当前正在其线程中执行的语句的指针。如果当前执行的方法是“本机”，那么程序计数器寄存器的值将不被定义。</p>
</blockquote>
<h2 id="本地方法堆栈区域"><a href="#本地方法堆栈区域" class="headerlink" title="本地方法堆栈区域"></a>本地方法堆栈区域</h2><blockquote>
<p><strong>本机方法堆栈保存本机方法信息。对于每个线程，都将创建一个独立的本机方法堆栈。</strong><br>支持本机方法的JVM将具有本机方法堆栈。它用于本机方法，并按线程创建。如果JVM无法加载本机方法，则它不需要本机方法堆栈。内存大小的管理类似于固定或动态的一般JVM堆栈。JVM将相应地抛出StackOverflowError或OutOfMemoryError。</p>
</blockquote>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>Java Virtual Machine</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM运行原理之类加载器子系统</title>
    <url>/2018/12/12/JVM%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。<br>Java语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。这就是Java的能够“一次编译，到处运行”的原因。</p>
</blockquote>
<a id="more"></a>
<p>今天来为大家一步一步解析JVM的运行原理，在我们编译源代码.java文件时，Java编译器会生成具有相同文件名的.class文件（包含字节码）。当我们运行.class文件时，这些.class文件会进入各个步骤，这些步骤描述了整个JVM的工作内容,网上已经有详细的图解：<br><img src="https://store.machine-geek.cn/0002.png"></p>
<h2 id="类加载器子系统-Class-Loader-Subsystem"><a href="#类加载器子系统-Class-Loader-Subsystem" class="headerlink" title="类加载器子系统(Class Loader Subsystem)"></a><strong>类加载器子系统(Class Loader Subsystem)</strong></h2><p>.class文件都由类加载子系统加载，它主要负责了3个工作：</p>
<blockquote>
<ol>
<li>加载</li>
<li>连接</li>
<li>初始化</li>
</ol>
</blockquote>
<h2 id="第一小节：加载"><a href="#第一小节：加载" class="headerlink" title="第一小节：加载"></a>第一小节：加载</h2><p>加载意味着该组件会从硬盘系统中把.class文件读取到JVM内存中，并在方法区域中存储该相应的二进制数据。例如：</p>
<blockquote>
<ol>
<li>完全限定的类名称</li>
<li>直接父类的完全限定名称</li>
<li>方法信息</li>
<li>变量信息</li>
<li>构造函数信息</li>
<li>修饰符信息</li>
<li>常量池信息</li>
<li>.class文件是类、接口还是枚举。</li>
</ol>
</blockquote>
<p>对于每个加载的.class文件，JVM会立即在堆内存中创建一个java.lang.Class类型的对象。<br>我们可以用Class类来获取类的如级别信息，方法信息，构造函数，变量等。</p>
<blockquote>
<p>在JVM中将在堆内存中创建多少个对象？<br>对于每个加载的类型，即使我们在程序中多次使用类，也只会创建一个对象。</p>
</blockquote>
<p>加载器的类型有三种：</p>
<blockquote>
<ol>
<li><strong>Bootstrap Class Loader(引导类加载器)</strong> - 这个类加载器负责加载包中存在的内部核心Java类rt.jar和其他类java.lang.*。默认情况下，每个JVM都可以使用它，并使用本机C/C++语言编写。这个类加载器没有父类，如果开发人员调用String.class.getClassLoader()它，它将返回null，任何基于它的代码都会抛出NullPointerExceptionJava。</li>
<li><strong>Extensions Class Loader（扩展类加载器）</strong> - 这个类加载器是Primordial类加载器的子类，负责从扩展类路径（即jdk\jre\lib\ext）加载类。它是用Java语言编写的，相应的.class文件是sun.misc.Launcher$ExtClassLoder.class。</li>
<li><strong>System Class Loader（系统类加载器）</strong> - 此类加载器是Extension类加载器的子类，负责从系统类路径加载类。它在内部使用’ CLASSPATH’环境变量，并用Java语言编写。JVM中的系统类加载器是由sun.misc.Launcher$AppClassLoader.class<br>实现的。</li>
</ol>
</blockquote>
<h2 id="第二小节：链接"><a href="#第二小节：链接" class="headerlink" title="第二小节：链接"></a>第二小节：链接</h2><p>此组件执行类或接口的链接。由于此组件涉及新数据结构的分配，因此可能会抛出OutOfMemoryError。<br>它主要执行以下三项重要活动：</p>
<blockquote>
<ol>
<li>验证</li>
<li>准备</li>
<li>解析</li>
</ol>
<p><strong>1.验证：</strong><br>在验证的过程中会检查以下几点：</p>
</blockquote>
<ul>
<li>它是一个确保类的二进制表示在结构上是否正确的过程。</li>
<li>JVM将检查.class文件是否由有效的编译器生成。</li>
<li>.class文件的格式是否正确。</li>
<li>内部字节码验证器负责此活动。</li>
<li>字节码验证器是类装入器子系统的一部分。</li>
<li>如果类或接口的二进制表示不满足静态或结构约束，则抛出VerifyError。抛出的错误是LinkageError(或它的子类)的实例。</li>
</ul>
<blockquote>
<p>为什么Java是安全的语言？<br>就是因为字节码验证器的存在，字节码验证器是使java成为安全语言的特性之一。如果攻击者手动更改类文件以创建某种病毒，字节码验证器将检测到该类文件，因为它不是由有效编译器生成的。Verfication失败，我们会得到运行时异常说java.lang.VerifyError。</p>
</blockquote>
<p><strong>2.准备：</strong><br>在此阶段，JVM将为类级或接口级静态变量分配内存并分配默认值。<br>在初始化阶段，将原始值分配给静态变量，在准备阶段，只分配默认值。<br><strong>3.解析：</strong><br>解析是通过运行时常量池中的符号引用动态确定具体值的过程。简单地说，就是用方法区域的原始内存引用替换程序中的符号名的过程。</p>
<p>举个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testing</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span> </span>&#123;</span><br><span class="line">        String s = <span class="keyword">new</span> String(<span class="string">&quot;MachineGeek&quot;</span>);</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的类，由类加载器加载：</p>
<blockquote>
<ol>
<li>Testing.class</li>
<li>Object.class（Testing.class的父类）</li>
<li>String.class</li>
<li>Student.class</li>
</ol>
</blockquote>
<p>解析内容如下：</p>
<blockquote>
<ul>
<li>这些类的名称存储在Testing类的常量池中。</li>
<li>在解析阶段，这些名称将替换为方法区域中的原始内存级别引用。</li>
<li>所有符号引用（现在以运行时常量池的形式加载到方法区域中）将解析为此JVM加载的实际类型。</li>
<li>如果可以解析符号引用，但导致定义冲突，会抛出一个IncompatibleClassChangeError。</li>
<li>如果方法查找失败，方法解析会抛出一个NoSuchMethodError。</li>
<li>如果方法查找成功并且方法是Abstract但Class不是Abstract则方法解析会抛出AbstractMethodError等等。</li>
<li>所有上述错误都是类的子java.lang.LinkageError类。</li>
</ul>
</blockquote>
<h2 id="第三小节：初始化"><a href="#第三小节：初始化" class="headerlink" title="第三小节：初始化"></a>第三小节：初始化</h2><p>在初始化阶段，所有静态变量都分配有原始值，静态块将从父级到子级以及从上到下执行。此过程需要仔细同步，因为JVM是多线程的，并且某些线程可能会尝试同时初始化相同的类或接口。<br>在加载，链接和初始化时，如果发生任何错误，我们将获得运行时异常说明java.lang.LinkageError 或其子类  java.lang.VerifyError。</p>
<h2 id="ClassLoader如何在Java中工作"><a href="#ClassLoader如何在Java中工作" class="headerlink" title="ClassLoader如何在Java中工作"></a><strong>ClassLoader如何在Java中工作</strong></h2><p>Java中的类加载器有三个原则，即委托，可见性和唯一性。<br>委托：</p>
<blockquote>
<ul>
<li>当虚拟机遇到某个类，JVM就会检查是否.class加载了指定的文件</li>
<li>如果.class文件已经加载到方法区域中，那么JVM将考虑该类。如果没有，JVM请求类加载器子系统加载该特定类</li>
<li>类加载器子系统将请求传递给Application Class Loader，后者又将此请求委托给Extensions Class Loader。Extensions Class Loader将再次将此请求委托给Primordial Class Loader</li>
<li>Primordial Class Loader将在引导类路径（即jdk\jre\lib\rt.jar）中搜索此类。如果找到，则加载相应的.class文件</li>
<li>如果没有，Primordial Class Loader会将请求委托给Extensions Class Loader。这将在jdk\jre\lib\ext路径中搜索类。如果找到，则加载相应的.class文件</li>
<li>如果没有，Extensions Class Loader会将请求委托给Application Class Loader，并将在应用程序的类路径中搜索该类。如果找到，则加载它，否则开发人员将在运行时获得ClassNotFoundException。</li>
</ul>
</blockquote>
<p>可见性：</p>
<blockquote>
<p>Application Class Loader具有查看父类加载器加载的类的可见性，但反之亦然，即如果类由Application Class Loader加载，稍后再次尝试使用Extensions Class Loader显式加载相同的类，将ClassNotFoundException在运行时抛出。例如：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印这个类的加载器</span></span><br><span class="line">System.out.println(<span class="string">&quot;Test.getClass().getClassLoader()?= &quot;</span> + Test.class.getClassLoader());</span><br><span class="line"><span class="comment">// 尝试再次显式地使用该类加载器的父类加载这个类。</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.jcg.classloading.test.Test&quot;</span>, <span class="keyword">true</span>,  Test.class.getClassLoader().getParent());</span><br></pre></td></tr></table></figure>

<p>唯一性：</p>
<blockquote>
<p>父类加载器加载的类不应再由子类加载器重新加载</p>
</blockquote>
<hr>
<h2 id="如何在Java代码中加载类？"><a href="#如何在Java代码中加载类？" class="headerlink" title="如何在Java代码中加载类？"></a><strong>如何在Java代码中加载类？</strong></h2><p>类加载器是分层的。应用程序中的第一个类是在静态main()方法的帮助下专门加载的。所有后续类都由Static或Dynamic类加载技术加载。</p>
<blockquote>
<ul>
<li><strong>静态加载：</strong>在此技术中，类通过new运算符静态加载</li>
<li><strong>动态加载：</strong>在此技术中，使用Class.forName()或loadClass()方法以编程方式加载类。两者之间的区别在于前者在加载后初始化对象，而后者只加载类但不初始化对象。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>Java Virtual Machine</tag>
      </tags>
  </entry>
  <entry>
    <title>简明数据库设计</title>
    <url>/2018/12/05/%E7%AE%80%E6%98%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="什么是数据库设计？"><a href="#什么是数据库设计？" class="headerlink" title="什么是数据库设计？"></a>什么是数据库设计？</h2><blockquote>
<p>数据库设计(Database Design)就是根据业务系统的具体需求，结合我们所选用的DBMS（Database Management System），为这个业务系统构造出最优的数据存储模型。并建立好数据库中的表结构及表与表之间的关联关系的过程。使之能有效的对应用程序中的数据进行存储，并可以高效的对已经存储的数据进行访问。</p>
</blockquote>
<h2 id="优秀的数据库设计"><a href="#优秀的数据库设计" class="headerlink" title="优秀的数据库设计"></a>优秀的数据库设计</h2><blockquote>
<ul>
<li>减少数据冗余</li>
<li>避免数据维护异常</li>
<li>节约存储空间</li>
<li>高效的访问</li>
</ul>
</blockquote>
<h2 id="糟糕的数据库设计"><a href="#糟糕的数据库设计" class="headerlink" title="糟糕的数据库设计"></a>糟糕的数据库设计</h2><blockquote>
<ul>
<li>存在大量的数据冗余</li>
<li>存在数据插入、更新、删除异常</li>
<li>浪费大量的存储空间</li>
<li>访问数据低效</li>
</ul>
</blockquote>
<h2 id="数据库设计的步骤"><a href="#数据库设计的步骤" class="headerlink" title="数据库设计的步骤"></a>数据库设计的步骤</h2><blockquote>
<ol>
<li>需求分析</li>
<li>逻辑设计</li>
<li>物理设计</li>
<li>维护优化<br>以上步骤是非常重要的，很多项目刚刚开始的时候数据库设计是比较完美的，但是后来随着业务的不断增加，表结构越来越复杂，很多的步骤就忽略不计了，导致数据维护越来越困难，下面让我们来开始一步一步的讲解设计步骤。</li>
</ol>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="第一步：需求分析"><a href="#第一步：需求分析" class="headerlink" title="第一步：需求分析"></a>第一步：需求分析</h2><p>需求分析这一步是非常重要的，很多人往往会忽略这一点，例如：我们的数据库中存储的数据有些具有时效性，而有些并不具有时效性，对于一些具有时效性的数据，我们可以采取过期清理，或者归档的方式来进行存储。还有一些数据增长很快，数据量也很大，但是这些数据并不是我们的核心数据，对这些数据我们也可以采取分表，分库的方式进行存储。</p>
<blockquote>
<ol>
<li>了解系统中所要存储的数据</li>
<li>了解数据的存储特点</li>
<li>了解数据的声明周期</li>
</ol>
</blockquote>
<p><strong>要搞清楚的问题：</strong></p>
<blockquote>
<p>我们要搞清楚在数据库中存储的对象有些什么，这些对象可以称之为实体。有时候大家会觉得困惑，实体跟数据库表之间的关系究竟是什么？实际上，有时候一个实体对应数据库中的一张表，也有时候一个实体也会对应数据库中的多张表，同样，一张表也可以对应多个实体。所以，实体和数据库表之间的关系，并不是一一对应的。</p>
</blockquote>
<p><strong>需求分析内容：</strong></p>
<blockquote>
<ol>
<li>实体与实体之间的关系（1-to-1，1-to-N，N-to-M）</li>
<li>实体的属性有什么？</li>
<li>实体的哪些属性可以唯一标识一个实体</li>
<li>实体的增长量</li>
<li>实体的存储特性</li>
</ol>
</blockquote>
<p><strong>举例：用户模块</strong></p>
<blockquote>
<ul>
<li><strong>实体作用：</strong>用于记录注册用户信息</li>
<li><strong>包括属性：</strong>用户账号、用户密码、用户电话号码、用户邮箱、用户身份证号码、用户地址、用户姓名、用户昵称……</li>
<li><strong>可选的唯一标识属性：</strong>用户账号、用户身份证号码、用户电话号码</li>
<li><strong>增长量：</strong>随着系统上线时间增加</li>
<li><strong>存储特性：</strong>永久存储</li>
</ul>
</blockquote>
<p><strong>举例：商品模块</strong></p>
<blockquote>
<ul>
<li><strong>实体作用：</strong>用于记录网站中销售的商品信息</li>
<li><strong>包括属性：</strong>商品编码、商品名称、商品描述、商品品类、供应商名称、商品重量、商品有效期、商品价格……</li>
<li><strong>可选的唯一标识属性：</strong>商品编码、（商品名称、供应商名称）</li>
<li><strong>增长量：</strong>随着系统上线时间增加</li>
<li><strong>存储特性：</strong>对于下线商品可以归档存储</li>
</ul>
</blockquote>
<p><strong>举例：订单模块</strong></p>
<blockquote>
<ul>
<li><strong>实体作用：</strong>用于用户订购商品的信息</li>
<li><strong>包括属性：</strong>订单编号、用户姓名、用户电话、用户地址、商品编号、商品名称、商品数量、商品价格、订单状态、支付状态、订单类型……</li>
<li><strong>可选的唯一标识属性：</strong>订单编号</li>
<li><strong>增长量：</strong>随着系统上线时间增加</li>
<li><strong>存储特性：</strong>永久存储（分表、分库）</li>
</ul>
</blockquote>
<p><strong>举例：购物车模块</strong></p>
<blockquote>
<ul>
<li><strong>实体作用：</strong>用于保存用户购物时暂存的商品</li>
<li><strong>包括属性：</strong>用户账号、商品编号、商品名称、商品价格、商品描述、商品品类、加入时间、商品数量……</li>
<li><strong>可选的唯一标识属性：</strong>购物车编号</li>
<li><strong>增长量：</strong>随着系统上线时间增加</li>
<li><strong>存储特性：</strong>不用永久存储（设置归档，清理规则）</li>
</ul>
</blockquote>
<p>……<br><strong>分析它们之间的“关系”：</strong></p>
<blockquote>
<ul>
<li><strong>用户与购物车的关系：</strong> 1-to-1</li>
<li><strong>用户与订单的关系：</strong> 1-to-N</li>
<li><strong>订单与商品的关系：</strong> N-to-M</li>
<li>……</li>
</ul>
</blockquote>
<h2 id="第二步：逻辑设计"><a href="#第二步：逻辑设计" class="headerlink" title="第二步：逻辑设计"></a><strong>第二步：逻辑设计</strong></h2><p>逻辑设计就是将我们需求分析中所得到的我们这个应用中所要存储的数据类型来建立数据库的逻辑模型这个过程，我们不必考虑我们所选择的数据库管理系统所具有的特性，逻辑模型在任何数据库管理系统中都应该是通用的。流程如下：</p>
<blockquote>
<ol>
<li>将需求转化为数据库的逻辑模型</li>
<li>通过ER图的形式对逻辑模型进行展示</li>
<li>同所选用的具体的DBMS系统无关</li>
</ol>
</blockquote>
<p><strong>名词解释：</strong></p>
<blockquote>
<ul>
<li><strong>关系：</strong>一个关系对应通常所说的一张表</li>
<li><strong>元组：</strong>表中的一行即为一个元组</li>
<li><strong>属性：</strong>表中的一列即为一个属性；每个属性都有一个名称，成为属性名</li>
<li><strong>候选码：</strong>表中的某个属性组，它可以唯一确定一个元组</li>
<li><strong>主码：</strong>一个关系有多个候选码，选定其中一个为主码</li>
<li><strong>域：</strong>属性的取值范围</li>
<li><strong>分量：</strong>元组中的一个属性值</li>
</ul>
</blockquote>
<p><strong>ER图例说明：</strong></p>
<blockquote>
<ul>
<li><strong>矩形：</strong>表示实体集；矩形内写实体集的名字</li>
<li><strong>菱形：</strong>表示联系集</li>
<li><strong>椭圆：</strong>表示实体集的属性</li>
<li><strong>线段：</strong>将属性连接到实体集，或将实体集连接到联系集</li>
</ul>
</blockquote>
<p>像这样的ER图网上实在太多了，可以从网上自行获取。<br><strong>举例ER图：</strong><br><img src="https://store.machine-geek.cn/0034.jpg"></p>
<blockquote>
<p><strong>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。目前好像说有六种范式，但是通常我们满足三大范式就足够了。</strong></p>
</blockquote>
<blockquote>
<p><strong>1. 第一范式（1NF）</strong>：所谓第一范式（1NF）是指在关系模型中，对于添加的一个规范要求，所有的域都应该是原子性的，即数据库表的<strong>每一列都是不可分割的原子数据项</strong>，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。简而言之，第一范式就是无重复的域。**<font color="FF0000">（所有字段值都是不可分解的原子值，不能是集合，数组。简而言之，第一范式就是无重复的域。并且表结构不能是不规范的数据表样式，因为也根本无法创建。）</font>**<br><strong>2. 第二范式（2NF）：</strong>在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分。选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。例如在员工表中的身份证号码即可实现每个一员工的区分，该身份证号码即为候选键，任何一个候选键都可以被选作主键。在找不到候选键时，可额外增加属性以实现区分，如果在员工关系中，没有对其身份证号进行存储，而姓名可能会在数据库运行的某个时间重复，无法区分出实体时，设计辟如ID等不重复的编号以实现区分，被添加的编号或ID选作主键。（该主键的添加是在ER设计时添加，不是建库时随意添加）<strong>要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性</strong>，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。**<font color="FF0000">（数据库表中的每个实例或记录必须可以被唯一地区分，必须要有一个唯一标识，如果出现了属性并不与主键相关，那应该再分离出来一个实体。）</font>**<br><strong>3. 第三范式（3NF）：</strong>在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足2NF的基础上，任何非主属性不得传递依赖于主属性。**<font color="FF0000">（每一列数据都和主键直接相关，而不能间接相关。要求一个表中不包含已在其它表已包含的非主关键字信息，我们可以通过外键来关联它们。）</font>**</p>
</blockquote>
<h2 id="第三步：物理设计"><a href="#第三步：物理设计" class="headerlink" title="第三步：物理设计"></a><strong>第三步：物理设计</strong></h2><blockquote>
<p>根据特定数据库管理系统所提供的多种存储结构和存取方法等依赖于具体计算机结构的各项物理设计措施，对具体的应用任务选定最合适的物理存储结构(包括文件类型、索引结构和数据的存放次序与位逻辑等)、存取方法和存取路径等。这一步设计的结果就是所谓“物理数据库”。</p>
</blockquote>
<p><strong>物理设计步骤：</strong></p>
<blockquote>
<ol>
<li>选择合适的数据库管理系统</li>
<li>定义数据库、表及字段的命名规范</li>
<li>根据所选的DBMS系统选择合适的字段类型</li>
<li>反范式化设计</li>
</ol>
</blockquote>
<p><strong>选择一款合适的DBMS系统：</strong></p>
<blockquote>
<p>常见的DBMS就是Oracle、SQL Server、MySQL、PgSQL等，而Oracle、SQL Server呢是商业数据库，如果选择商业数据库的话，成本是必须要考虑的一个方面，而MySQL、PgSQL是开源数据库，开源数据库是完全免费的，只要遵从使用协议，就不会被收取任何的版权费用。大部分时候，商业数据库更适合企业级项目，而开源数据库则适用于互联网项目。</p>
<ul>
<li><strong>Oracle：</strong>是目前业内口碑最好的数据库系统，当然价格也非常昂贵，适合比较大的事物操作，读写速度也非常快。</li>
<li><strong>SQL Server：</strong>是微软开发的数据库系统，也是商业数据库，适合中小型企业。只能运行在Windows环境下，如果和.Net开发语言进行搭配是比较好的。</li>
<li><strong>MySQL：</strong>使用最广泛的数据库，是开源免费的，在WEB应用方面 MySQL 是最好的RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。</li>
<li>**PgSQL:**号称世界上最先进的开源关系数据库系统，有很多非常先进的概念，性能非常稳定，但是知名度不高。</li>
</ul>
</blockquote>
<p><strong>选择合适的存储引擎：</strong></p>
<blockquote>
<p>如果我们选择MySQL数据库系统，我们就得选择一个合适的存储引擎。因为MySQL是开源的，所以它的存储相对来说也是非常开放的。只要符合MySQL的存储协议，任何厂商都可以开发自己的存储引擎。大部分情况下我们使用InnoDB，它支持事物，而且支持多版本并发控制的行级锁。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">存储引擎</th>
<th align="center">事物</th>
<th align="center">锁粒度</th>
<th align="center">主要应用</th>
<th align="center">忌用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MyISAM</td>
<td align="center">不支持</td>
<td align="center">支持并发插入的表级锁</td>
<td align="center">INSERT,SELECT</td>
<td align="center">频繁的读写操作</td>
</tr>
<tr>
<td align="center">MRG_MYISAM</td>
<td align="center">不支持</td>
<td align="center">支持并发插入的表级锁</td>
<td align="center">分段归档、数据库仓库</td>
<td align="center">全局查找过多的场景</td>
</tr>
<tr>
<td align="center">InnoDB</td>
<td align="center">支持</td>
<td align="center">支持MVCC的行级锁</td>
<td align="center">事物隔离处理</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">Archive</td>
<td align="center">不支持</td>
<td align="center">支持行级锁</td>
<td align="center">日志记录，只支持INSERT,SELECT</td>
<td align="center">需要随机读取、更新、删除操作的场景。</td>
</tr>
<tr>
<td align="center">Ndb cluster</td>
<td align="center">支持</td>
<td align="center">支持行级锁</td>
<td align="center">高可用性</td>
<td align="center">大部分应用</td>
</tr>
</tbody></table>
<p><strong>表及表字段的命名规则：</strong></p>
<blockquote>
<p><strong>1. 可读性原则：</strong>使用大写和小写来格式化的库对象名字以获得良好的可读性。（注意：有些DBMS系统对表名的大小写是敏感的）<br> <strong>2. 表意性原则：</strong>对象的名字应该能描述它所表示的对象，表的名称应该能够体现表中存储的数据内容，存储过程名称应该能够体现存储过程的功能。<br> <strong>3. 长名原则：</strong>尽可能少使用或者不适用缩写，因为缩写在很多时候会有歧义，适用于数据库（DATABASE）名之外的任一对象。</p>
</blockquote>
<p> <strong>字段类型的选择原则：</strong></p>
<blockquote>
<p>列的数据类型一方面影响数据存储空间的开销，另一方面也会影响数据查询性能，当一个列可以选择多种数据类型的时候，应该优先考虑数值类型，其次是日期时间和二进制类型，最后才是字符类型。对于相同级别的数据类型，应该选择占用空间小的数据类型。</p>
</blockquote>
<p>Birthday(生日)字段举例：</p>
<table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CHAR(10)</td>
<td align="center">‘1997-08-01’</td>
</tr>
<tr>
<td align="center">VARCHAR(10)</td>
<td align="center">‘1997-08-01’</td>
</tr>
<tr>
<td align="center">DATETIME(10)</td>
<td align="center">1997-08-01</td>
</tr>
<tr>
<td align="center">INT</td>
<td align="center">870364800</td>
</tr>
</tbody></table>
<blockquote>
<p>对于生日字段，我们应该优先选择数值类型，使用INT数据类型存储时间戳，方便我们排序、比较，因为在进行数据比较时，相同的数据，字符处理会比数字处理慢很多，它需要参考字符字典。而数值类型不需要，所以速度上也要高于字符类型；其次再考虑日期时间和二进制数据类型，在同级的字符类型上CHAR和VARCHAR，对于时间这种长度变化不大的数据，我们应该优先选择占用字节数较少的CHAR，在数据库中，数据处理以页为单位，列的长度越小，利于性能的提升；反之如果数据的长度是可变的，则应该选择VARCHAR。</p>
</blockquote>
<p><strong>数据库设计其他注意事项：</strong></p>
<blockquote>
<p><strong>1. 区分业务主键和数据库主键：</strong>业务主键用于标识业务数据，进行表与表之间的关联；数据库主键为了优化数据存储（InnoDB会生成6个字节的隐含主键）。<br> <strong>2. 根据数据库的类型，考虑主键师傅需要顺序增长：</strong>有些数据库是按主键的顺序逻辑存储的。<br> <strong>3. 主键的字段类型所占用空间要尽可能的小：</strong>对于使用聚集索引方式存储的表，每个索引后都会附加主键信息。<br> <strong>4. 避免使用外键约束：</strong>外键的主要作用是为了保证数据的完整性，但是在实际开发的项目中，对高并发要求我们使用外键的话，会带来很多的负面影响。如果我们使用了外键，对于数据的写入，每次写入都会查询是否符合外键约束，如果符合才允许写入，比较耗时，而且增加了很多的维护成本。虽然不建议使用外键约束，但是相关联的列上一定要建立索引。<br> <strong>5. 避免使用触发器：</strong>我们经常使用触发器来减少程序逻辑处理，比如在操作某张表的时候，我们使用触发器来记录日志，降低了数据写入的效率，有时候会出现意想不到的数据异常，如果业务变更，或者开发人员变更，触发器使得我们的业务逻辑变得更加复杂。<br> <strong>6. 严禁使用预留字段：</strong>我们无法知道预留字段的数据类型和存储的内容，维护预留字段和创建新的字段成本是相同的。</p>
</blockquote>
<p> <strong>反范式化设计：</strong></p>
<blockquote>
<p>反范式化是针对范式化而言的，在前面介绍过数据库设计的三种范式，所谓的反范式化设计就是为了性能和读取速度的考虑，适当的对第三范式的要求进行违反，允许存在少量的数据冗余，有时候一张表中可以适当的增加一些其他表中的字段，减少表关联，降低SQL语句的复杂度，来增加查询速度，提高效率。换句话来说就是使用空间来换取时间。</p>
</blockquote>
<h2 id="第四步：维护优化"><a href="#第四步：维护优化" class="headerlink" title="第四步：维护优化"></a><strong>第四步：维护优化</strong></h2><blockquote>
<p>在数据库系统正式投入运行的过程中，必须不断地对其进行调整与修改。至今，数据库设计的很多工作仍需要人工来做，除了关系型数据库已有一套较完整的数据范式理论可用来部分地指导数据库设计之外，尚缺乏一套完善的数据库设计理论、方法和工具，以实现数据库设计的自动化或交互式的半自动化设计。所以数据库设计今后的研究发展方向是研究数据库设计理论，寻求能够更有效地表达语义关系的数据模型，为各阶段的设计提供自动或半自动的设计工具和集成化的开发环境，使数据库的设计更加工程化、更加规范化和更加方便易行，使得在数据库的设计中充分体现软件工程的先进思想和方法。</p>
</blockquote>
<p><strong>维护和优化中要做些什么？</strong></p>
<blockquote>
<ol>
<li>维护数据字典</li>
<li>维护索引</li>
<li>维护表结构 </li>
<li>在适当的时候对表进行水平拆分或者垂直拆分</li>
</ol>
<p><strong>维护数据字典：</strong></p>
</blockquote>
<blockquote>
<p>现在维护数据字典有很多种方式，可以使用第三方工具对数据字典进行维护，可以针对数据库系统来选择第三方工具，或者可以使用数据库本身的备注字段来维护字典（COMMENT），可以通过查询导出数据字典。</p>
</blockquote>
<p><strong>维护索引：</strong></p>
<blockquote>
<p><strong>如何选择合适的列建立索引？</strong><br>索引是一个非常大的话题，我们只是简单的聊一下，在选择上，我们可以考虑选择在WHERE、GOURP BY、ORDER BY从句中出现的列来建立索引，索引中的列不要包括太长的数据类型，我们要选择可选性高的列要放在索引的前面。这个时候大家可能会有一个误区，在索引列的顺序上要跟WHERE常见中的列的顺序要保持一致。实际上这个要求并不是必须的，因为在现在的数据库中，所有的SQL语句在执行之前都要经过SQL优化器重新编译，在编译过程中，SQL优化器就会按照我们数据库中的索引还有统计信息对查询列进行重新的排序和优化。<br><strong>索引是不是越多越好？</strong><br>索引并不是越多越好，反而过多的索引会降低我们的读写效率。如果我们建立了大量的索引，每写入一条记录，都要对这些索引进行维护，重建一些索引统计信息，大大的降低了写的效率。而且在我们查询的时候，SQL优化器会根据我们的索引信息和统计信息，来选择适合我们SQL所适合的索引，如果对于一个SQL来说有太多的可以适用的索引的话，SQL优化器会在多种适用这个SQL的索引中进行选择，选择的过程就会降低我们查询的效率。<br><strong>定期维护索引碎片</strong><br>由于我们对表中的数据不断的进行更新、删除、插入的操作，会产生分页（具体请自行百度），同时产生索引碎片，如果一个页中出现大量的索引碎片，我们一个页中所记录的信息也会相对的减少，因此我们需要定期的清理。<br><strong>在SQL语句中不要使用强制索引关键字</strong><br>首先，由于我们数据量的不断变化，在原来适用的索引，在数据量增加过后可能就不太合适了，这个时候如果我们使用的是强制索引关键字，不但会影响数据库的效率，如果DBA一旦把这个索引进行更名或者删除。这条SQL语句就会直接报错。</p>
</blockquote>
<p><strong>维护表结构：</strong></p>
<blockquote>
<p>维护表结构的工作就是，表中的列增加、删除，或者更改列数据类型。对表结构更改后请及时的维护数据字典，控制好表的宽度和大小，正如之前所说，很多项目刚上线的时候，表结构是非常完美的。但由于需求越来越多，业务逻辑越来越复杂，就不再注重设计细节了。</p>
</blockquote>
<p><strong>数据中适合的操作：</strong></p>
<blockquote>
<ul>
<li><strong>批量操作 VS 逐条操作：</strong> （数据库更适合批量操作，逐条适合在程序中完成。）</li>
<li>*<em>禁止使用 SELECT <em>：</em></em>（浪费I/O查询大量不必要的数据。）</li>
<li><strong>控制使用用户自定义函数：</strong>（索引不起作用，自定义函数往往非常低效。）</li>
<li><strong>不要使用数据库中的全文索引：</strong>（需要建立索引文件来进行维护，对中文的支持并不好）</li>
<li>*表的水平拆分或者垂直拆分：**</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>水平拆分：</strong>如果我们希望原来一张数据量很多的表数据量减少，就需要对它进行水平拆分，我们希望每张表中只存一定量的数据，就是说把原来的一张表复制了多份，表结构也是完全一样的，我们可以通过主键Hash Key的方式平均的把数据分到很多张相同的表中，每张表的数据量是非常平均且数据都不相同。这就是水平拆分。</li>
<li><strong>垂直拆分：</strong>实际上就是把原来的一张表分成多张小的表，在我们的需求越来越多，我们一直往一张表增加列，当这张表的宽度已经有几十列的时候，我们就要考虑对它进行垂直拆分了。因为我们数据库是以页来进行存储的，一张表中的列非常多的时候，每页存储的数据也就相对来说比较大，我们的I/O效率就会变得很低，我们可以把一些数据大的字段拆分到另一张表中，记住拆分前和拆分后，表的数据量不应该会有变化。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>DBA</tag>
        <tag>MySQL</tag>
        <tag>Database</tag>
        <tag>RDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>从回调、闭包到Lambda表达式只需要10分钟</title>
    <url>/2018/12/02/%E4%BB%8E%E5%9B%9E%E8%B0%83%E3%80%81%E9%97%AD%E5%8C%85%E5%88%B0Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C10%E5%88%86%E9%92%9F%E6%90%9E%E5%AE%9A%EF%BC%81/</url>
    <content><![CDATA[<h2 id="什么是回调函数？"><a href="#什么是回调函数？" class="headerlink" title="什么是回调函数？"></a>什么是回调函数？</h2><blockquote>
<p>回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。</p>
</blockquote>
<h2 id="什么是闭包函数？"><a href="#什么是闭包函数？" class="headerlink" title="什么是闭包函数？"></a>什么是闭包函数？</h2><blockquote>
<p>闭包是ECMAScript （JavaScript）最强大的特性之一，但用好闭包的前提是必须理解闭包。闭包的创建相对容易，人们甚至会在不经意间创建闭包，但这些无意创建的闭包却存在潜在的危害，尤其是在比较常见的浏览器环境下。如果想要扬长避短地使用闭包这一特性，则必须了解它们的工作机制。而闭包工作机制的实现很大程度上有赖于标识符（或者说对象属性）解析过程中作用域的角色。</p>
</blockquote>
<h2 id="什么是Lambda表达式？"><a href="#什么是Lambda表达式？" class="headerlink" title="什么是Lambda表达式？"></a>什么是Lambda表达式？</h2><blockquote>
<p>“Lambda 表达式”(lambda expression)是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示闭包（注意和数学传统意义上的不同）。</p>
</blockquote>
<a id="more"></a>
<h2 id="看不懂？"><a href="#看不懂？" class="headerlink" title="看不懂？"></a>看不懂？</h2><p>以上都是官方解释，网上的教程多如牛毛，举例数不胜数，大家都说很简单，却举着非常不容易新手理解的例子，翻来覆去但是你就是看不懂？没关系，让我来以最通俗易懂的方式告诉你怎么去理解：</p>
<h2 id="回调函数："><a href="#回调函数：" class="headerlink" title="回调函数："></a><strong>回调函数：</strong></h2><p>咱们先写一个Teacher类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="comment">//写一个叫学生计算题的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callStudentCompute</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        student.compute(<span class="number">9</span>,<span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再写一个Student类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//写一个计算的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我计算好了，答案是：&quot;</span>+(a+b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实例化一个老师，再实例化一位学生MachineGeek，老师直接就叫MachineGeek计算了，答案是18：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line">        Student MachineGeek = <span class="keyword">new</span> Student();</span><br><span class="line">        teacher.callStudentCompute(MachineGeek);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接调用就可以得到这个字符串了，那如此简单的返回字符串，你得用接口来写呢？那会是什么样子？我们写了一个计算接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICompute</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让Student类实现它：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">ICompute</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实现了这个接口的计算的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我计算好了，答案是：&quot;</span>+(a+b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在老师调用的是接口，我们把实现了这个接口的Student类传进去：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="comment">//写一个叫实现了接口的对象计算题的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callSomeoneCompute</span><span class="params">(ICompute iCompute)</span></span>&#123;</span><br><span class="line">        iCompute.compute(<span class="number">9</span>,<span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line">        Student MachineGeek = <span class="keyword">new</span> Student();</span><br><span class="line">        teacher.callSomeoneCompute(MachineGeek);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一切正常，答案是18，现在我们已经把Teacher类的调用改成了接口，任何实现了这个接口的类都可以调用。<br>如果Student类（或某个实现了这个接口的类）需要计算很久，老师需要做自己的事情，并安排了计算任务后就出去了，并嘱咐他计算好了再叫老师回来。<br>现在我们再写一个接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICallBack</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callBack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Teacher类实现这个方法，并把计算任务写成线程，因为老师有自己的事情要做，不会等他。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">ICallBack</span></span>&#123;</span><br><span class="line">    <span class="comment">//写一个叫实现了接口的对象计算题的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callSomeoneCompute</span><span class="params">(ICompute iCompute)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//用线程休眠来模拟计算时间</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5</span>*<span class="number">1000</span>);</span><br><span class="line">                    iCompute.compute(<span class="number">9</span>,<span class="number">9</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        System.out.println(<span class="string">&quot;我要忙自己的事情去了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我回来了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Student类需要知道结束过后叫谁回来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">ICompute</span> </span>&#123;</span><br><span class="line">    <span class="comment">//计算完成后我要叫的对象</span></span><br><span class="line">    <span class="keyword">private</span> ICallBack iCallBack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(ICallBack iCallBack)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iCallBack = iCallBack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现了这个接口的计算的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我计算好了，答案是：&quot;</span>+(a+b));</span><br><span class="line">        <span class="comment">//计算结束，我需要叫他回来</span></span><br><span class="line">        iCallBack.callBack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们在实例化Student的时候把Teacher对象传进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line">        Student MachineGeek = <span class="keyword">new</span> Student(teacher);</span><br><span class="line">        teacher.callSomeoneCompute(MachineGeek);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就很清晰了，你已经知道，无论是否是写成成员变量，还是在多线程中，都不是重要的，重要的是A调用B，然后B执行完后返回去A，这就是回调函数。</p>
<hr>
<h2 id="闭包函数："><a href="#闭包函数：" class="headerlink" title="闭包函数："></a><strong>闭包函数：</strong></h2><p>闭包是JavaScript的强大特性，我们都知道JavaScript可以直接把函数声明称一个变量，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fuc = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fuc(<span class="string">&quot;MachineGeek&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>它可以作为参数传递：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fuc = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">	callback(<span class="string">&quot;MachineGeek&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(fuc);</span><br></pre></td></tr></table></figure>
<p>或者，这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">	callback(<span class="string">&quot;MachineGeek&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>JavaScript可以更轻松简单的实现回调函数，那什么是闭包函数呢？我们都知道变量都会有一个作用域，闭包的通俗定义为，定义在函数内部的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fuc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> data = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		data += <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">console</span>.log(data);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fucObj = fuc();</span><br><span class="line">fucObj(); <span class="comment">//1，执行data += 1后，data还在；</span></span><br><span class="line">fucObj(); <span class="comment">//2；</span></span><br><span class="line">fucObj = <span class="literal">null</span>; <span class="comment">//data 被回收 即便注释掉这句话 也不影响funcObj1的data值；</span></span><br><span class="line"><span class="keyword">var</span> fucObj1 = fuc();</span><br><span class="line">fucObj1(); <span class="comment">//1；</span></span><br><span class="line">fucObj1(); <span class="comment">//2；</span></span><br></pre></td></tr></table></figure>
<p>这就是闭包函数，如果你希望制造一个变量长期驻扎在内存中，并且拥有私有成员的存在，避免全局变量的污染，可以使用闭包来实现。</p>
<hr>
<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a><strong>Lambda表达式</strong></h2><p>Lambda 表达式，也可称为闭包，它是Java8发布的最重要新特性；<br>Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中）；<br>使用 Lambda 表达式可以使代码变的更加简洁紧凑。<br>它的大概使用方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 不需要参数,返回值为 5  </span></span><br><span class="line">() -&gt; <span class="number">5</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span></span><br><span class="line">x -&gt; <span class="number">2</span> * x  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 3. 接受2个参数(数字),并返回他们的差值  </span></span><br><span class="line">(x, y) -&gt; x – y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 4. 接收2个int型整数,返回他们的和  </span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span></span><br><span class="line">(String s) -&gt; System.out.print(s)</span><br></pre></td></tr></table></figure>
<p>它们可以实例化对象，或者说代替匿名内部类，还可以用来筛选数据，遍历……各种千奇百怪的写法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类型声明</span></span><br><span class="line">MathOperation addition = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不用类型声明</span></span><br><span class="line">MathOperation subtraction = (a, b) -&gt; a - b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大括号中的返回语句</span></span><br><span class="line">MathOperation multiplication = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; &#123; <span class="keyword">return</span> a * b; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有大括号及返回语句</span></span><br><span class="line">MathOperation division = (<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; a / b;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;10 + 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, addition));</span><br><span class="line">System.out.println(<span class="string">&quot;10 - 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, subtraction));</span><br><span class="line">System.out.println(<span class="string">&quot;10 x 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, multiplication));</span><br><span class="line">System.out.println(<span class="string">&quot;10 / 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, division));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不用括号</span></span><br><span class="line">GreetingService greetService1 = message -&gt;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello &quot;</span> + message);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用括号</span></span><br><span class="line">GreetingService greetService2 = (message) -&gt;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello &quot;</span> + message);</span><br><span class="line"></span><br><span class="line">greetService1.sayMessage(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">greetService2.sayMessage(<span class="string">&quot;Google&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>例如之前的匿名内部类实现接口，你可以像这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原来的写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span></span>&#123;</span><br><span class="line">        Official official = <span class="keyword">new</span> Official(<span class="keyword">new</span> Message() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">                System.out.println(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        official.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Lambda表达式写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//x直接等于回调接口的参数</span></span><br><span class="line">        Official official = <span class="keyword">new</span> Official(x-&gt;System.out.println(x));</span><br><span class="line">        official.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>又例如，遍历一个集合，你可以这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原来的写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//x=回调接口的参数</span></span><br><span class="line">        List&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        strings.add(<span class="string">&quot;794763733&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;123456789&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;987654321&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s:strings) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Lambda表达式写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//x=回调接口的参数</span></span><br><span class="line">        List&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        strings.add(<span class="string">&quot;794763733&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;123456789&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;987654321&quot;</span>);</span><br><span class="line">        strings.forEach(x-&gt;System.out.println(x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Lambda表达式的用法还有很多，我们只讨论这么多。</p>
]]></content>
      <categories>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>CallBack</tag>
        <tag>Lambda</tag>
        <tag>Closure</tag>
      </tags>
  </entry>
  <entry>
    <title>SVG矢量详解及Android动画开发</title>
    <url>/2018/11/22/SVG%E7%9F%A2%E9%87%8F(%E5%90%91%E9%87%8F)%E8%AF%A6%E8%A7%A3%E5%8F%8AAndroid%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<blockquote>
<p><strong>什么是SVG？</strong><br>可缩放矢量图形是基于可扩展标记语言（标准通用标记语言的子集），用于描述二维矢量图形的一种图形格式。它由万维网联盟制定，是一个开放标准。</p>
</blockquote>
<blockquote>
<ul>
<li>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)</li>
<li>SVG 用来定义用于网络的基于矢量的图形</li>
<li>SVG 使用 XML 格式定义图形</li>
<li>SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失</li>
<li>SVG 是万维网联盟的标准</li>
<li>SVG 与诸如 DOM 和 XSL 之类的 W3C 标准是一个整体</li>
</ul>
</blockquote>
<h2 id="在Android中如何使用SVG？"><a href="#在Android中如何使用SVG？" class="headerlink" title="在Android中如何使用SVG？"></a>在Android中如何使用SVG？</h2><blockquote>
<p>Android 5.0（API级别21）是第一个正式支持矢量绘图的版本，可以通过VectorDrawable和AnimatedVectorDrawable来绘制矢量图形，你可以使用Android支持库支持旧版本，支持库提供了VectorDrawableCompat和 AnimatedVectorDrawableCompat类来向下兼容。但VectorDrawable只支持部分SVG的属性，相当于精简版本，不过也能绘制出所有你想要的图形。</p>
</blockquote>
<a id="more"></a>

<h2 id="VectorDrawable"><a href="#VectorDrawable" class="headerlink" title="VectorDrawable"></a>VectorDrawable</h2><blockquote>
<p>VectorDrawable定义静态可绘制对象。与SVG格式类似，每个矢量图形被定义为树形层，由树Path和Group组成。每个的Path包含对象轮廓的几何形状，并由Group包含转换的详细信息。所有Path都会按XML文件中出现的顺序绘制。</p>
</blockquote>
<p><img src="https://store.machine-geek.cn/0035.png"></p>
<blockquote>
<p>在Android Studio中提供了一个工具Vector asset studio来将一个矢量图形添加到项目中作为XML文件，这点可以自行百度了解一下。</p>
</blockquote>
<p>这是一个VectorDrawable XML文件来渲染一个电池充电的图像示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- res/drawable/battery_charging.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line">    &lt;!-- intrinsic size of the drawable --&gt;</span><br><span class="line">    android:height=&quot;24dp&quot;</span><br><span class="line">    android:width=&quot;24dp&quot;</span><br><span class="line">    <span class="comment">&lt;!-- size of the virtual canvas --&gt;</span></span><br><span class="line">    android:viewportWidth=&quot;24.0&quot;</span><br><span class="line">    android:viewportHeight=&quot;24.0&quot;&gt;</span><br><span class="line">   <span class="tag">&lt;<span class="name">group</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:name</span>=<span class="string">&quot;rotationGroup&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:pivotX</span>=<span class="string">&quot;10.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:pivotY</span>=<span class="string">&quot;10.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:rotation</span>=<span class="string">&quot;15.0&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;vect&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fillColor</span>=<span class="string">&quot;#FF000000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pathData</span>=<span class="string">&quot;M15.67,4H14V2h-4v2H8.33C7.6,4 7,4.6 7,5.33V9h4.93L13,7v2h4V5.33C17,4.6 16.4,4 15.67,4z&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fillAlpha</span>=<span class="string">&quot;.3&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;draw&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fillColor</span>=<span class="string">&quot;#FF000000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pathData</span>=<span class="string">&quot;M13,12.5h2L11,20v-5.5H9L11.93,9H7v11.67C7,21.4 7.6,22 8.33,22h7.33c0.74,0 1.34,-0.6 1.34,-1.33V9h-4v3.5z&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://store.machine-geek.cn/0036.png"></p>
<h2 id="额外补充篇：语法知识"><a href="#额外补充篇：语法知识" class="headerlink" title="额外补充篇：语法知识"></a>额外补充篇：语法知识</h2><blockquote>
<ul>
<li><code>width</code>、<code>height</code>代表了图片的宽高。</li>
</ul>
</blockquote>
<ul>
<li><code>viewportWidth</code>、<code>viewportHeight</code>意味着把上面的图片宽高<code>width</code>、<code>height</code>等分成多少份。（示例中把宽24dp高24dp的正方形分成24*24的网格，路径就是用这些网格坐标来描述位置、并连接成图形的。）</li>
<li><code>fillColor</code>是图形填充的颜色。</li>
<li><code>pathData</code>描述网格坐标的标签。</li>
</ul>
<p>在SVG中，最重要的还是pathData，里面包含了整个矢量图形的坐标路径，它基本上就是字母和数字组成,数字之间可以用空格或者逗号隔开 (但其实逗号会被忽略掉，只是方便我们阅读)。它的命令如下：</p>
<blockquote>
<ul>
<li><strong>M(Move To)：</strong> 移动虚拟画笔到对应的点,但不会绘制，默认的位置是在（0,0）。</li>
<li><strong>L(Line To)：</strong> 从当前位置画一条直线到对应的坐标点。</li>
<li><strong>H(Horizontal Line To)：</strong> 从当前位置画一条水平直线到对应的坐标点。</li>
<li><strong>V(Vertical Lineto)：</strong> 从当前位置画一条垂直直线到对应的坐标点。</li>
<li><strong>A(Elliptical Arc)：</strong> 从当前位置画一条椭圆弧线到对应的坐标点。</li>
<li><strong>Q(Quadratic Belzier Curve)：</strong> 从当前位置画一条二阶贝塞尔曲线到对应的坐标点。</li>
<li><strong>T(Smooth Quadratic Belzier Curveto)：</strong> 当你已经画完一条二阶贝塞尔曲线后，再次延长贝塞尔曲线到相应的坐标点，控制点会根据前一个二阶贝塞尔曲线来推断。</li>
<li><strong>C(Curveto)：</strong> 从当前位置画一条三阶贝塞尔曲线到对应的坐标点。</li>
<li><strong>S(Smooth Curvet)：</strong> 当你已经画完一条三阶贝塞尔曲线后，再次延长贝塞尔曲线到相应的坐标点，控制点会根据前一个三阶贝塞尔曲线来推断。</li>
<li><strong>Z(Close Path)：</strong> 从当前位置画一条线连接起始位置，闭合路径。<br><br/><strong>注意：命令区分大小写，大写命令是基于原点（0,0）的坐标，即绝对坐标，小写的命令是基于当前虚拟画笔的位置，即相对坐标。</strong></li>
</ul>
</blockquote>
<p><strong>M：x,y（移动虚拟画笔）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:width</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportWidth</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportHeight</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">android:strokeWidth</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeColor</span>=<span class="string">&quot;@color/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:pathData</span>=<span class="string">&quot;M10,10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>L：x,y（线段）Z（闭合路径）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:width</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportWidth</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportHeight</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">android:strokeWidth</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeColor</span>=<span class="string">&quot;@color/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:pathData</span>=<span class="string">&quot;M10,10 l30,0 l0,30 l-30,0 z&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://store.machine-geek.cn/0006.jpg"><br>通过L命令给出的坐标让我们渲染出了一个正方形，最后使用Z直接闭合路径。由于这样的正方形是垂直和水平线组合成的，我们也可以使用V、H来简写这个路径数据，效果是一样的。<br><strong>V：y（垂直线） H：x（水平线）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:width</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportWidth</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportHeight</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">android:strokeWidth</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeColor</span>=<span class="string">&quot;@color/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:pathData</span>=<span class="string">&quot;M10,10 h30 v30 h-30 z&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://store.machine-geek.cn/0007.jpg"><br><strong>A：rx,ry x-axis-rotation large-arc-flag,sweepflag x,y（弧线）</strong></p>
<blockquote>
<ul>
<li><strong>rx ry：</strong>这个椭圆的x轴半径和y轴半径。</li>
<li><strong>x-axis-rotation：</strong> x轴旋转角度。</li>
<li><strong>large-arc-flag：</strong> 为0时表示取小弧度，1时取大弧度。</li>
<li><strong>sweep-flag：</strong> 0取逆时针方向，1取顺时针方向</li>
<li><strong>x,y：</strong>终点的坐标</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:width</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportWidth</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportHeight</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">android:strokeWidth</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeColor</span>=<span class="string">&quot;@color/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:pathData</span>=<span class="string">&quot;M10,25 a15,15 0 0 1 30,0 z&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>设置rx,ry半径，其他几个参数根据需要修改，再设置x,y坐标，一条弧线就被渲染出来了，下面是弧线总结图。<br><img src="https://store.machine-geek.cn/0025.webp"><br><strong>Q：x1,y1 x,y（二阶贝塞尔曲线）T：x,y（平滑的二次二阶贝塞尔曲线）</strong><br>二阶贝塞尔曲线公式：<br><img src="https://store.machine-geek.cn/0026.webp"></p>
<p><img src="https://store.machine-geek.cn/0024.webp"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:width</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportWidth</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportHeight</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">android:strokeWidth</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeColor</span>=<span class="string">&quot;@color/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:pathData</span>=<span class="string">&quot;M10,25 q7,-20 15,0 t15,0 z&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://store.machine-geek.cn/0008.jpg"><br>通过设置的x1,y1来确定P1的坐标，再设置x,y确定P2的坐标，结合虚拟画笔当前的坐标（P0）就会计算出t的数值，然后渲染出一条二阶贝塞尔曲线，而T指令在你渲染出一条贝塞尔曲线后，只需要指定终点坐标（P2），会再次延伸出一条贝塞尔曲线，P1的坐标是上一条条贝塞尔曲线的对称坐标，这样就会产生上图效果，你还能继续添加T命令来延长它。<br><strong>C：x1,y1 x2,y2 x,y（三阶贝塞尔曲线） S：x2,y2 x,y（平滑的二次三阶贝塞尔曲线）</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1175492-d45534739c6a0b62?imageMogr2/auto-orient/strip%7CimageView2/2/w/558/format/webp"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/1175492-6b58a1da6d923644?imageMogr2/auto-orient/strip%7CimageView2/2/w/360/format/webp"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:width</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportWidth</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportHeight</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">android:strokeWidth</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:strokeColor</span>=<span class="string">&quot;@color/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:pathData</span>=<span class="string">&quot;M10,25 c0,-20 15,-20 15,0 s15,20 15,0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://store.machine-geek.cn/0009.jpg"><br>三阶贝塞尔曲线与二阶贝塞尔曲线类似，但多了一个控制点P2，通过虚拟画笔当前的坐标（P0），x1,y1的坐标（P1）、x2,y2（P2）、x,y计算出t的值，渲染出一条三阶贝塞尔曲线。S命令与T类似，P1的坐标仍然是上一条贝塞尔曲线的P1对称坐标，指定P2，P3的坐标即可渲染二次三阶贝塞尔曲线，你还能继续添加S命令来延长它。</p>
<h2 id="AnimatedVectorDrawable"><a href="#AnimatedVectorDrawable" class="headerlink" title="AnimatedVectorDrawable"></a>AnimatedVectorDrawable</h2><p>AnimatedVectorDrawable为矢量图形的属性添加了动画。您可以将一个动画向量图形定义为几个单独的资源文件，或者将其定义为一个单独的XML文件。就是说可以使用多个XML文件或者单个XML文件的方式来完成。<br>多个文件示例：</p>
<blockquote>
<ul>
<li>一个VectorDrawable XML文件。</li>
<li>一个AnimatedVectorDrawable XML文件，它定义了目标VectorDrawable、要动画的目标路径和组、属性以及ObjectAnimator对象或AnimatorSet对象定义的动画。</li>
</ul>
</blockquote>
<ul>
<li>一个Animator XML文件</li>
</ul>
<p>这是一个VectorDrawable矢量图形文件：<code>vd.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:height</span>=<span class="string">&quot;64dp&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:width</span>=<span class="string">&quot;64dp&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:viewportHeight</span>=<span class="string">&quot;600&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:viewportWidth</span>=<span class="string">&quot;600&quot;</span> &gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">group</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:name</span>=<span class="string">&quot;rotationGroup&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:pivotX</span>=<span class="string">&quot;300.0&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:pivotY</span>=<span class="string">&quot;300.0&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:rotation</span>=<span class="string">&quot;45.0&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:name</span>=<span class="string">&quot;vectorPath&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:fillColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:pathData</span>=<span class="string">&quot;M300,70 l 0,-70 70,70 0,0 -70,70z&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是一个AnimatedVectorDrawable矢量动画文件：<code>avd.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animated-vector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/vd&quot;</span> &gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">target</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:name</span>=<span class="string">&quot;rotationGroup&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:animation</span>=<span class="string">&quot;@anim/rotation&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">target</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:name</span>=<span class="string">&quot;vectorPath&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:animation</span>=<span class="string">&quot;@anim/path_morph&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">animated-vector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在AnimatedVectorDrawable的XML文件中使用的Animator XML文件:<code>rotation.xml</code>和<code>path_morph.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:duration</span>=<span class="string">&quot;6000&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:propertyName</span>=<span class="string">&quot;rotation&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:valueFrom</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:valueTo</span>=<span class="string">&quot;360&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:duration</span>=<span class="string">&quot;3000&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:propertyName</span>=<span class="string">&quot;pathData&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:valueFrom</span>=<span class="string">&quot;M300,70 l 0,-70 70,70 0,0   -70,70z&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:valueTo</span>=<span class="string">&quot;M300,70 l 0,-70 70,0  0,140 -70,0 z&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:valueType</span>=<span class="string">&quot;pathType&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>单个文件示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animated-vector</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aapt</span>=<span class="string">&quot;http://schemas.android.com/aapt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aapt:attr</span> <span class="attr">name</span>=<span class="string">&quot;android:drawable&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">vector</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:width</span>=<span class="string">&quot;24dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:height</span>=<span class="string">&quot;24dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:viewportWidth</span>=<span class="string">&quot;24&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:viewportHeight</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:strokeWidth</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:strokeLineCap</span>=<span class="string">&quot;square&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:strokeColor</span>=<span class="string">&quot;?android:colorControlNormal&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:pathData</span>=<span class="string">&quot;M4.8,13.4 L9,17.6 M10.4,16.2 L19.6,7&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aapt:attr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">android:name</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aapt:attr</span> <span class="attr">name</span>=<span class="string">&quot;android:animation&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:propertyName</span>=<span class="string">&quot;pathData&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueFrom</span>=<span class="string">&quot;M4.8,13.4 L9,17.6 M10.4,16.2 L19.6,7&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueTo</span>=<span class="string">&quot;M6.4,6.4 L17.6,17.6 M6.4,17.6 L17.6,6.4&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:duration</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:interpolator</span>=<span class="string">&quot;@android:interpolator/fast_out_slow_in&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueType</span>=<span class="string">&quot;pathType&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aapt:attr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">animated-vector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过使用这种方法，您可以通过XML Bundle格式将相关的XML文件合并到单个XML文件中。在构建应用程序时，aapt标记会创建单独的资源并在矢量动画中引用它们。这种方法需要构建工具24或更高版本，并且输出是向上兼容的。</p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>SVG</tag>
        <tag>Animation</tag>
      </tags>
  </entry>
  <entry>
    <title>简述Linux</title>
    <url>/2018/11/12/%E7%AE%80%E8%BF%B0Linux/</url>
    <content><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><blockquote>
<p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>
</blockquote>
<p>安装教程网上比较多，我们直接快速入门Linux。</p>
<h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><p>Linux不同于Windows一样区分C、D、E……盘，Linux只有一个根目录/，其他的所有目录都是从根目录衍生出来的。<br><img src="https://store.machine-geek.cn/0033.jpg"><br>在Linux的世界里，一切皆是文件，包括你的所有硬件设备，在Linux中都会映射成一个相应文件。</p>
<a id="more"></a>
<blockquote>
<p><strong>bin（binary）：</strong> 该目录存放着用户经常使用的命令。<br><strong>dev（device）:</strong> 该目录下存放的是Linux的外部设备驱动，在Linux中访问设备的方式和访问文件的方式是相同的。<br><strong>home:</strong> 该目录是用户目录，在Linux中，每个用户都会在这个这个目录下创建一个子目录，一般子目录名是以用户的账号命名的。<br><strong>lib（library）:</strong> 该目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。<br><strong>mnt（mount）:</strong> 该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。<br><strong>proc（process）</strong>：该目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取或修改系统信息。<br><strong>run</strong>：是一个临时文件系统，存储系统启动以来的信息，重启清空。<br><strong>srv（service）</strong>：该目录存放一些服务启动之后需要提取的数据。<br><strong>tmp（temporary）:</strong> 该目录是用来存放一些临时文件的。<br><strong>var （variable）:</strong> 该目录中存放着在不断扩充着的东西，一般用来放日志文件。<br><strong>boot:</strong> 该目录是存放启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。<br><strong>etc（etcetera）:</strong> 该目录用来存放所有的系统管理所需要的配置文件和子目录。<br><strong>media:</strong> 该目录是linux系统自动识的设备挂载目录，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。<br><strong>opt（option）:</strong> 该目录是给用户额外安装软件目录，比如你安装一个ORACLE数据库则就可以放到这个目录下，默认是空的。<br><strong>root :</strong> 该目录为系统管理员，也称作超级权限者的用户主目录。<br><strong>sbin（superuser binary）:</strong> 该目录存放的是系统管理员使用的命令。<br><strong>sys（sysfs）:</strong> 该目录是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。<br>sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。<br>该文件系统是内核设备树的一个直观反映。<br>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。<br><strong>usr（user）:</strong> 该目录是用户应用程序和文件默认安装的目录下。</p>
</blockquote>
<p>为了让后面的知识能够正常学习，现在先介绍两个个命令：<code>cd(Change Directory)</code>、<code>ls(List)</code>。<br><code>列出当前目录下的文件</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># ls</span></span><br><span class="line">bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  etc  lib   media  opt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure>
<p><code>使用绝对路径改变当前目录</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># cd /root/Desktop/</span></span><br></pre></td></tr></table></figure>
<p>绝对路径就是从<code>/</code>根目录开始寻找的路径，有时候你会看到啊<code>~/</code>，它代表了用户的home目录，<code>cd ~/</code>可以进入用户的home。<br><code>使用相对路径改变当前目录</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># cd ../Documents/</span></span><br></pre></td></tr></table></figure>
<p>相对路径就是相对与当前目录寻找的路径,可以用符号<code>./</code>表示当前目录、<code>../</code>表示上一级目录。<br>上面的案例当前所在的目录是在<code>/root/Desktop/</code>下，用<code>../</code>表示上一级目录，所以<code>../Documents/</code>表示上一级目录中的Documents目录。</p>
<blockquote>
<p><strong>注意：</strong><br>在目录中，上一级目录是也计算成文件夹，只不过是隐藏了起来，可以使用<code>ls -a</code>查看。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Documents]<span class="comment"># ls -a</span></span><br><span class="line">.  ..</span><br></pre></td></tr></table></figure>
<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p>以下案例列出了一些基本文件操作。<br><code>创建文件</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># touch MachineGeek.txt</span></span><br></pre></td></tr></table></figure>
<p><code>删除文件</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># rm MachineGeek.txt </span></span><br><span class="line">rm: remove regular empty file ‘MachineGeek.txt’? yes</span><br></pre></td></tr></table></figure>
<p>可以在前面加<code>-f</code>忽略警告。<br><code>拷贝文件</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># cp MachineGeek.txt ./123.txt</span></span><br></pre></td></tr></table></figure>
<p>可以直接在目录后面加上拷贝后的文件名。<br><code>移动文件</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># mv MachineGeek.txt /opt/</span></span><br></pre></td></tr></table></figure>
<p><code>重命名文件</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># mv MachineGeek.txt ./text.txt</span></span><br></pre></td></tr></table></figure>
<p>把当前目录下的<code>MachineGeek.txt</code>文件移动到当前目录下，指定了名字叫<code>text.txt</code>，所以就是重命名了。<br><code>创建目录</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># mkdir MachineGeek</span></span><br></pre></td></tr></table></figure>
<p>除了创建方式不一样外，目录的其他操作基本与文件时一致的，有一个注意点，使用<code>rm</code>删除文件夹的话，需要加参数<code>-r</code>，递归删除目录里的内容，如果是空目录的话，则不用加。</p>
<h2 id="Vi-Vim编辑器"><a href="#Vi-Vim编辑器" class="headerlink" title="Vi/Vim编辑器"></a>Vi/Vim编辑器</h2><blockquote>
<p>Vi是Linux自带的文本编辑器，而Vim则可以看做是Vi的增强版本，增加语法颜色、代码补全，错误跳转……等功能，在程序员中被广泛使用。</p>
</blockquote>
<p>Vim有3种常用模式</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>正常模式</td>
<td>在这个模式下，可以移动光标，删除某个字符，删除某行，复制多行，粘贴多行。</td>
</tr>
<tr>
<td>命令模式</td>
<td>在该模式下可以进行保存，搜索，替换，退出，显示行号等。</td>
</tr>
<tr>
<td>插入模式</td>
<td>插入模式里可以进行文字的输入</td>
</tr>
</tbody></table>
<p>桌面上有一个文本 <code>test.txt</code>，我们使用Vim打开它。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># vim test.txt</span></span><br></pre></td></tr></table></figure>
<p>打开文本后就进入了正常模式，在这个模式下可以【上下左右】按键来移动光标，也可以复制粘贴，删除字符。<br><code>正常模式</code></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">MachineGeek</span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line"><span class="string">&quot;test.txt&quot;</span> <span class="number">1</span>L, <span class="number">12</span>C                                            <span class="number">1</span>,<span class="number">1</span>           All</span><br></pre></td></tr></table></figure>
<p>在正常模式下，我们按<code>I</code>就可以进入插入模式，你可以输入任何你想输入的内容，输入完毕后可以按ESC退出编辑模式。<br><code>插入模式</code></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">MachineGeek</span><br><span class="line">现在已经可以输入内容了</span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">-- INSERT --                                                  <span class="number">2</span>,<span class="number">34</span>-<span class="number">23</span>       All</span><br></pre></td></tr></table></figure>
<p>现在可以按 <code>:</code> 来进入命令行模式，输入 <code>w</code> 代表Write写入（保存），输入 <code>q</code> 代表退出，输入 <code>!</code> 代表强制操作。回车即可执行相关的操作了。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">MachineGeek</span><br><span class="line">现在已经可以输入内容了</span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">:<span class="keyword">wq</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>现在桌面上的文本 <code>test.txt</code> 已经保存了刚才输入的内容，并且退回到了终端。Vim还有许多用法和其他的快捷键操作，这里就大概说一下这样的基本使用。</p>
<h2 id="远程登录，注销"><a href="#远程登录，注销" class="headerlink" title="远程登录，注销"></a>远程登录，注销</h2><p>在实际的工作场景中，虚拟机界面或者物理服务器本地的终端都是很少接触的，因为服务器装完系统之后，都要放到IDC机房托管，如果是购买的云主机，那更碰不到服务器本体了，只能通过远程连接的方式管理自己的Linux系统。可以通过SSH远程登录软件来连接，可以自行从网上获取。<br><code>切换用户</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># su &lt;username&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>退出用户</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># exit</span></span><br></pre></td></tr></table></figure>
<p><code>注销操作</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># logout</span></span><br></pre></td></tr></table></figure>
<p><code>关机操作</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># shutdown -h now</span></span><br></pre></td></tr></table></figure>
<p><code>重启操作</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># reboot</span></span><br></pre></td></tr></table></figure>
<p>请注意，如果无法连接Linux，请查看Linux是否开启SSHD服务，或者防火墙是否屏蔽22号端口。</p>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个用户账号，然后以这个用户账号的身份进入系统。<br><code>增加用户</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># useradd MachineGeek</span></span><br></pre></td></tr></table></figure>
<p>用户创建的时候会在<code>/home</code>目录下创建一个相应的文件夹作为当前用户home目录，文件夹默认为用户名，你也可以通过创建时加<code>-d</code>参数来指定文件夹。<br><code>删除用户</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># userdel MachineGeek</span></span><br></pre></td></tr></table></figure>
<p>删除用户的时候默认不会删除这个用户的home目录，如果要删除该用户的home目录，请在用户名前面加上<code>-r</code>参数。<br><code>修改密码</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># passwd MachineGeek</span></span><br></pre></td></tr></table></figure>
<p>root用户可以直接修改指定用户的密码，普通用户修改自己的密码前需要先输入旧密码。<br><code>查询用户</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># id MachineGeek</span></span><br><span class="line">uid=1001(MachineGeek) gid=1001(MachineGeek) groups=1001(MachineGeek)</span><br></pre></td></tr></table></figure>
<p><code>uid</code>代表了用户ID，<code>gid</code>代表了用户组ID，<code>groups</code>代表了用户组信息<br><code>查询当前用户</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># who am i</span></span><br><span class="line">root     pts/0        2018-12-13 10:40 (:0)</span><br></pre></td></tr></table></figure>
<p><code>切换用户</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># su - MachineGeek </span></span><br><span class="line">Last login: Thu Dec 13 11:01:12 CST 2018 on pts/0</span><br><span class="line">[MachineGeek@localhost ~]$ <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line">[root@localhost home]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>可以直接指定用户名切换用户，权限高的用户切换到权限低的用户不需要密码，反之需要输入密码，返回到原来的用户使用 <code>exit</code>。</p>
<h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p>在Linux中，每个用户都属于至少一个用户组（可以多个），用户创建的时候如果没有指定用户组，则会为该账户创建一个新的用户组，默认为该账户的用户名。<br><code>增加用户组</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># groupadd Developer</span></span><br></pre></td></tr></table></figure>
<p><code>删除用户组</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># groupdel Developer</span></span><br></pre></td></tr></table></figure>
<p><code>创建用户时指定用户组</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># useradd -g Developer MachineGeek</span></span><br><span class="line">[root@localhost home]<span class="comment"># id MachineGeek</span></span><br><span class="line">uid=1001(MachineGeek) gid=1001(Developer) groups=1001(Developer)</span><br></pre></td></tr></table></figure>
<p><code>修改用户所属用户组</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># usermod -g Hacker MachineGeek </span></span><br><span class="line">[root@localhost home]<span class="comment"># id MachineGeek</span></span><br><span class="line">uid=1001(MachineGeek) gid=1003(Hacker) groups=1003(Hacker)</span><br></pre></td></tr></table></figure>
<p><code>增加用户所属组</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># usermod -G Developer MachineGeek </span></span><br><span class="line">[root@localhost home]<span class="comment"># id MachineGeek</span></span><br><span class="line">uid=1001(MachineGeek) gid=1003(Hacker) groups=1003(Hacker),1004(Developer)</span><br></pre></td></tr></table></figure>
<p><strong>用户信息文件：</strong><br><code>/etc/passwd</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MachineGeek:x:1001:1004::/home/MachineGeek:/bin/bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>用户名：用户口令（不可见）：用户ID：用户组ID：注释性描述：用户home目录：登录Shell</p>
</blockquote>
<p><strong>用户口令信息文件：</strong><br><code>/etc/shadow</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MachineGeek:!!:17878:0:99999:7:::</span><br></pre></td></tr></table></figure>
<blockquote>
<p>用户名：加密口令（不可见）：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</p>
</blockquote>
<p><strong>用户组信息文件：</strong><br><code>/etc/group</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Developer:x:1004:MachineGeek</span><br></pre></td></tr></table></figure>
<blockquote>
<p>用户组名：口令：用户组ID：用户组用户</p>
</blockquote>
<h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p>Linux的权限管理和我们的用户与用户组管理紧紧相连，每个文件/目录都有3种权限。</p>
<table>
<thead>
<tr>
<th>字母</th>
<th>权限</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>读权限</td>
</tr>
<tr>
<td>w</td>
<td>写权限</td>
</tr>
<tr>
<td>x</td>
<td>执行权限</td>
</tr>
</tbody></table>
<p>每个文件/目录都有一个拥有者，拥有组。默认是创建它的用户和用户所属组。我们可以设置文件的权限，对拥有这个文件/目录的用户、用户组、和其他用户组不同程度的开放。<br>使用<code>ls -l</code>查看桌面下的<code>test.txt</code>文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># ls -l</span></span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x. 2 root root  6 Dec 13 15:00 MachineGeek</span><br><span class="line">-rw-r--r--. 1 root root 46 Dec 13 10:00 test.txt</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一个字母代表文件的类型：（<code>-</code>文件）、（<code>d</code>目录）、(<code>l</code>链接)。<br>第一个字母后的每3个字母，分别代表文件/目录：（所属用户权限）、（所属用户组权限）、（其他用户组权限）。<br>权限信息后的数字表示文件个数，如果是文件就是1，如果是目录，那就代表目录下的文件/目录个数。<br>第一个root代表所属用户，<br>第二个root代表所属用户组。<br>文件所属信息后的数字代表文件大小（字节）<br>然后是日期信息，<br>最后是文件名。</p>
</blockquote>
<p><code>MachineGeek</code>第一个字母<code>d</code>代表了这是一个目录，第一组权限<code>rwx</code>代表文件所有者拥有读、写、执行的权限,第二组<code>r-x</code>代表所属用户组的用户拥有读、执行的权限，<code>r-x</code>代表其他用户组拥有读、执行的权限。<code>2</code>这个目录下的文件/目录个数，<code>root</code>所属用户，<code>root</code>所属用户组，<code>6</code>目录所占大小字节（Byte），<code>Dec 13 15:00</code>日期信息，<code>MachineGeek</code>文件名。</p>
<p><code>修改文件所属用户</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># chown root MachineGeek</span></span><br></pre></td></tr></table></figure>
<p><code>修改文件所属用户组</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># chgrp Developer MachineGeek</span></span><br></pre></td></tr></table></figure>
<p><code>修改文件权限</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># chmod u=rwx,g=,o= MachineGeek</span></span><br></pre></td></tr></table></figure>
<p><code>u</code>是文件所属用户的权限，<code>g</code>是文件所属用户组的权限，<code>o</code>是其他用户组的权限<br><code>运算符修改文件权限</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># chmod o+r MachineGeek</span></span><br></pre></td></tr></table></figure>
<p><code>数字修改文件权限</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># chmod 740 MachineGeek</span></span><br></pre></td></tr></table></figure>
<p><code>r</code>=4，<code>w</code>=2，<code>x</code>=1，计算好权限值可以直接修改。</p>
<blockquote>
<p><strong>注意：</strong><br>想要删除文件，必须拥有当前目录的w权限。</p>
</blockquote>
<h2 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h2><table>
<thead>
<tr>
<th align="center">级别</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">关机</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">单用户模式</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">多用户模式</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">多用户联网模式</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">保留</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">图形化界面模式</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">重启</td>
</tr>
</tbody></table>
<p>运行级别<code>3</code>和<code>5</code>使我们最常用的远程或者个人电脑使用，<code>1</code>单用户模式可以用来找回root密码，因为进入单用户模式不需要输入密码。<br><code>切换运行级别-多用户联网模式</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># init 3</span></span><br></pre></td></tr></table></figure>
<p>可以直接使用<code>init</code>命令来切换运行级别，也可以可以修改<code>/etc/inittab</code>这个文件来指定默认的运行级别。切记不能把默认的运行级别设置为0和6，这样会无法正常启动。</p>
<h2 id="网路配置"><a href="#网路配置" class="headerlink" title="网路配置"></a>网路配置</h2><p>网络配置可以直接修改<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code>这个文件内容来进行配置，<code>ifcfg-ens33</code>的名字可能有所不同，可以根据自己的环境查看。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet       //尊重原著MachineGeek</span><br><span class="line">PROXY_METHOD=none </span><br><span class="line">BROWSER_ONLY=<span class="keyword">no</span> </span><br><span class="line">BOOTPROTO=static    //这里修改为static为静态IP、DHCP为动态获取</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=<span class="keyword">no</span></span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=<span class="keyword">no</span> </span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=<span class="number">9</span>e053616-b273-<span class="number">4</span>db9-ae5b-<span class="number">0</span>e3cd34bb041</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes              //这里要修改为yes</span><br><span class="line">IPADDR=<span class="number">192.168</span>.<span class="number">179.3</span>    //ip地址  </span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.0</span>   //子网掩码</span><br><span class="line">GATEWAY=<span class="number">192.168</span>.<span class="number">179.2</span>   //网关 </span><br><span class="line">DNS1=<span class="number">202.98</span>.<span class="number">198.167</span>     //DNS首选地址</span><br><span class="line">DNS2=<span class="number">202.98</span>.<span class="number">192.67</span>      //DNS备选地址</span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line"><span class="string">&quot;/etc/sysconfig/network-scripts/ifcfg-ens33&quot;</span> <span class="number">20</span>L, <span class="number">415</span>C        <span class="number">18</span>,<span class="number">1</span>          All</span><br></pre></td></tr></table></figure>
<p>然后重启一下网络服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># service network restart </span></span><br></pre></td></tr></table></figure>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>在Linux每个进程都会有一个ID号，每个进程都会对应一个父进程，这些进程可以再后台运行，或者在前台运行。<br><code>查看进程</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># ps -aux</span></span><br><span class="line">USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root          1  0.0  0.3 193948  6968 ?        Ss   10:34   0:22 /usr/lib/syste</span><br><span class="line">root          2  0.0  0.0      0     0 ?        S    10:34   0:00 [kthreadd]</span><br><span class="line">root          3  0.0  0.0      0     0 ?        S    10:34   0:00 [ksoftirqd/0]</span><br><span class="line">root          5  0.0  0.0      0     0 ?        S&lt;   10:34   0:00 [kworker/0:0H]</span><br><span class="line">root          6  0.0  0.0      0     0 ?        S    10:34   0:05 [kworker/u256:</span><br><span class="line">root          7  0.0  0.0      0     0 ?        S    10:34   0:00 [migration/0]</span><br><span class="line">root          8  0.0  0.0      0     0 ?        S    10:34   0:00 [rcu_bh]</span><br><span class="line">root          9  0.0  0.0      0     0 ?        S    10:34   0:08 [rcu_sched]</span><br><span class="line">root         10  0.0  0.0      0     0 ?        S&lt;   10:34   0:00 [lru-add-drain</span><br><span class="line">root         11  0.0  0.0      0     0 ?        S    10:34   0:00 [watchdog/0]</span><br><span class="line">root         12  0.0  0.0      0     0 ?        S    10:34   0:00 [watchdog/1]</span><br><span class="line">root         13  0.0  0.0      0     0 ?        S    10:34   0:00 [migration/1]</span><br></pre></td></tr></table></figure>
<p><code>ps</code>命令：<code>-a</code>查看所有进程，<code>-u</code>以用户的格式显示所有信息，<code>-x</code>显示后台进程运行参数</p>
<blockquote>
<ul>
<li>USER：用户名</li>
<li>PID：进程ID</li>
<li>%CPU：CPU占用率</li>
<li>%MEM：内存占用率</li>
<li>VSZ：进程所占用的虚拟内存大小（单位：KB）</li>
<li>RSS：进程所占用的物理内存大小（单位：KB）</li>
<li>TTY：终端名称</li>
<li>STAT：进程状态，S-睡眠，s-表示该进程是绘画的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵尸进程，T-被跟踪或者被停止等等。</li>
<li>START：进程的启动时间</li>
<li>PID：进程ID</li>
<li>TIME：CPU时间，进程使用CPU的总时间。</li>
<li>COMMAND：启用进程所用的命令和参数，如果过长会被截断显示。</li>
</ul>
</blockquote>
<p>今天写到这里，这几天有事，以后再补……</p>
]]></content>
      <categories>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>OperateSystem</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的基本原理</title>
    <url>/2018/11/06/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="文件空间"><a href="#文件空间" class="headerlink" title="文件空间"></a>文件空间</h2><p>Git分了三个文件空间：</p>
<ul>
<li>工作目录：硬盘上存储的项目目录，编写代码的地方。</li>
<li>暂存区：是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作“索引”，不过一般说法还是叫暂存区域。</li>
<li>Git 仓库目录：是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</li>
</ul>
<h2 id="基本工作流程"><a href="#基本工作流程" class="headerlink" title="基本工作流程"></a>基本工作流程</h2><ol>
<li>在工作目录中修改文件。</li>
<li>暂存文件，将文件的快照放入暂存区域。</li>
<li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。<a id="more"></a>

</li>
</ol>
<h2 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h2><p>Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方法。 概念上来区分，其它大部分系统以文件变更列表的方式存储信息。 这类系统（CVS、Subversion、Perforce、Bazaar 等等）将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。<br>Git 不按照以上方式对待或保存数据。 反之，Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 快照流。</p>
<h2 id="文件的三种状态"><a href="#文件的三种状态" class="headerlink" title="文件的三种状态"></a>文件的三种状态</h2><ul>
<li>已提交（committed）:已提交表示数据已经安全的保存在本地数据库中。</li>
<li>已修改（modified）:已修改表示修改了文件，但还没保存到数据库中。</li>
<li>已暂存（staged）:暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li>
</ul>
<h2 id="Git仓库对象"><a href="#Git仓库对象" class="headerlink" title="Git仓库对象"></a>Git仓库对象</h2><ul>
<li>blob：保存着文件的快照</li>
<li>tree：记录着目录结构和 blob 对象索引</li>
<li>commit：包含着指向前述树对象的指针和所有提交信息</li>
</ul>
<p>在进行提交操作时，Git 会保存一个提交对象（commit object）。该提交对象会包含一个指向暂存内容快照的指针。该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象，<br>每次提交的对象都会包含一个指向上一个版本的指针。<br>Git 的分支，其实本质上仅仅是指向提交对象的可变指针。 Git 的默认分支名字是 master。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 master 分支。 它会在每次的提交操作中自动向前移动。<br>创建不同的分支再提交时会有新的指针。<br>分支合并的时候会创建一个新的对象并且合并分支，需要指出的是，Git 会自行决定选取哪一个提交作为最优的共同祖先，并以此作为合并的基础。<br>如果修改了同一个文件的同一处，Git会停止合并，等待你处理合并冲突后再继续。</p>
<h2 id="Git的合理使用"><a href="#Git的合理使用" class="headerlink" title="Git的合理使用"></a>Git的合理使用</h2><p>Git使用应该分为不同的分支，把开发版本和线上发布版本以及一些错误修复隔离开。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>对于Git的使用多用指针思考。</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Version Control</tag>
        <tag>Distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>ASP.NET Core中使用AutoMapper、EntityFrameWork</title>
    <url>/2018/11/05/ASP.NET%20Core%E4%B8%AD%E4%BD%BF%E7%94%A8AutoMapper%E3%80%81EntityFrameWork/</url>
    <content><![CDATA[<blockquote>
<h2 id="什么是ASP-NET-Core"><a href="#什么是ASP-NET-Core" class="headerlink" title="什么是ASP.NET Core"></a>什么是ASP.NET Core</h2><p>.NET Core 是.NET Framework的新一代版本，是微软开发的第一个官方版本，具有跨平台 (Windows、Mac OSX、Linux) 能力的应用程序开发框架 (Application Framework)，未来也将会支持 FreeBSD 与 Alpine 平台，也是微软在一开始发展时就开源的软件平台，它经常也会拿来和现有的开源 .NET 平台 Mono 比较。</p>
<h2 id="什么是AutoMapper？"><a href="#什么是AutoMapper？" class="headerlink" title="什么是AutoMapper？##"></a>什么是AutoMapper？##</h2><p>AutoMapper是一个简单的小型库，用于解决一个看似复杂的问题 - 摆脱将一个对象映射到另一个对象的代码。这种类型的代码是相当沉闷和无聊的写，所以为什么不发明一个工具来为我们做？</p>
<h2 id="什么是Entity-Framework-Core"><a href="#什么是Entity-Framework-Core" class="headerlink" title="什么是Entity Framework Core"></a>什么是Entity Framework Core</h2><p>Entity Framework (EF) Core 是轻量化、可扩展和跨平台版的常用 Entity Framework 数据访问技术。<br>EF Core 可用作对象关系映射程序 (O/RM)，以便于 .NET 开发人员能够使用 .NET 对象来处理数据库，这样就不必经常编写大部分数据访问代码了。</p>
</blockquote>
<a id="more"></a>
<p>创建一个ASP.NET Core Web工程，选择MVC的模板，<br>在程序包管理控制台中安装EntityFramework。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Install-Package Microsoft.EntityFrameworkCore</span><br></pre></td></tr></table></figure>
<p>安装AutoMapper。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Install-Package AutoMapper</span><br></pre></td></tr></table></figure>
<p>在appsettings.json中添加连接数据库对象</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;ConnectionStrings&quot;: &#123;</span><br><span class="line">    &quot;default&quot;: &quot;server=(主机IP);database=（数据库名称）;uid=（用户名）;pwd=（密码）.;MultipleActiveResultSets=true;&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>创建两个实体类：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Book</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> BookName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">//虚拟映射 多个Comment</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> ICollection&lt;Comment&gt; Comments &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Comment</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> BookId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">//虚拟映射 一个Book</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> Book Book &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>写好两个实体类后，创建EF上下文：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDB</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDB</span>(<span class="params">DbContextOptions options</span>) : <span class="title">base</span>(<span class="params">options</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Book表</span></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Book&gt; Books &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">//Comment表</span></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Comment&gt; Comments &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        modelBuilder.Entity&lt;Book&gt;(book =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//设置主键</span></span><br><span class="line">            book.HasKey(x =&gt; x.Id);</span><br><span class="line">            <span class="comment">//设置一对多关系和外键字段</span></span><br><span class="line">            book.HasMany(x =&gt; x.Comments).WithOne(x =&gt; x.Book).HasForeignKey(x =&gt; x.BookId);</span><br><span class="line">            <span class="comment">//设置数据库中的表名</span></span><br><span class="line">            book.ToTable(<span class="string">&quot;Books&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        modelBuilder.Entity&lt;Comment&gt;(comment =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//以下操作同上</span></span><br><span class="line">            comment.HasKey(x =&gt; x.Id);</span><br><span class="line">            comment.HasOne(x =&gt; x.Book).WithMany(x =&gt; x.Comments).HasForeignKey(x =&gt; x.BookId);</span><br><span class="line">            comment.ToTable(<span class="string">&quot;Comments&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">base</span>.OnModelCreating(modelBuilder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在startup的ConfigureServices方法中添加一个依赖注入：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddDbContext&lt;MyDB&gt;(x =&gt; x.UseSqlServer(Configuration.GetConnectionString(<span class="string">&quot;default&quot;</span>)));</span><br></pre></td></tr></table></figure>
<p>创建Dto传输实体类：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookDto</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> BookName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建AutoMapper配置类：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AutoMapperConfiguration</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//一个静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initializeMapper</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        Mapper.Initialize(map =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建映射关系</span></span><br><span class="line">            map.CreateMap&lt;Book, BookDto&gt;()</span><br><span class="line">                <span class="comment">//映射属性</span></span><br><span class="line">                .ForMember(dest =&gt; dest.Id, opt =&gt; opt.MapFrom(src =&gt; src.Id))</span><br><span class="line">                .ForMember(dest =&gt; dest.BookName,opt=&gt;opt.MapFrom(src=&gt;src.BookName));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在startup的Configure方法中加入静态方法调用：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">AutoMapperConfiguration.initializeMapper();</span><br></pre></td></tr></table></figure>
<p>在程序包管理器控制台添加数据迁移，再更新数据库：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Add-Migration 迁移名称</span><br><span class="line">Update-Database</span><br></pre></td></tr></table></figure>
<p>在数据库中添加几条数据，运行程序，根据路由地址访问，得到相应的结果。</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>ASP.NET Core</tag>
        <tag>AutoMapper</tag>
        <tag>EntityFrameworkCore</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C#委托事件</title>
    <url>/2018/11/04/C#%E5%A7%94%E6%89%98%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<h2 id="什么是委托？"><a href="#什么是委托？" class="headerlink" title="什么是委托？##"></a>什么是委托？##</h2><p>C# 中的<strong>委托（Delegate）</strong>类似于 C 或 C++ 中函数的指针。<strong>委托（Delegate）</strong> 是存有对某个方法的引用的一种引用类型变量。引用可在运行时被改变。<br><strong>委托（Delegate）</strong>特别用于实现事件和回调方法。所有的<strong>委托（Delegate）</strong>都派生自 System.Delegate 类。</p>
<h2 id="什么是事件？"><a href="#什么是事件？" class="headerlink" title="什么是事件？##"></a>什么是事件？##</h2><p><strong>事件（Event）</strong> 基本上说是一个用户操作，如按键、点击、鼠标移动等等，或者是一些出现，如系统生成的通知。应用程序需要在事件发生时响应事件。例如，中断。事件是用于进程间通信。</p>
<h2 id="什么是委托事件？"><a href="#什么是委托事件？" class="headerlink" title="什么是委托事件？##"></a>什么是委托事件？##</h2><p>事件在类中声明且生成，且通过使用同一个类或其他类中的委托与事件处理程序关联。包含事件的类用于发布事件。这被称为 <strong>发布器（publisher）</strong> 类。其他接受该事件的类被称为 <strong>订阅器（subscriber）</strong> 类。事件使用 <strong>发布-订阅（publisher-subscriber）</strong>模型。<br><strong>发布器（publisher）</strong> 是一个包含事件和委托定义的对象。事件和委托之间的联系也定义在这个对象中。<strong>发布器（publisher）</strong>类的对象调用这个事件，并通知其他的对象。<br><strong>订阅器（subscriber）</strong> 是一个接受事件并提供事件处理程序的对象。在发布器（publisher）类中的委托调用<strong>订阅器（subscriber）</strong>类中的方法（事件处理程序）。</p>
</blockquote>
<a id="more"></a>
<p>先来一个委托的例子：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//声明委托</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Talk</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//实例化委托</span></span><br><span class="line">        Talk talk = <span class="keyword">new</span> Talk(SayMessage);</span><br><span class="line">        <span class="comment">//调用委托函数</span></span><br><span class="line">        talk(<span class="string">&quot;MachineGeek&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayMessage</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>声明委托，然后直接实例化，传方法名给委托就可以调用了。<br>委托支持多播，可以用“+”运算符合并，只有相同类型的委托才可以被合并。”-“ 运算符可用于从合并的委托中移除组件委托。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//声明委托</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Talk</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//实例化委托</span></span><br><span class="line">        Talk talk1 = <span class="keyword">new</span> Talk(SayHello);</span><br><span class="line">        Talk talk2 = <span class="keyword">new</span> Talk(SayMessage);</span><br><span class="line">        <span class="comment">//相加委托</span></span><br><span class="line">        talk1 += talk2;</span><br><span class="line">        <span class="comment">//多播调用</span></span><br><span class="line">        talk1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayHello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;欢迎大家来到我的博客！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayMessage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;MachineGeek&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>委托常用例子，常常用来初始化数据。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//声明委托</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Configration</span>(<span class="params">MyMessage message</span>)</span>;</span><br><span class="line">    <span class="comment">//声明MyMessage类属性</span></span><br><span class="line">    <span class="keyword">public</span> MyMessage Message &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//构造函数中初始化</span></span><br><span class="line">        Message = <span class="keyword">new</span> MyMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//参数是一个委托</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetName</span>(<span class="params">Configration config</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//调用委托</span></span><br><span class="line">        config(Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用来保存数据的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyMessage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Contact &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Num &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="comment">//传递一个委托</span></span><br><span class="line">        <span class="comment">//test.SetName(new Test.Configration(InIt));</span></span><br><span class="line">        test.SetName(InIt);</span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Contact:&quot;</span>+test.Message.Contact+ <span class="string">&quot;\tNum:&quot;</span> + test.Message.Num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InIt</span>(<span class="params">MyMessage message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        message.Contact = <span class="string">&quot;QQ&quot;</span>;</span><br><span class="line">        message.Num = <span class="number">794763733</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来咱们看一下委托事件：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//声明委托</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Configration</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="comment">//声明事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Configration ConfigrationEvents;</span><br><span class="line">    <span class="comment">//事件调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartEvent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ConfigrationEvents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//实例化一个Test对象</span></span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="comment">//事件添加一个委托</span></span><br><span class="line">        test.ConfigrationEvents += <span class="keyword">new</span> Test.Configration(SayHello);</span><br><span class="line">        <span class="comment">//可以直接简写</span></span><br><span class="line">        test.ConfigrationEvents += SayContact;</span><br><span class="line">        <span class="comment">//触发事件</span></span><br><span class="line">        test.StartEvent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayHello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello！欢迎来到我的博客！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayContact</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我的QQ是：794763733&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实多播和事件使用起来并没有多大差别，在Java中目前没有java这样的Delegate和Event的写法，但是利用接口或者多态还是可以实现，以上方式还可以结合Lambda一起用。</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Event Delegation</tag>
      </tags>
  </entry>
  <entry>
    <title>EntityFrameWork关系映射</title>
    <url>/2018/11/02/EntityFrameWork%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<h2 id="使用EntityFrameWork开发后台"><a href="#使用EntityFrameWork开发后台" class="headerlink" title="使用EntityFrameWork开发后台"></a>使用EntityFrameWork开发后台</h2><p><strong>网站照片示例：</strong><br><img src="https://store.machine-geek.cn/0010.jpg"><br><img src="https://store.machine-geek.cn/0011.jpg"></p>
<p>代码已经全部上传到Github，感兴趣的朋友可以自行下载。</p>
<a id="more"></a>
<p>后台：<code>.Net Core（C#）</code>、<code>Entity Framework Core</code>、<code>SQL Servere</code>。<br>前端：<code>Jquery</code>、<code>Vue</code>、<code>Layui</code>、<code>Axios</code>。</p>
<p><strong>EFCore的语法变更，所以贴一下项目中的实例代码：</strong><br>数据库关系映射：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CompanyWebSite.Areas.ManagementSystem.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EFContext</span> : <span class="title">DbContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EFContext</span>(<span class="params">DbContextOptions options</span>) : <span class="title">base</span>(<span class="params">options</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Manager&gt; Managers &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Industry&gt; Industries &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Color&gt; Colors &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Product&gt; Products &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Client&gt; Clients &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Case&gt; Cases &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;CaseImage&gt; CaseImages &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//管理人员表</span></span><br><span class="line">            modelBuilder.Entity&lt;Manager&gt;(manager =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                manager.HasKey(x =&gt; x.ID);</span><br><span class="line">                manager.ToTable(<span class="string">&quot;Manager&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//行业表</span></span><br><span class="line">            modelBuilder.Entity&lt;Industry&gt;(industry =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                industry.HasKey(x =&gt; x.ID);</span><br><span class="line">                industry.ToTable(<span class="string">&quot;Industry&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//行业与案例的中间表</span></span><br><span class="line">            modelBuilder.Entity&lt;IndustryCase&gt;(industryCase =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                industryCase.HasKey(x =&gt; <span class="keyword">new</span> &#123; x.IndustryID,x.CaseID&#125;);</span><br><span class="line">                industryCase.HasOne(x =&gt; x.Industry).WithMany(x =&gt; x.IndustryCases).HasForeignKey(x =&gt; x.IndustryID);</span><br><span class="line">                industryCase.HasOne(x =&gt; x.Case).WithMany(x =&gt; x.IndustryCases).HasForeignKey(x =&gt; x.CaseID);</span><br><span class="line">                industryCase.ToTable(<span class="string">&quot;IndustryCase&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//颜色表</span></span><br><span class="line">            modelBuilder.Entity&lt;Color&gt;(color =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                color.HasKey(x =&gt; x.ID);</span><br><span class="line">                color.ToTable(<span class="string">&quot;Color&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//颜色与案例的中间表</span></span><br><span class="line">            modelBuilder.Entity&lt;ColorCase&gt;(colorCase =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                colorCase.HasKey(x =&gt; <span class="keyword">new</span> &#123;x.ColorID, x.CaseID&#125;);</span><br><span class="line">                colorCase.HasOne(x =&gt; x.Color).WithMany(x =&gt; x.ColorCases).HasForeignKey(x =&gt; x.ColorID);</span><br><span class="line">                colorCase.HasOne(x =&gt; x.Case).WithMany(x =&gt; x.ColorCases).HasForeignKey(x =&gt; x.CaseID);</span><br><span class="line">                colorCase.ToTable(<span class="string">&quot;ColorCase&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//产品表</span></span><br><span class="line">            modelBuilder.Entity&lt;Product&gt;(product =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                product.HasKey(x =&gt; x.ID);</span><br><span class="line">                product.ToTable(<span class="string">&quot;Product&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//产品与案例的中间表</span></span><br><span class="line">            modelBuilder.Entity&lt;ProductCase&gt;(productCase =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                productCase.HasKey(x =&gt; <span class="keyword">new</span> &#123;x.ProductID,x.CaseID &#125;);</span><br><span class="line">                productCase.HasOne(x =&gt; x.Product).WithMany(x =&gt; x.ProductCases).HasForeignKey(x =&gt; x.ProductID);</span><br><span class="line">                productCase.HasOne(x =&gt; x.Case).WithMany(x =&gt; x.ProductCases).HasForeignKey(x =&gt; x.CaseID);</span><br><span class="line">                productCase.ToTable(<span class="string">&quot;ProductCase&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//客户端表</span></span><br><span class="line">            modelBuilder.Entity&lt;Client&gt;(client =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                client.HasKey(x =&gt; x.ID);</span><br><span class="line">                client.ToTable(<span class="string">&quot;Client&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//客户端与案例的中间表</span></span><br><span class="line">            modelBuilder.Entity&lt;ClientCase&gt;(clientCase =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                clientCase.HasKey(x =&gt; <span class="keyword">new</span> &#123;x.ClientID, x.CaseID&#125;);</span><br><span class="line">                clientCase.HasOne(x =&gt; x.Client).WithMany(x =&gt; x.ClientCases).HasForeignKey(x =&gt; x.ClientID);</span><br><span class="line">                clientCase.HasOne(x =&gt; x.Case).WithMany(x =&gt; x.ClientCases).HasForeignKey(x =&gt; x.CaseID);</span><br><span class="line">                clientCase.ToTable(<span class="string">&quot;ClientCase&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//案例表</span></span><br><span class="line">            modelBuilder.Entity&lt;Case&gt;(mcase =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                mcase.HasKey(x =&gt; x.ID);</span><br><span class="line">                mcase.HasMany(x =&gt; x.CaseImages).WithOne().HasForeignKey(x =&gt; x.CaseID);</span><br><span class="line">                mcase.ToTable(<span class="string">&quot;Case&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">base</span>.OnModelCreating(modelBuilder);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多对多增加操作：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">AddCase</span>(<span class="params">CaseAddRequest request</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TableResponse response = <span class="keyword">new</span> TableResponse();</span><br><span class="line">    <span class="comment">//开启事物</span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> trans = _db.Database.BeginTransaction())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建Case对象</span></span><br><span class="line">            <span class="keyword">var</span> @case = <span class="keyword">new</span> Case()</span><br><span class="line">            &#123;</span><br><span class="line">                Cover = request.Cover,</span><br><span class="line">                Name = request.Name,</span><br><span class="line">                IndustryCases = <span class="keyword">new</span> List&lt;IndustryCase&gt;(),</span><br><span class="line">                ColorCases = <span class="keyword">new</span> List&lt;ColorCase&gt;(),</span><br><span class="line">                ProductCases = <span class="keyword">new</span> List&lt;ProductCase&gt;(),</span><br><span class="line">                ClientCases = <span class="keyword">new</span> List&lt;ClientCase&gt;(),</span><br><span class="line">                CaseImages = <span class="keyword">new</span> List&lt;CaseImage&gt;()</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">//先存入Case对象</span></span><br><span class="line">            _db.Cases.Add(@case);</span><br><span class="line">            <span class="comment">//保存后会有ID</span></span><br><span class="line">            _db.SaveChanges();</span><br><span class="line">            <span class="comment">//存入行业关系</span></span><br><span class="line">            request.IndustryCases.ForEach(x =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                @case.IndustryCases.Add(<span class="keyword">new</span> IndustryCase()</span><br><span class="line">                &#123;</span><br><span class="line">                    IndustryID = <span class="built_in">int</span>.Parse(x)</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//存入颜色关系</span></span><br><span class="line">            request.ColorCases.ForEach(x =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                @case.ColorCases.Add(<span class="keyword">new</span> ColorCase()</span><br><span class="line">                &#123;</span><br><span class="line">                    ColorID = <span class="built_in">int</span>.Parse(x)</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//存入产品关系</span></span><br><span class="line">            request.ProductCases.ForEach(x =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                @case.ProductCases.Add(<span class="keyword">new</span> ProductCase()</span><br><span class="line">                &#123;</span><br><span class="line">                    ProductID = <span class="built_in">int</span>.Parse(x)</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//存入客户端关系</span></span><br><span class="line">            request.ClientCases.ForEach(x =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                @case.ClientCases.Add(<span class="keyword">new</span> ClientCase()</span><br><span class="line">                &#123;</span><br><span class="line">                    ClientID = <span class="built_in">int</span>.Parse(x)</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//存入详情图片</span></span><br><span class="line">            request.CaseImages.ForEach(x =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                @case.CaseImages.Add(<span class="keyword">new</span> CaseImage()</span><br><span class="line">                &#123;</span><br><span class="line">                    Path = x</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            response.Total =_db.SaveChanges();</span><br><span class="line">            trans.Commit();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//若执行失败事物回滚</span></span><br><span class="line">            trans.Rollback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Json(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多对多删除操作：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">DeleteCases</span>(<span class="params">List&lt;Case&gt; cases</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _db.Cases.RemoveRange(cases);</span><br><span class="line">    TableResponse response = <span class="keyword">new</span> TableResponse();</span><br><span class="line">    response.Total = _db.SaveChanges();</span><br><span class="line">    <span class="keyword">return</span> Json(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多对多更新操作：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">UpdateCase</span>(<span class="params">CaseAddRequest request</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TableResponse response = <span class="keyword">new</span> TableResponse();</span><br><span class="line">    <span class="comment">//开启事物</span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> trans = _db.Database.BeginTransaction())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//先查出来</span></span><br><span class="line">            <span class="keyword">var</span> @case = _db.Cases</span><br><span class="line">                .Include(x=&gt;x.CaseImages)</span><br><span class="line">                .Include(x=&gt;x.IndustryCases)</span><br><span class="line">                .Include(x=&gt;x.ColorCases)</span><br><span class="line">                .Include(x=&gt;x.ProductCases)</span><br><span class="line">                .Include(x=&gt;x.ClientCases)</span><br><span class="line">                .FirstOrDefault(x =&gt; x.ID == request.ID);</span><br><span class="line">            <span class="comment">//清空多对多关系</span></span><br><span class="line">            @case.CaseImages.Clear();</span><br><span class="line">            @case.IndustryCases.Clear();</span><br><span class="line">            @case.ColorCases.Clear();</span><br><span class="line">            @case.ProductCases.Clear();</span><br><span class="line">            @case.ClientCases.Clear();</span><br><span class="line">            <span class="comment">//修改值</span></span><br><span class="line">            @case.Cover = request.Cover;</span><br><span class="line">            @case.Name = request.Name;</span><br><span class="line">            <span class="comment">//存入行业关系</span></span><br><span class="line">            request.IndustryCases.ForEach(x =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                @case.IndustryCases.Add(<span class="keyword">new</span> IndustryCase()</span><br><span class="line">                &#123;</span><br><span class="line">                    IndustryID = <span class="built_in">int</span>.Parse(x)</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//存入颜色关系</span></span><br><span class="line">            request.ColorCases.ForEach(x =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                @case.ColorCases.Add(<span class="keyword">new</span> ColorCase()</span><br><span class="line">                &#123;</span><br><span class="line">                    ColorID = <span class="built_in">int</span>.Parse(x)</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//存入产品关系</span></span><br><span class="line">            request.ProductCases.ForEach(x =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                @case.ProductCases.Add(<span class="keyword">new</span> ProductCase()</span><br><span class="line">                &#123;</span><br><span class="line">                    ProductID = <span class="built_in">int</span>.Parse(x)</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//存入客户端关系</span></span><br><span class="line">            request.ClientCases.ForEach(x =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                @case.ClientCases.Add(<span class="keyword">new</span> ClientCase()</span><br><span class="line">                &#123;</span><br><span class="line">                    ClientID = <span class="built_in">int</span>.Parse(x)</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//存入详情图片</span></span><br><span class="line">            request.CaseImages.ForEach(x =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                @case.CaseImages.Add(<span class="keyword">new</span> CaseImage()</span><br><span class="line">                &#123;</span><br><span class="line">                    Path = x</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            _db.Cases.Update(@case);</span><br><span class="line">            response.Total = _db.SaveChanges();</span><br><span class="line">            trans.Commit();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.WriteLine(e.ToString());</span><br><span class="line">            <span class="comment">//若执行失败事物回滚</span></span><br><span class="line">            trans.Rollback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Json(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多对多查询操作：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">SelectCases</span>(<span class="params">CaseRequest request</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//EF Core 多对多关系查询</span></span><br><span class="line">    <span class="keyword">var</span> datas = _db.Cases</span><br><span class="line">        <span class="comment">/*筛选条件*/</span></span><br><span class="line">        .WhereIf(request.IndustryID != <span class="literal">null</span>, x =&gt; x.IndustryCases.Any(b =&gt; b.IndustryID == request.IndustryID))</span><br><span class="line">        .WhereIf(request.ColorID != <span class="literal">null</span>, x =&gt; x.ColorCases.Any(b =&gt; b.ColorID == request.ColorID))</span><br><span class="line">        .WhereIf(request.ProductID != <span class="literal">null</span>, x =&gt; x.ProductCases.Any(b =&gt; b.ProductID == request.ProductID))</span><br><span class="line">        .WhereIf(request.ClientID != <span class="literal">null</span>, x =&gt; x.ClientCases.Any(b =&gt; b.ClientID == request.ClientID))</span><br><span class="line">        <span class="comment">/*包含关系*/</span></span><br><span class="line">        .Include(x =&gt; x.IndustryCases)</span><br><span class="line">        .Include(x =&gt; x.ColorCases)</span><br><span class="line">        .Include(x =&gt; x.ProductCases)</span><br><span class="line">        .Include(x =&gt; x.ClientCases)</span><br><span class="line">        <span class="comment">/*选择属性*/</span></span><br><span class="line">        .Select(x =&gt; <span class="keyword">new</span></span><br><span class="line">        &#123;</span><br><span class="line">            x.ID,</span><br><span class="line">            x.Name,</span><br><span class="line">            x.Cover,</span><br><span class="line">            Industries = x.IndustryCases.Select(i =&gt; <span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                i.Industry.ID,</span><br><span class="line">                i.Industry.Name</span><br><span class="line">            &#125;),</span><br><span class="line">            Colors = x.ColorCases.Select(c =&gt; <span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                c.Color.ID,</span><br><span class="line">                c.Color.Name,</span><br><span class="line">                c.Color.Value</span><br><span class="line">            &#125;),</span><br><span class="line">            Products = x.ProductCases.Select(p=&gt; <span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                p.Product.ID,</span><br><span class="line">                p.Product.Name</span><br><span class="line">            &#125;),</span><br><span class="line">            Clients = x.ClientCases.Select(c=&gt;<span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                c.Client.ID,</span><br><span class="line">                c.Client.Name</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    CaseResponse response = <span class="keyword">new</span> CaseResponse();</span><br><span class="line"></span><br><span class="line">    response.IndustryID = request.IndustryID;</span><br><span class="line">    response.ColorID = request.ColorID;</span><br><span class="line">    response.ProductID = request.ProductID;</span><br><span class="line">    response.ClientID = request.ClientID;</span><br><span class="line">    response.Page = request.Page;</span><br><span class="line">    response.Limit = request.Limit;</span><br><span class="line">    response.Total = datas.Count();</span><br><span class="line"></span><br><span class="line">    response.Data = datas.OrderBy(x =&gt; x.ID).Skip((request.Page - <span class="number">1</span>) * request.Limit).Take(request.Limit).ToList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Json(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>BackEnd</tag>
        <tag>EntityFramework</tag>
        <tag>.NetCore</tag>
        <tag>ORM</tag>
      </tags>
  </entry>
  <entry>
    <title>.Net运用EPPlus操作Excel</title>
    <url>/2018/09/28/Net%E8%BF%90%E7%94%A8EPPlus%E5%AF%BC%E5%87%BAExcel%E8%A1%A8/</url>
    <content><![CDATA[<p>记录一次开发内容,前两天写了两个后台管理表，要求做一个导出成Excel的功能，这个是用后台使用C#写的，然后用了EPPlus框架导出了Excel表，用输出流返回就可以了，如下：</p>
<a id="more"></a>
<p>这样的两个订单功能及导出Excel，由于懒得把CSS和JS区分成文件，直接写在一个文件里面了，下面贴上代码，这是前端的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@using GL.Tools</span><br><span class="line">@using Newtonsoft.Json</span><br><span class="line">@using TengYe.Core.Data.Common.Enums</span><br><span class="line">@model TengYe.Web.Portal.Areas.Business.Models.ResultTemplate</span><br><span class="line">@&#123;</span><br><span class="line">    Layout = null;</span><br><span class="line">    var mealOrderStats = ((IEnumerable<span class="tag">&lt;<span class="name">MealOrderState</span>&gt;</span>) Enum.GetValues(typeof(MealOrderState))).Select(x =&gt; new</span><br><span class="line">    &#123;</span><br><span class="line">        Text = x.GetDescription(),</span><br><span class="line">        Value = (int)x</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>外卖数据表子页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.5.17-beta.0/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;~/Areas/Admin/Content/Scripts/layui/css/layui.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            border-width: 0px;</span><br><span class="line">            margin: 0px;</span><br><span class="line">            padding: 0px;</span><br><span class="line">        &#125;</span><br><span class="line">        body &#123;</span><br><span class="line">            background-color: rgb(237,237,237)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.setting-area</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 17vh;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#009688</span>;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            top: 0px;</span><br><span class="line">            z-index: 1;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.setting-area</span> <span class="selector-class">.state-area</span> &#123;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.setting-area</span> <span class="selector-class">.select-style</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 38px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.setting-area</span> <span class="selector-class">.datetime-area</span> &#123;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.setting-area</span> <span class="selector-class">.datetime-area</span> <span class="selector-class">.datetime-wh</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.setting-area</span> <span class="selector-class">.search-area</span> &#123;</span></span><br><span class="line">            height: 50px;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.setting-area</span> <span class="selector-class">.page-area</span> &#123;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> &#123;</span></span><br><span class="line">            width: 70%;</span><br><span class="line">            margin: 17vh auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            margin-top: 20px;</span><br><span class="line">            border-radius: 13px;</span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.head-style</span> &#123;</span></span><br><span class="line">            border-radius: 13px 13px 0px 0px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-header</span> <span class="selector-class">.order-basic</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-header</span> <span class="selector-class">.order-basic</span> <span class="selector-class">.basic-style</span> &#123;</span></span><br><span class="line">            font-weight: bold;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 270px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.text-left</span> &#123;</span></span><br><span class="line">            text-align: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.text-right</span> &#123;</span></span><br><span class="line">            text-align: right;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-content</span> &#123;</span></span><br><span class="line">            margin-top: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-content</span> <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line">            width: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-content</span> <span class="selector-class">.basic-style</span> &#123;</span></span><br><span class="line">            width: 250px;</span><br><span class="line">            margin-left: 20px;</span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-count</span> &#123;</span></span><br><span class="line">            margin-top: 20px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-count</span> <span class="selector-class">.basic-style</span> &#123;</span></span><br><span class="line">            width: 320px;</span><br><span class="line">            margin-left: 20px;</span><br><span class="line">            margin-right: 20px;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            color: rgb(231,166,47);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-count</span> <span class="selector-class">.state-style1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#009688</span>;</span></span><br><span class="line">            font-size: 15px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--工具区域--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;setting-area&quot;</span> <span class="attr">id</span>=<span class="string">&quot;setting-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--订单状态区域--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;state-area layui-form&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">lay-filter</span>=<span class="string">&quot;state&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>订单状态<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>正在点餐<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>未支付<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>已支付<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>商家已接单<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>骑手已接单<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span>骑手取消接单<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span>&gt;</span>配送中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span>已完成<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>&gt;</span>已关闭<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--时间筛选区域--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;datetime-area&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;layui-input datetime-wh&quot;</span> <span class="attr">id</span>=<span class="string">&quot;filter-date&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;筛选订单日期时间&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关键字搜索区域--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-area&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;订单号、联系人、手机&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--按钮区域--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-bg-orange&quot;</span> @@<span class="attr">click</span>=<span class="string">&quot;search&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-bg-orange&quot;</span> @@<span class="attr">click</span>=<span class="string">&quot;exportExcel&quot;</span>&gt;</span>导出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--页数区域--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-area&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;page-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--item的容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-area&quot;</span> <span class="attr">id</span>=<span class="string">&quot;item-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--面板--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card card-wh&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;order in orders&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--面板头内容--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-header head-style&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;order-basic&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-left&quot;</span>&gt;</span>订单号：&#123;&#123;order.orderNo&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-right&quot;</span>&gt;</span>联系人：&#123;&#123;order.contact&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-right&quot;</span>&gt;</span>联系电话：&#123;&#123;order.phone&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-right&quot;</span>&gt;</span>成交时间：&#123;&#123;order.creationTime&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--面板体内容--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-content&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in order.items&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.mealCover + &#x27;.70x60.jpg&#x27;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-left&quot;</span>&gt;</span>&#123;&#123;item.mealName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-left&quot;</span>&gt;</span>单价金币：&#123;&#123;item.unitGoldCoin&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-left&quot;</span>&gt;</span>购买数量：&#123;&#123;item.number&#125;&#125;件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-right&quot;</span>&gt;</span>小计：&#123;&#123;item.unitGoldCoin * item.number&#125;&#125;金币<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--面板统计内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-count&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>总数量：&#123;&#123;order.numberCout&#125;&#125;件<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>总计：&#123;&#123;order.unitGoldCoinCount&#125;&#125;金币<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;state-style1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>订单状态：&#123;&#123;getStateName(order.state)&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/Areas/Admin/Content/Scripts/layui/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    layui.use([<span class="string">&#x27;layer&#x27;</span>, <span class="string">&#x27;form&#x27;</span>, <span class="string">&#x27;laydate&#x27;</span>,<span class="string">&#x27;laypage&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> layer = layui.layer;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> laydate = layui.laydate;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> form = layui.form;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> laypage = layui.laypage;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                page: 1,</span><br><span class="line">                pageSize: 10,</span><br><span class="line"><span class="javascript">                first: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                orders: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                pages: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                keyWord: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                index: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                startDate: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                endDate: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                state: <span class="literal">null</span>,</span></span><br><span class="line">                status: @Html.Raw(JsonConvert.SerializeObject(mealOrderStats)),</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> that = <span class="built_in">this</span>;</span></span><br><span class="line">                that.getOrders();</span><br><span class="line">                form.render();</span><br><span class="line"><span class="javascript">                form.on(<span class="string">&#x27;select(state)&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">                    that.state = data.value;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">                getOrders: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">                    axios.get(<span class="string">&quot;@Url.Action(&quot;</span>TabData<span class="string">&quot;, &quot;</span>TakeoutOrder<span class="string">&quot;)&quot;</span>,</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                params: &#123;</span><br><span class="line">                                    page: that.page,</span><br><span class="line">                                    pageSize: that.pageSize,</span><br><span class="line">                                    keyWord: that.keyWord,</span><br><span class="line">                                    startDate: that.startDate,</span><br><span class="line">                                    endDate: that.endDate,</span><br><span class="line">                                    state: that.state</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;)</span><br><span class="line"><span class="javascript">                        .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//请求成功的回调</span></span></span><br><span class="line">                            that.orders = response.data.data;</span><br><span class="line">                            that.pages = response.data.page;</span><br><span class="line">                            that.index = response.data.index;</span><br><span class="line">                            laypage.render(&#123;</span><br><span class="line"><span class="javascript">                                elem: <span class="string">&#x27;page-container&#x27;</span>,</span></span><br><span class="line">                                limit: response.data.row,</span><br><span class="line">                                count: response.data.dataCount,</span><br><span class="line">                                curr: response.data.index,</span><br><span class="line"><span class="javascript">                                jump: <span class="function"><span class="keyword">function</span> (<span class="params">obj, first</span>) </span>&#123;</span></span><br><span class="line">                                    if (!first) &#123;</span><br><span class="line">                                        that.page = obj.curr;</span><br><span class="line">                                        that.getOrders();</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line"><span class="javascript">                            layer.msg(<span class="string">&#x27;刷新成功！&#x27;</span>);</span></span><br><span class="line">                        &#125;)</span><br><span class="line"><span class="javascript">                        .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            layer.msg(<span class="string">&#x27;请求错误！&#x27;</span>);</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                search: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.page = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.getOrders();</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                getStateName: <span class="function"><span class="keyword">function</span>(<span class="params">state</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> status = <span class="built_in">this</span>.status;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; status.length; i++) &#123;</span></span><br><span class="line">                        if (state == status[i].value) &#123;</span><br><span class="line"><span class="javascript">                            <span class="keyword">return</span> status[i].text;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                exportExcel: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> url = <span class="string">&quot;@Url.Action(&quot;</span>ExportExcel<span class="string">&quot;, &quot;</span>TakeoutOrder<span class="string">&quot;)?keyWord=&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">escape</span>(that.keyWord || <span class="string">&quot;&quot;</span>) +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&amp;startDate=&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        (that.startDate || <span class="string">&quot;&quot;</span>) +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&amp;endDate=&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        (that.endDate || <span class="string">&quot;&quot;</span>) +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&amp;state=&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        (that.state || <span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.open(url);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="comment">//日期时间选择器</span></span></span><br><span class="line">        laydate.render(&#123;</span><br><span class="line"><span class="javascript">            elem: <span class="string">&#x27;#filter-date&#x27;</span>,<span class="comment">//指定元素</span></span></span><br><span class="line"><span class="javascript">            type: <span class="string">&#x27;date&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            range: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            format: <span class="string">&#x27;yyyy-MM-dd&#x27;</span>,</span></span><br><span class="line">            zIndex: 99999999,</span><br><span class="line"><span class="javascript">            done: <span class="function"><span class="keyword">function</span> (<span class="params">value, date, endDate</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                app.startDate = date.year + <span class="string">&quot;-&quot;</span> + date.month + <span class="string">&quot;-&quot;</span> + date.date;</span></span><br><span class="line"><span class="javascript">                app.endDate = endDate.year + <span class="string">&quot;-&quot;</span> + endDate.month + <span class="string">&quot;-&quot;</span> + endDate.date;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>后台代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data.Entity.Core.Common.CommandTrees;</span><br><span class="line"><span class="keyword">using</span> System.Data.Entity.Core.Metadata.Edm;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"><span class="keyword">using</span> GL.Tools;</span><br><span class="line"><span class="keyword">using</span> OfficeOpenXml;</span><br><span class="line"><span class="keyword">using</span> OfficeOpenXml.Style;</span><br><span class="line"><span class="keyword">using</span> TengYe.Core.Data;</span><br><span class="line"><span class="keyword">using</span> TengYe.Core.Data.Common.Enums;</span><br><span class="line"><span class="keyword">using</span> TengYe.Core.Data.Entities;</span><br><span class="line"><span class="keyword">using</span> TengYe.EF.Extends;</span><br><span class="line"><span class="keyword">using</span> TengYe.Web.Portal.Areas.Business.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TengYe.Web.Portal.Areas.Business.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TakeoutOrderController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IDbContext _dbContext;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TakeoutOrderController</span>(<span class="params">IDbContext dbContext</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _dbContext = dbContext;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> View();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// GET</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> JsonResult <span class="title">TabData</span>(<span class="params"><span class="built_in">int</span> page, <span class="built_in">int</span> pageSize, <span class="built_in">string</span> keyWord, DateTime? startDate, DateTime? endDate,</span></span></span><br><span class="line"><span class="function"><span class="params">            MealOrderState? state</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            endDate = endDate?.AddDays(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">new</span> ResultTemplate();</span><br><span class="line">            result.Index = page;</span><br><span class="line">            result.Row = pageSize;</span><br><span class="line">            <span class="keyword">var</span> datas = _dbContext.Set&lt;MealOrder&gt;()</span><br><span class="line">                .Where(order =&gt; order.Type == MealOrderType.Takeout)</span><br><span class="line">                .WhereIf(state != <span class="literal">null</span>, x =&gt; x.State == state)</span><br><span class="line">                .WhereIf(startDate != <span class="literal">null</span> &amp;&amp; endDate != <span class="literal">null</span>,</span><br><span class="line">                    x =&gt; x.CreationTime &gt;= startDate &amp;&amp; x.CreationTime &lt; endDate)</span><br><span class="line">                .WhereIf(!<span class="built_in">string</span>.IsNullOrEmpty(keyWord),</span><br><span class="line">                    x =&gt; x.OrderNo == keyWord || x.Phone == keyWord || x.Contact == keyWord);</span><br><span class="line">            <span class="keyword">var</span> count = datas.Count();</span><br><span class="line">            result.DataCount = count;</span><br><span class="line">            result.Page = count == <span class="number">0</span> ? <span class="number">0</span> :</span><br><span class="line">                count &lt; pageSize ? <span class="number">1</span> :</span><br><span class="line">                count % result.Row == <span class="number">0</span> ? count / result.Row : count / result.Row + <span class="number">1</span>;</span><br><span class="line">            result.Data = datas.Select(order =&gt; <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    order.Id,</span><br><span class="line">                    order.Address,</span><br><span class="line">                    order.Contact,</span><br><span class="line">                    order.OrderNo,</span><br><span class="line">                    order.State,</span><br><span class="line">                    order.Phone,</span><br><span class="line">                    Items = order.Items.Select(x =&gt; <span class="keyword">new</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        x.Id,</span><br><span class="line">                        x.MealName,</span><br><span class="line">                        x.MealCover,</span><br><span class="line">                        x.MemberId,</span><br><span class="line">                        x.UnitGoldCoin,</span><br><span class="line">                        x.Number,</span><br><span class="line">                        x.MealOrderId</span><br><span class="line">                    &#125;),</span><br><span class="line">                    NumberCout = order.Items.Sum(x =&gt; x.Number),</span><br><span class="line">                    UnitGoldCoinCount = order.Items.Sum(x =&gt; x.UnitGoldCoin),</span><br><span class="line">                    order.Type,</span><br><span class="line">                    Rider = <span class="keyword">new</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        Id = order.Rider != <span class="literal">null</span> ? order.Rider.Id : (<span class="built_in">int</span>?) <span class="literal">null</span>,</span><br><span class="line">                        NickName = order.Rider != <span class="literal">null</span> ? order.Rider.NickName : <span class="built_in">string</span>.Empty</span><br><span class="line">                    &#125;,</span><br><span class="line">                    PaymentMember = <span class="keyword">new</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        Id = order.PaymentMember != <span class="literal">null</span> ? order.PaymentMember.Id : (<span class="built_in">int</span>?) <span class="literal">null</span>,</span><br><span class="line">                        NickName = order.PaymentMember != <span class="literal">null</span> ? order.PaymentMember.NickName : <span class="built_in">string</span>.Empty</span><br><span class="line">                    &#125;,</span><br><span class="line">                    Ids = order.ParticipatingMembers.Select(x =&gt; <span class="keyword">new</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        x.Id,</span><br><span class="line">                        x.NickName,</span><br><span class="line">                    &#125;),</span><br><span class="line">                    OrderState = order.State,</span><br><span class="line">                    order.CreationTime</span><br><span class="line">                &#125;</span><br><span class="line">            ).OrderByDescending(x =&gt; x.Id).Skip((page - <span class="number">1</span>) * pageSize).Take(pageSize).ToList();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LowerCamelJsonResult(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FileResult <span class="title">ExportExcel</span>(<span class="params"><span class="built_in">string</span> keyWord, DateTime? startDate, DateTime? endDate, MealOrderState? state</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            endDate = endDate?.AddDays(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">var</span> datas = _dbContext.Set&lt;MealOrder&gt;()</span><br><span class="line">                .Where(order =&gt; order.Type == MealOrderType.Takeout)</span><br><span class="line">                .WhereIf(state != <span class="literal">null</span>, x =&gt; x.State == state)</span><br><span class="line">                .WhereIf(startDate != <span class="literal">null</span> &amp;&amp; endDate != <span class="literal">null</span>,</span><br><span class="line">                    x =&gt; x.CreationTime &gt;= startDate &amp;&amp; x.CreationTime &lt; endDate)</span><br><span class="line">                .WhereIf(!<span class="built_in">string</span>.IsNullOrEmpty(keyWord),</span><br><span class="line">                    x =&gt; x.OrderNo == keyWord || x.Phone == keyWord || x.Contact == keyWord);</span><br><span class="line">            <span class="keyword">var</span> result = datas.Select(order =&gt; <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    order.Id,</span><br><span class="line">                    order.Address,</span><br><span class="line">                    order.Contact,</span><br><span class="line">                    order.OrderNo,</span><br><span class="line">                    order.State,</span><br><span class="line">                    order.Phone,</span><br><span class="line">                    Items = order.Items.Select(x =&gt; <span class="keyword">new</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        x.Id,</span><br><span class="line">                        x.MealName,</span><br><span class="line">                        x.MealCover,</span><br><span class="line">                        x.MemberId,</span><br><span class="line">                        x.UnitGoldCoin,</span><br><span class="line">                        x.Number,</span><br><span class="line">                        x.MealOrderId</span><br><span class="line">                    &#125;),</span><br><span class="line">                    NumberCout = order.Items.Sum(x =&gt; x.Number),</span><br><span class="line">                    UnitGoldCoinCount = order.Items.Sum(x =&gt; x.UnitGoldCoin),</span><br><span class="line">                    order.Type,</span><br><span class="line">                    Rider = <span class="keyword">new</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        Id = order.Rider != <span class="literal">null</span> ? order.Rider.Id : (<span class="built_in">int</span>?) <span class="literal">null</span>,</span><br><span class="line">                        NickName = order.Rider != <span class="literal">null</span> ? order.Rider.NickName : <span class="built_in">string</span>.Empty</span><br><span class="line">                    &#125;,</span><br><span class="line">                    PaymentMember = <span class="keyword">new</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        Id = order.PaymentMember != <span class="literal">null</span> ? order.PaymentMember.Id : (<span class="built_in">int</span>?) <span class="literal">null</span>,</span><br><span class="line">                        NickName = order.PaymentMember != <span class="literal">null</span> ? order.PaymentMember.NickName : <span class="built_in">string</span>.Empty</span><br><span class="line">                    &#125;,</span><br><span class="line">                    Ids = order.ParticipatingMembers.Select(x =&gt; <span class="keyword">new</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        x.Id,</span><br><span class="line">                        x.NickName,</span><br><span class="line">                    &#125;),</span><br><span class="line">                    OrderState = order.State,</span><br><span class="line">                    order.CreationTime</span><br><span class="line">                &#125;</span><br><span class="line">            ).OrderByDescending(x =&gt; x.Id).ToList();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (MemoryStream strem = <span class="keyword">new</span> MemoryStream()) </span><br><span class="line">            <span class="keyword">using</span> (ExcelPackage package = <span class="keyword">new</span> ExcelPackage(strem))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> worksheet = package.Workbook.Worksheets.Add(<span class="string">&quot;第一页&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//Excel第一行列名</span></span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>].Value = <span class="string">&quot;订单号&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">2</span>].Value = <span class="string">&quot;联系人&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">3</span>].Value = <span class="string">&quot;联系电话&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">4</span>].Value = <span class="string">&quot;餐品&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">5</span>].Value = <span class="string">&quot;单价&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">6</span>].Value = <span class="string">&quot;数量&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">7</span>].Value = <span class="string">&quot;小计&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">8</span>].Value = <span class="string">&quot;总数量&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">9</span>].Value = <span class="string">&quot;总金额&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">10</span>].Value = <span class="string">&quot;订单时间&quot;</span>;</span><br><span class="line"></span><br><span class="line">                worksheet.Column(<span class="number">1</span>).Width = <span class="number">20</span>;</span><br><span class="line">                worksheet.Column(<span class="number">2</span>).Width = <span class="number">15</span>;</span><br><span class="line">                worksheet.Column(<span class="number">3</span>).Width = <span class="number">20</span>;</span><br><span class="line">                worksheet.Column(<span class="number">4</span>).Width = <span class="number">15</span>;</span><br><span class="line">                worksheet.Column(<span class="number">5</span>).Width = <span class="number">15</span>;</span><br><span class="line">                worksheet.Column(<span class="number">6</span>).Width = <span class="number">15</span>;</span><br><span class="line">                worksheet.Column(<span class="number">7</span>).Width = <span class="number">15</span>;</span><br><span class="line">                worksheet.Column(<span class="number">8</span>).Width = <span class="number">20</span>;</span><br><span class="line">                worksheet.Column(<span class="number">9</span>).Width = <span class="number">15</span>;</span><br><span class="line">                worksheet.Column(<span class="number">10</span>).Width = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span> row = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; result.Count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> item = result[i].Items.ToArray();</span><br><span class="line">                    <span class="keyword">var</span> lg = item.Length;</span><br><span class="line"></span><br><span class="line">                    worksheet.Cells[row, <span class="number">1</span>, row + lg - <span class="number">1</span>, <span class="number">1</span>].Merge = <span class="literal">true</span>;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">2</span>, row + lg - <span class="number">1</span>, <span class="number">2</span>].Merge = <span class="literal">true</span>;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">3</span>, row + lg - <span class="number">1</span>, <span class="number">3</span>].Merge = <span class="literal">true</span>;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">8</span>, row + lg - <span class="number">1</span>, <span class="number">8</span>].Merge = <span class="literal">true</span>;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">9</span>, row + lg - <span class="number">1</span>, <span class="number">9</span>].Merge = <span class="literal">true</span>;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">10</span>, row + lg - <span class="number">1</span>, <span class="number">10</span>].Merge = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                    worksheet.Cells[row, <span class="number">1</span>].Value = result[i].OrderNo;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">2</span>].Value = result[i].Contact;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">3</span>].Value = result[i].Phone;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">8</span>].Value = result[i].NumberCout;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">9</span>].Value = result[i].UnitGoldCoinCount;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">10</span>].Value = result[i].CreationTime.ToString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; item.Length; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        worksheet.Row(row).Height = <span class="number">20</span>;</span><br><span class="line">                        worksheet.Cells[row, <span class="number">4</span>].Value = item[j].MealName;</span><br><span class="line">                        worksheet.Cells[row, <span class="number">5</span>].Value = item[j].UnitGoldCoin;</span><br><span class="line">                        worksheet.Cells[row, <span class="number">6</span>].Value = item[j].Number;</span><br><span class="line">                        worksheet.Cells[row, <span class="number">7</span>].Value = item[j].Number * item[j].UnitGoldCoin;</span><br><span class="line">                        row++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>].Style.Font.Bold = <span class="literal">true</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>].Style.Font.Color.SetColor(Color.White);</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>].Style.Fill.PatternType = ExcelFillStyle.Solid;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(<span class="number">0</span>, <span class="number">150</span>, <span class="number">136</span>));</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>, row - <span class="number">1</span>, <span class="number">10</span>].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;<span class="comment">//水平居中</span></span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>, row - <span class="number">1</span>, <span class="number">10</span>].Style.VerticalAlignment = ExcelVerticalAlignment.Center;<span class="comment">//垂直居中</span></span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>, row - <span class="number">1</span>, <span class="number">10</span>].Style.Border.BorderAround(ExcelBorderStyle.Thin, Color.Black);</span><br><span class="line"></span><br><span class="line">                package.Save();</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> File(strem.ToArray(), <span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>,<span class="string">&quot;外卖表.xlsx&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另一张表，前端：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@using GL.Tools</span><br><span class="line">@using Newtonsoft.Json</span><br><span class="line">@using TengYe.Core.Data.Common.Enums</span><br><span class="line">@model TengYe.Web.Portal.Areas.Business.Models.ResultTemplate</span><br><span class="line">@&#123;</span><br><span class="line">    Layout = null;</span><br><span class="line">    var mealOrderStats = ((IEnumerable<span class="tag">&lt;<span class="name">MealOrderState</span>&gt;</span>) Enum.GetValues(typeof(MealOrderState))).Select(x =&gt; new</span><br><span class="line">    &#123;</span><br><span class="line">        Text = x.GetDescription(),</span><br><span class="line">        Value = (int)x</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>点餐数据表子页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.5.17-beta.0/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;~/Areas/Admin/Content/Scripts/layui/css/layui.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            border-width: 0px;</span><br><span class="line">            margin: 0px;</span><br><span class="line">            padding: 0px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            background-color: rgb(237,237,237)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.setting-area</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 17vh;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#009688</span>;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            top: 0px;</span><br><span class="line">            z-index: 1;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.setting-area</span> <span class="selector-class">.state-area</span> &#123;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.setting-area</span> <span class="selector-class">.select-style</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 38px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.setting-area</span> <span class="selector-class">.datetime-area</span> &#123;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.setting-area</span> <span class="selector-class">.datetime-area</span> <span class="selector-class">.datetime-wh</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.setting-area</span> <span class="selector-class">.search-area</span> &#123;</span></span><br><span class="line">            height: 50px;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.setting-area</span> <span class="selector-class">.page-area</span> &#123;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> &#123;</span></span><br><span class="line">            width: 70%;</span><br><span class="line">            margin: 17vh auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            margin-top: 20px;</span><br><span class="line">            border-radius: 13px;</span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.head-style</span> &#123;</span></span><br><span class="line">            border-radius: 13px 13px 0px 0px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-header</span> <span class="selector-class">.order-basic</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-header</span> <span class="selector-class">.order-basic</span> <span class="selector-class">.basic-style</span> &#123;</span></span><br><span class="line">            font-weight: bold;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 210px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.text-left</span> &#123;</span></span><br><span class="line">            text-align: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.text-right</span> &#123;</span></span><br><span class="line">            text-align: right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.text-center</span> &#123;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-content</span> &#123;</span></span><br><span class="line">            margin-top: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-content</span> <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line">            width: 50px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-content</span> <span class="selector-class">.basic-style</span> &#123;</span></span><br><span class="line">            width: 235px;</span><br><span class="line">            margin-left: 20px;</span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-guys</span> &#123;</span></span><br><span class="line">            margin-top: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-guys</span> <span class="selector-class">.guy</span> &#123;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 100px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-guys</span> <span class="selector-class">.guy</span> <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line">            width: 40%;</span><br><span class="line">            border-radius: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#009688</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-guys</span> <span class="selector-class">.guy</span> <span class="selector-class">.basic-style</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-count</span> &#123;</span></span><br><span class="line">            margin-top: 20px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-count</span> <span class="selector-class">.basic-style</span> &#123;</span></span><br><span class="line">            width: 320px;</span><br><span class="line">            margin-left: 20px;</span><br><span class="line">            margin-right: 20px;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            color: rgb(231,166,47);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item-area</span> <span class="selector-class">.card-wh</span> <span class="selector-class">.layui-card-body</span> <span class="selector-class">.item-count</span> <span class="selector-class">.state-style1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#009688</span>;</span></span><br><span class="line">            font-size: 15px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--工具区域--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;setting-area&quot;</span> <span class="attr">id</span>=<span class="string">&quot;setting-container&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--订单状态区域--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;state-area layui-form&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">select</span> <span class="attr">lay-filter</span>=<span class="string">&quot;state&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>订单状态<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>正在点餐<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>未支付<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>已支付<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>商家已接单<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>骑手已接单<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span>骑手取消接单<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span>&gt;</span>配送中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span>已完成<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>&gt;</span>已关闭<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--时间筛选区域--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;datetime-area&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;layui-input datetime-wh&quot;</span> <span class="attr">id</span>=<span class="string">&quot;filter-date&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;筛选订单日期时间&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--关键字筛选区域--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-area&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;订单号、联系人、手机&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--按钮区域--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-bg-orange&quot;</span> @@<span class="attr">click</span>=<span class="string">&quot;search&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-bg-orange&quot;</span> @@<span class="attr">click</span>=<span class="string">&quot;exportExcel&quot;</span>&gt;</span>导出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--页数区域--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-area&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;page-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--item的容器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-area&quot;</span> <span class="attr">id</span>=<span class="string">&quot;item-container&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--面板--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card card-wh&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;order in orders&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--面板头内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-header head-style&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;order-basic&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-left&quot;</span>&gt;</span>订单号：&#123;&#123;order.orderNo&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-center&quot;</span>&gt;</span>餐桌：&#123;&#123;order.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-center&quot;</span>&gt;</span>支付用户：&#123;&#123;order.paymentMember.nickName==&quot;&quot;?&quot;暂无&quot;:order.paymentMember.nickName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-center&quot;</span>&gt;</span>支付者ID：&#123;&#123;order.paymentMember.id==&quot;&quot;?&quot;暂无&quot;:order.paymentMember.id&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-right&quot;</span>&gt;</span>成交时间：&#123;&#123;order.creationTime&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--面板体内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-card-body&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--购买内容--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-content&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in order.items&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.mealCover + &#x27;.70x60.jpg&#x27;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-left&quot;</span>&gt;</span>&#123;&#123;item.mealName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-left&quot;</span>&gt;</span>单价金币：&#123;&#123;item.unitGoldCoin&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-left&quot;</span>&gt;</span>购买数量：&#123;&#123;item.number&#125;&#125;件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-right&quot;</span>&gt;</span>小计：&#123;&#123;item.unitGoldCoin * item.number&#125;&#125;金币<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--参与购买的人--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">hr</span> <span class="attr">v-if</span>=<span class="string">&quot;order.ids.length&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-guys&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;guy&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;guy in order.ids&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;guy.avatar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style text-center&quot;</span>&gt;</span>&#123;&#123;guy.nickName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--面板统计内容--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-count&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>总数量：&#123;&#123;order.numberCout&#125;&#125;件<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic-style&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>总计：&#123;&#123;order.unitGoldCoinCount&#125;&#125;金币<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;state-style1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>订单状态：&#123;&#123;getStateName(order.state)&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/Areas/Admin/Content/Scripts/layui/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    layui.use([<span class="string">&#x27;layer&#x27;</span>, <span class="string">&#x27;form&#x27;</span>, <span class="string">&#x27;laydate&#x27;</span>,<span class="string">&#x27;laypage&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> layer = layui.layer;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> laydate = layui.laydate;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> form = layui.form;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> laypage = layui.laypage;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                page: 1,</span><br><span class="line">                pageSize: 10,</span><br><span class="line"><span class="javascript">                orders: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                pages: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                keyWord: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                index: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                startDate: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                endDate: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                state: <span class="literal">null</span>,</span></span><br><span class="line">                status: @Html.Raw(JsonConvert.SerializeObject(mealOrderStats))</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> that = <span class="built_in">this</span>;</span></span><br><span class="line">                that.getOrders();</span><br><span class="line">                form.render();</span><br><span class="line"><span class="javascript">                form.on(<span class="string">&#x27;select(state)&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line">                    that.state = data.value;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">                getOrders: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">                    axios.get(<span class="string">&quot;@Url.Action(&quot;</span>TabData<span class="string">&quot;, &quot;</span>Order<span class="string">&quot;)&quot;</span>,</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                params: &#123;</span><br><span class="line">                                    page: that.page,</span><br><span class="line">                                    pageSize: that.pageSize,</span><br><span class="line">                                    keyWord: that.keyWord,</span><br><span class="line">                                    startDate: that.startDate,</span><br><span class="line">                                    endDate: that.endDate,</span><br><span class="line">                                    state: that.state</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;)</span><br><span class="line"><span class="javascript">                        .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//请求成功的回调</span></span></span><br><span class="line">                            that.orders = response.data.data;</span><br><span class="line">                            that.pages = response.data.page;</span><br><span class="line">                            that.index = response.data.index;</span><br><span class="line">                            laypage.render(&#123;</span><br><span class="line"><span class="javascript">                                elem: <span class="string">&#x27;page-container&#x27;</span>,</span></span><br><span class="line">                                limit: response.data.row,</span><br><span class="line">                                count: response.data.dataCount,</span><br><span class="line">                                curr: response.data.index,</span><br><span class="line"><span class="javascript">                                jump: <span class="function"><span class="keyword">function</span> (<span class="params">obj, first</span>) </span>&#123;</span></span><br><span class="line">                                    if (!first) &#123;</span><br><span class="line">                                        that.page = obj.curr;</span><br><span class="line">                                        that.getOrders();</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line"><span class="javascript">                            layer.msg(<span class="string">&#x27;刷新成功！&#x27;</span>);</span></span><br><span class="line">                        &#125;)</span><br><span class="line"><span class="javascript">                        .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            layer.msg(<span class="string">&#x27;请求错误！&#x27;</span>);</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                search: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.page = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.getOrders();</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                getStateName: <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> status = <span class="built_in">this</span>.status;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; status.length; i++) &#123;</span></span><br><span class="line">                        if (state == status[i].value) &#123;</span><br><span class="line"><span class="javascript">                            <span class="keyword">return</span> status[i].text;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                exportExcel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> url = <span class="string">&quot;@Url.Action(&quot;</span>ExportExcel<span class="string">&quot;, &quot;</span>Order<span class="string">&quot;)?keyWord=&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">escape</span>(that.keyWord || <span class="string">&quot;&quot;</span>) +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&amp;startDate=&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        (that.startDate || <span class="string">&quot;&quot;</span>) +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&amp;endDate=&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        (that.endDate || <span class="string">&quot;&quot;</span>) +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&amp;state=&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        (that.state || <span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.open(url);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="comment">//日期时间选择器</span></span></span><br><span class="line">        laydate.render(&#123;</span><br><span class="line"><span class="javascript">            elem: <span class="string">&#x27;#filter-date&#x27;</span>,<span class="comment">//指定元素</span></span></span><br><span class="line"><span class="javascript">            type: <span class="string">&#x27;date&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            range: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            format: <span class="string">&#x27;yyyy-MM-dd&#x27;</span>,</span></span><br><span class="line">            zIndex: 99999999,</span><br><span class="line"><span class="javascript">            done: <span class="function"><span class="keyword">function</span> (<span class="params">value, date, endDate</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                app.startDate = date.year + <span class="string">&quot;-&quot;</span> + date.month + <span class="string">&quot;-&quot;</span> + date.date;</span></span><br><span class="line"><span class="javascript">                app.endDate = endDate.year + <span class="string">&quot;-&quot;</span> + endDate.month + <span class="string">&quot;-&quot;</span> + endDate.date;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>后端：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"><span class="keyword">using</span> GL.Tools;</span><br><span class="line"><span class="keyword">using</span> OfficeOpenXml;</span><br><span class="line"><span class="keyword">using</span> OfficeOpenXml.Style;</span><br><span class="line"><span class="keyword">using</span> TengYe.Core.Data;</span><br><span class="line"><span class="keyword">using</span> TengYe.Core.Data.Common.Enums;</span><br><span class="line"><span class="keyword">using</span> TengYe.Core.Data.Entities;</span><br><span class="line"><span class="keyword">using</span> TengYe.EF.Extends;</span><br><span class="line"><span class="keyword">using</span> TengYe.Web.Portal.Areas.Business.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TengYe.Web.Portal.Areas.Business.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IDbContext _dbContext;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OrderController</span>(<span class="params">IDbContext dbContext</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _dbContext = dbContext;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// GET</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> View();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> JsonResult <span class="title">TabData</span>(<span class="params"><span class="built_in">int</span> page, <span class="built_in">int</span> pageSize, <span class="built_in">string</span> keyWord, DateTime? startDate, DateTime? endDate, MealOrderState? state</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            endDate = endDate?.AddDays(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">new</span> ResultTemplate();</span><br><span class="line">            result.Index = page;</span><br><span class="line">            result.Row = pageSize;</span><br><span class="line">            <span class="keyword">var</span> datas = _dbContext.Set&lt;MealOrder&gt;()</span><br><span class="line">                .Where(order =&gt; order.Type == MealOrderType.Order)</span><br><span class="line">                .WhereIf(state != <span class="literal">null</span>, x =&gt; x.State == state)</span><br><span class="line">                .WhereIf(startDate != <span class="literal">null</span> &amp;&amp; endDate != <span class="literal">null</span>,</span><br><span class="line">                    x =&gt; x.CreationTime &gt;= startDate &amp;&amp; x.CreationTime &lt; endDate)</span><br><span class="line">                .WhereIf(!<span class="built_in">string</span>.IsNullOrEmpty(keyWord),</span><br><span class="line">                    x =&gt; x.OrderNo == keyWord || x.Phone == keyWord || x.Contact == keyWord);</span><br><span class="line">            <span class="keyword">var</span> count = datas.Count();</span><br><span class="line">            result.DataCount = count;</span><br><span class="line">            result.Page = count == <span class="number">0</span> ? <span class="number">0</span> : count &lt; pageSize ? <span class="number">1</span> : count % result.Row == <span class="number">0</span> ? count / result.Row : count / result.Row + <span class="number">1</span>;</span><br><span class="line">            result.Data = datas.Select(order =&gt; <span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                order.Id,</span><br><span class="line">                order.Address,</span><br><span class="line">                order.Contact,</span><br><span class="line">                order.OrderNo,</span><br><span class="line">                order.State,</span><br><span class="line">                order.Phone,</span><br><span class="line">                Items = order.Items.Select(x =&gt; <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    x.Id,</span><br><span class="line">                    x.MealName,</span><br><span class="line">                    x.MealCover,</span><br><span class="line">                    x.MemberId,</span><br><span class="line">                    x.UnitGoldCoin,</span><br><span class="line">                    x.Number,</span><br><span class="line">                    x.MealOrderId</span><br><span class="line">                &#125;),</span><br><span class="line">                NumberCout = order.Items.Sum(x =&gt; x.Number),</span><br><span class="line">                UnitGoldCoinCount = order.Items.Sum(x =&gt; x.UnitGoldCoin),</span><br><span class="line">                order.Type,</span><br><span class="line">                Rider = <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Id = order.Rider != <span class="literal">null</span> ? order.Rider.Id : (<span class="built_in">int</span>?)<span class="literal">null</span>,</span><br><span class="line">                    NickName = order.Rider != <span class="literal">null</span> ? order.Rider.NickName : <span class="built_in">string</span>.Empty</span><br><span class="line">                &#125;,</span><br><span class="line">                order.DiningTable.Name,</span><br><span class="line">                PaymentMember = <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Id = order.PaymentMember != <span class="literal">null</span> ? order.PaymentMember.Id : (<span class="built_in">int</span>?)<span class="literal">null</span>,</span><br><span class="line">                    NickName = order.PaymentMember != <span class="literal">null</span> ? order.PaymentMember.NickName : <span class="built_in">string</span>.Empty,</span><br><span class="line">                &#125;,</span><br><span class="line">                Ids = order.ParticipatingMembers.Select(x =&gt; <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    x.Id,</span><br><span class="line">                    x.NickName,</span><br><span class="line">                    x.Avatar</span><br><span class="line">                &#125;),</span><br><span class="line">                OrderState = order.State,</span><br><span class="line">                <span class="comment">/*SateName = order.State.GetDescription(),*/</span></span><br><span class="line">                order.CreationTime</span><br><span class="line">            &#125;</span><br><span class="line">            ).OrderByDescending(x =&gt; x.Id).Skip((page - <span class="number">1</span>) * pageSize).Take(pageSize).ToList();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LowerCamelJsonResult(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FileResult <span class="title">ExportExcel</span>(<span class="params"><span class="built_in">string</span> keyWord, DateTime? startDate, DateTime? endDate, MealOrderState? state</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            endDate = endDate?.AddDays(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">var</span> datas = _dbContext.Set&lt;MealOrder&gt;()</span><br><span class="line">                .Where(order =&gt; order.Type == MealOrderType.Order)</span><br><span class="line">                .WhereIf(state != <span class="literal">null</span>, x =&gt; x.State == state)</span><br><span class="line">                .WhereIf(startDate != <span class="literal">null</span> &amp;&amp; endDate != <span class="literal">null</span>, x =&gt; x.CreationTime &gt;= startDate &amp;&amp; x.CreationTime &lt; endDate)</span><br><span class="line">                .WhereIf(!<span class="built_in">string</span>.IsNullOrEmpty(keyWord), x =&gt; x.OrderNo == keyWord || x.Phone == keyWord || x.Contact == keyWord)</span><br><span class="line">                .ToList();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> result = datas.Select(order =&gt; <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    order.Id,</span><br><span class="line">                    order.Address,</span><br><span class="line">                    order.Contact,</span><br><span class="line">                    order.OrderNo,</span><br><span class="line">                    order.State,</span><br><span class="line">                    order.Phone,</span><br><span class="line">                    Items = order.Items.Select(x =&gt; <span class="keyword">new</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        x.Id,</span><br><span class="line">                        x.MealName,</span><br><span class="line">                        x.MealCover,</span><br><span class="line">                        x.MemberId,</span><br><span class="line">                        x.UnitGoldCoin,</span><br><span class="line">                        x.Number,</span><br><span class="line">                        x.MealOrderId</span><br><span class="line">                    &#125;),</span><br><span class="line">                    NumberCout = order.Items.Sum(x =&gt; x.Number),</span><br><span class="line">                    UnitGoldCoinCount = order.Items.Sum(x =&gt; x.UnitGoldCoin),</span><br><span class="line">                    order.Type,</span><br><span class="line">                    Rider = <span class="keyword">new</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        Id = order.Rider != <span class="literal">null</span> ? order.Rider.Id : (<span class="built_in">int</span>?) <span class="literal">null</span>,</span><br><span class="line">                        NickName = order.Rider != <span class="literal">null</span> ? order.Rider.NickName : <span class="built_in">string</span>.Empty</span><br><span class="line">                    &#125;,</span><br><span class="line">                    order.DiningTable.Name,</span><br><span class="line">                    PaymentMember = <span class="keyword">new</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        Id = order.PaymentMember != <span class="literal">null</span> ? order.PaymentMember.Id : (<span class="built_in">int</span>?) <span class="literal">null</span>,</span><br><span class="line">                        NickName = order.PaymentMember != <span class="literal">null</span> ? order.PaymentMember.NickName : <span class="built_in">string</span>.Empty,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    Ids = order.ParticipatingMembers.Select(x =&gt; <span class="keyword">new</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        x.Id,</span><br><span class="line">                        x.NickName,</span><br><span class="line">                        x.Avatar</span><br><span class="line">                    &#125;),</span><br><span class="line">                    OrderState = order.State,</span><br><span class="line">                    <span class="comment">//SateName = order.State.GetDescription(),</span></span><br><span class="line">                    order.CreationTime</span><br><span class="line">                &#125;</span><br><span class="line">            ).OrderByDescending(x =&gt; x.Id).ToList();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (MemoryStream strem = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            <span class="keyword">using</span> (ExcelPackage package = <span class="keyword">new</span> ExcelPackage(strem))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> worksheet = package.Workbook.Worksheets.Add(<span class="string">&quot;第一页&quot;</span>);</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//Excel第一行列名</span></span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>].Value = <span class="string">&quot;订单号&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">2</span>].Value = <span class="string">&quot;餐桌号&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">3</span>].Value = <span class="string">&quot;餐品&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">4</span>].Value = <span class="string">&quot;单价金币&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">5</span>].Value = <span class="string">&quot;数量&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">6</span>].Value = <span class="string">&quot;小计&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">7</span>].Value = <span class="string">&quot;用户&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">8</span>].Value = <span class="string">&quot;总消费&quot;</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">9</span>].Value = <span class="string">&quot;订单时间&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Excel列宽</span></span><br><span class="line">                worksheet.Column(<span class="number">1</span>).Width = <span class="number">20</span>;</span><br><span class="line">                worksheet.Column(<span class="number">2</span>).Width = <span class="number">15</span>;</span><br><span class="line">                worksheet.Column(<span class="number">3</span>).Width = <span class="number">20</span>;</span><br><span class="line">                worksheet.Column(<span class="number">4</span>).Width = <span class="number">15</span>;</span><br><span class="line">                worksheet.Column(<span class="number">5</span>).Width = <span class="number">15</span>;</span><br><span class="line">                worksheet.Column(<span class="number">6</span>).Width = <span class="number">15</span>;</span><br><span class="line">                worksheet.Column(<span class="number">7</span>).Width = <span class="number">15</span>;</span><br><span class="line">                worksheet.Column(<span class="number">8</span>).Width = <span class="number">15</span>;</span><br><span class="line">                worksheet.Column(<span class="number">9</span>).Width = <span class="number">20</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">int</span> row = <span class="number">2</span>;</span><br><span class="line">                <span class="comment">//订单循环</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; result.Count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> items = result[i].Items.ToArray();</span><br><span class="line">                    <span class="keyword">var</span> ids = result[i].Ids.ToArray();</span><br><span class="line"></span><br><span class="line">                    worksheet.Cells[row, <span class="number">1</span>, row + items.Length<span class="number">-1</span> , <span class="number">1</span>].Merge = <span class="literal">true</span>;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">2</span>, row + items.Length - <span class="number">1</span>, <span class="number">2</span>].Merge = <span class="literal">true</span>;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">7</span>, row + items.Length - <span class="number">1</span>, <span class="number">7</span>].Merge = <span class="literal">true</span>;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">8</span>, row + items.Length - <span class="number">1</span>, <span class="number">8</span>].Merge = <span class="literal">true</span>;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">9</span>, row + items.Length - <span class="number">1</span>, <span class="number">9</span>].Merge = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                    worksheet.Cells[row, <span class="number">1</span>].Value = result[i].OrderNo;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">2</span>].Value = result[i].Name;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">8</span>].Value = result[i].UnitGoldCoinCount;</span><br><span class="line">                    worksheet.Cells[row, <span class="number">9</span>].Value = result[i].CreationTime.ToString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//订单用户循环</span></span><br><span class="line">                    <span class="keyword">if</span> (ids.Length &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> guys = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        <span class="keyword">foreach</span> (<span class="keyword">var</span> id <span class="keyword">in</span> ids)</span><br><span class="line">                        &#123;</span><br><span class="line">                            guys += id.NickName + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        guys = guys.Substring(<span class="number">0</span>, guys.Length - <span class="number">1</span>);</span><br><span class="line">                        worksheet.Cells[row, <span class="number">7</span>].Value = guys;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        worksheet.Cells[row, <span class="number">7</span>].Value = <span class="string">&quot;还未支付&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//订单详情循环</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; items.Length; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        worksheet.Row(row).Height = <span class="number">20</span>;</span><br><span class="line">                        worksheet.Cells[row, <span class="number">3</span>].Value = items[j].MealName;</span><br><span class="line">                        worksheet.Cells[row, <span class="number">4</span>].Value = items[j].UnitGoldCoin;</span><br><span class="line">                        worksheet.Cells[row, <span class="number">5</span>].Value = items[j].Number;</span><br><span class="line">                        worksheet.Cells[row, <span class="number">6</span>].Value = items[j].Number * items[j].UnitGoldCoin;</span><br><span class="line">                        row++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>].Style.Font.Bold = <span class="literal">true</span>;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>].Style.Fill.PatternType = ExcelFillStyle.Solid;</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>].Style.Font.Color.SetColor(Color.White);</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(<span class="number">0</span>,<span class="number">150</span>,<span class="number">136</span>));</span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>, row<span class="number">-1</span>, <span class="number">9</span>].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;<span class="comment">//水平居中</span></span><br><span class="line">                worksheet.Cells[<span class="number">1</span>, <span class="number">1</span>, row<span class="number">-1</span>, <span class="number">9</span>].Style.VerticalAlignment = ExcelVerticalAlignment.Center;<span class="comment">//垂直居中</span></span><br><span class="line">                worksheet.Cells[<span class="number">1</span>,<span class="number">1</span>,row<span class="number">-1</span>,<span class="number">9</span>].Style.Border.BorderAround(ExcelBorderStyle.Thin,Color.Black);</span><br><span class="line"></span><br><span class="line">                package.Save();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> File(strem.ToArray(), <span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>, <span class="string">&quot;点餐表.xlsx&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的注释已经详细的说明了EPPlus的使用方法，结合官方文档和查阅的资料，很轻松就可以掌握。</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>ASP.NET</tag>
        <tag>CSharp</tag>
        <tag>EPPlus</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket的使用</title>
    <url>/2018/09/26/WebSocket%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="什么是WebSocket？"><a href="#什么是WebSocket？" class="headerlink" title="什么是WebSocket？"></a>什么是WebSocket？</h2><blockquote>
<p>它是一种通讯协议，由HTML5提供的在单个TCP连接中进行全双工通讯的协议。</p>
</blockquote>
<h2 id="它与HTTP有什么不同？"><a href="#它与HTTP有什么不同？" class="headerlink" title="它与HTTP有什么不同？"></a>它与HTTP有什么不同？</h2><blockquote>
<p>1、HTTP 协议是一种无状态的、无连接的、单向的应用层协议。它采用了请求/响应模型。<br>通信请求只能由客户端发起，服务端对请求做出应答处理。WebSocket 连接允许客户端和服务器之间进行全双工通信。<br>2、在HTTP中一个请求（Request）对应一个响应（Response）。请求完毕即断开连接。WebSocket 只需要建立一次连接，就可以一直保持连接状态。</p>
</blockquote>
<a id="more"></a>
<p>创建一个Maven项目，引入WebSocket的包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.websocket<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.websocket-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!-- more -->
<p>创建类MyWebSocket，加上ServerEndpoint注解，和相应的生命周期注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint(&quot;/websocket&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSocket</span> </span>&#123;</span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Session session, EndpointConfig conf)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接回调&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">(Session session, String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传输回调&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Session session, Throwable error)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;错误回调&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Session session, CloseReason reason)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭回调&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这样就是一个WebSocket类了；<br>@ServerEndpoint注解中路径就是访问这个WebSocket的URL地址；<br>你可以在URL中加入参数，在客户端连接的时候可以接受到这个参数，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint(&quot;/websocket/&#123;id&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@OnOpen</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Session session, EndpointConfig conf,<span class="meta">@PathParam(&quot;id&quot;)</span>String id)</span> </span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>onOpen()回调中的Session代表了当前的WebSocket连接，你可以自己添加用户的属性；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.getUserProperties().put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>WebSocket端点可以发送和接收文本和二进制消息。此外，他们还可以发送ping帧并接收pong帧。<br>@OnMessage在端点中最多可以有三个注释方法，支持重载，所以可以通过以下方法来接收不同的数据类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OnMessage</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> textMessage（Session session，String msg）&#123; </span><br><span class="line">  System.out.println（“Text message：”+ msg）; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">@OnMessage</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> binaryMessage（Session session，ByteBuffer msg）&#123; </span><br><span class="line">  System.out.println（“Binary message：”+ msg.toString（））; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">@OnMessage</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> pongMessage（Session session，PongMessage msg）&#123; </span><br><span class="line">  System.out.println（“Pong message：”+ </span><br><span class="line">                      msg.getApplicationData（）。toString（））; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>发送消息，在回调实参中，通过session.getOpenSessions()来获取连接的实例；<br>官方对这个方法的解释如下：<br>Return a copy of the Set of all the open web socket sessions that represent connections to the same endpoint to which this session represents a connection.<br>返回所有开放web套接字会话集的副本，这些会话表示连接到此会话表示连接的同一端点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Session sess : session.getOpenSessions())&#123;</span><br><span class="line">    <span class="keyword">if</span>(sess.isOpen())&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sess.getBasicRemote().sendText(<span class="string">&quot;Text message&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上在使用过程中，session.getOpenSessions()并没有返回所有的WebSocket连接，因此，你可以使用这个并发集合，在onOpen()方法中来保存这些Session。（注：一定要是并发的集合，在多线程和中不会出现错误）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CopyOnWriteArrayList&lt;Session&gt; clients = <span class="keyword">new</span> CopyOnWriteArrayList&lt;Session&gt;();</span><br><span class="line">clients.add(session);</span><br></pre></td></tr></table></figure>
<p>发送消息的区别，Basic是I/O阻塞的，Async是异步的，一般用Async就可以了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.getBasicRemote().sendText(<span class="string">&quot;Text message：&quot;</span>);</span><br><span class="line">session.getAsyncRemote().sendText(<span class="string">&quot;Text message：&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>关闭回调，关闭连接的时候调用，会有一个CloseReason关闭原因的实参，如果对方不填为null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OnClose</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Session session, CloseReason reason)</span></span>&#123;</span><br><span class="line">    clients.remove(session);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>错误回调，当连接出现意外中断的情况下调用，正常的关闭连接会发送关闭状态码：1000，如果出现连接意外中断，可以通过状态码来判断错误原因。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OnError</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Session session, Throwable error)</span></span>&#123;</span><br><span class="line">    System.out.println(reason.getCloseCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>WebSocket</tag>
        <tag>Net</tag>
      </tags>
  </entry>
  <entry>
    <title>Hackintosh指南</title>
    <url>/2018/09/24/Hackintosh%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>由于<code>MacOS</code>适合做很多专业性工作，但是苹果电脑售价太贵，很多人和我一样使用者<code>Hackintosh</code>。不过网上缺乏<code>Hackintosh</code>的教学指南（实际上也没有一个固定的实现方法），所以特此写一篇。</p>
<h2 id="术语知识"><a href="#术语知识" class="headerlink" title="术语知识"></a>术语知识</h2><ul>
<li><strong>CloverEFI：</strong>这是一个引导程序，计算机启动的时候会加载它。由它来引导操作系统启动，它是<code>Hackintosh</code>的关键。</li>
<li><strong>Config.plist：</strong>这是<code>CloverEFI</code>的配置文件，格式是<code>XML</code>，存储了Clover的所有配置。</li>
<li><strong>kext文件：</strong><code>MacOS</code>的内核扩展，也可以当做<code>MacOS</code>的驱动程序。kext文件通过提供在计算机引导时加载的额外代码来“扩展”MacOSX的内核，它是操作系统的核心部分。</li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>以下是准备开始<code>Hackintosh</code>的先决条件：</p>
<ul>
<li><strong>8GB+U盘：</strong>将<code>MacOS</code>的安装程序刻录到U盘上。</li>
<li><strong>MacOS镜像：</strong><code>MacOS</code>的安装程序。</li>
<li><strong>CloverEFI：</strong><code>MacOS</code>的引导程序。</li>
<li><strong>Clover Configurator：</strong><code>Clover</code>配置文件的编辑器。</li>
<li><strong>VirtualSMC.kext：</strong><code>Apple</code>硬件伪装内核扩展，这个内核扩展是必备的，它将我们的硬件伪装成Apple的硬件。</li>
<li><strong>EasyUEFI：</strong><code>BIOS</code>启动项编辑程序。</li>
</ul>
<a id="more"></a>
<h2 id="格式化硬盘"><a href="#格式化硬盘" class="headerlink" title="格式化硬盘"></a>格式化硬盘</h2><p>我们需要将硬盘分区表格式化为<code>GPT分区表</code>，可以在<code>PE</code>环境下完成。有关于<code>MBR分区表</code>和<code>GPT分区表</code>的知识，可以自行去查阅资料。切记保留<code>ESP（EFI）</code>分区，至少为<code>200MB</code>。把<code>Hackintosh</code>要安装的分区格式化为<code>exFAT</code>。如果是装双系统记得备份<code>Windows</code>引导文件<code>Microsoft</code>，也可以安装成功后在<code>PE</code>环境下进行修复。</p>
<h2 id="制作安装器"><a href="#制作安装器" class="headerlink" title="制作安装器"></a>制作安装器</h2><h3 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h3><p>官方的制作方法前提是必须你已经拥有了一台苹果电脑，根据<a href="https://support.apple.com/zh-cn/HT201372">如何创建可引导的MacOS安装器</a>的方法制作安装器。制作完成后这个U盘里会有<code>EFI分区</code>，把<code>CloverEFI</code>安装到U盘里。</p>
<h3 id="第三方"><a href="#第三方" class="headerlink" title="第三方"></a>第三方</h3><p>从网络上下载的第三方制作的<code>dmg</code>镜像文件，可以使用<code>BalenaEtcher</code>刻录工具刻录到U盘上，一般这些镜像中都已经安装好<code>CloverEFI</code>程序。</p>
<h2 id="配置引导程序"><a href="#配置引导程序" class="headerlink" title="配置引导程序"></a>配置引导程序</h2><h3 id="启动驱动"><a href="#启动驱动" class="headerlink" title="启动驱动"></a>启动驱动</h3><p><code>/Driver/UEFI/</code>放的是<code>UEFI</code>方式启动时<code>CloverEFI</code>加载的驱动程序。</p>
<h3 id="内核扩展"><a href="#内核扩展" class="headerlink" title="内核扩展"></a>内核扩展</h3><p><code>/kexts/Other/</code>目录放入<code>Hackintosh</code>的<code>kext</code>文件，一般一开始不会放很多，只放必备，例如<code>VirtualSMC.kext</code>，等到安装成功安装后再慢慢增加其他的内核扩展文件。</p>
<h3 id="主题文件"><a href="#主题文件" class="headerlink" title="主题文件"></a>主题文件</h3><p><code>themes</code>目录是用来放<code>CloverEFI </code>的主题。</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><code>config.plist</code>就是<code>CloverEFI</code>引导程序的核心了，如果网上能搜到与你相同的硬件和安装版本的<code>Hackintosh</code>成功机型，建议直接下载它们的配置文件替换。如果没有，或并不适用，那只能在一次一次的试错慢慢修改<code>config.plist</code>，如果你已经有一台苹果电脑（或虚拟机），可以安装<code>Clover Configurator</code>编辑器，它有一个友好的图形化界面供你直接修改配置文件。如果没有，那只能通过文本编辑器修改<code>config.plist</code>，它是<code>XML</code>格式的，需要你有一些XML的基础。</p>
<h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><p><code>ACPI</code>目录是用来放<code>Differentiated System Description Table</code>（DSDT）和<code>System Services Descriptor Table</code>（SSDT）的，这是两张表，记录了硬件到系统服务的很多信息，<code>Hackintosh</code>由于硬件兼容性问题，肯定无法像真的苹果电脑一样完美，高级玩家会通过修改<code>DSDT</code>与<code>SSDT</code>得到更好的硬件和功能支持。</p>
<h2 id="BIOS设置"><a href="#BIOS设置" class="headerlink" title="BIOS设置"></a>BIOS设置</h2><p>进入BIOS关闭<code>Secure Boot</code>（安全启动），不同主板不同的界面和进入方式，自行百度。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>启动选择U盘，进入<code>CloverEFI</code>界面。开始安装<code>MacOS</code>（可以空格，勾选Verbose/-V，如果安装报错会有提示），如果卡住了，就去网上搜索报错信息，返回配置文件步骤，修改配置，一直循环直到安装成功。</p>
<h2 id="驱动三卡"><a href="#驱动三卡" class="headerlink" title="驱动三卡"></a>驱动三卡</h2><p>这里说的三卡指的是<code>显卡</code>、<code>网卡</code>、<code>声卡</code>，可根据自己的硬件，去网上进行搜索相应的驱动方法，返回配置文件步骤，一直循环直到驱动成功。</p>
<h2 id="引导修复"><a href="#引导修复" class="headerlink" title="引导修复"></a>引导修复</h2><p>进入<code>PE</code>环境，可以看到<code>EFI（ESP）</code>分区下多了<code>APPLE</code>这个目录，这是<code>MacOS</code>的引导文件，把备份的<code>Windows</code>引导文件<code>Microsoft</code>也放在这里（或使用引导修复程序）。使用<code>EasyUEFI</code>程序添加<code>BIOS</code>启动项，类型选择<code>Linux</code>类，文件选择<code>Clover/CLOVERX64.efi</code>。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>我当时装<code>Hackintosh</code>走了一些弯路，网上资料很少，而且<code>Hackintosh</code>并没有一个很系统的很详细的学习路径。不知其然，也不知其所以然。盲目地搜索，这种尝试有点像是旁门左道，只有不断的消耗时间，吸取经验，记录错误的修复方法才能成功。当然除非你本身是相关的开发者的话，就另当别论。</p>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
        <tag>MacOS</tag>
        <tag>Apple</tag>
      </tags>
  </entry>
</search>
